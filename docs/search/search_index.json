{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Benvinguts!!","text":"<p>Benivinguts a la web de Desenvolupament d'Interf\u00edcies.</p> <p>Curs 22/23. IES Jaume II \"El Just\" - Tavernes de la Valldigna</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#desenvolupament-dinterfecies","title":"Desenvolupament d'interf\u00e9cies","text":""},{"location":"about/#normativa","title":"Normativa","text":"<p>Estatal -&gt; RD: 450/2010</p> <p>Auton\u00f2mica -&gt; Curr\u00edculum CV: Ordre 58/2012</p>"},{"location":"about/#ies-jaume-ii-el-just-tavernes-de-la-valldigna","title":"IES Jaume II \"El Just\" - Tavernes de la Valldigna","text":""},{"location":"about/#curs-2021-2022","title":"Curs 2021-2022","text":"<p>Professor: Ferran Cunyat</p>"},{"location":"qualificacio/rubrica/","title":"R\u00fabrica per a avaluar pr\u00e0ctiques/projectes, en Disseny D'interf\u00edcies","text":"<p>===============================================================================</p> <p>Criteris a evaluar:</p> <ul> <li>Resoluci\u00f3: utilitzaci\u00f3 dels algoritmes, les estructures de dades, les funcions, les estructures de control .. m\u00e9s adequats.</li> <li>Funcionament: la soluci\u00f3 proposada fa el que s'ha demanat.</li> <li>Regles d'estil: nomenament adequat dels components utilitzats en la resoluci\u00f3 de la pr\u00e0ctica. Les regles d'estil de Python es complixen. Amb esta part recomanem la utilitzaci\u00f3 d'un linter, per exemple, flake8 o pylint.</li> <li>Disseny gr\u00e0fic: interf\u00edcie clara i estructurada d'acord amb les especificacions.</li> <li>Documentaci\u00f3 interna: inclusi\u00f3 de docstrings i comentaris en el codi de la pr\u00e0ctica que ajuden a l'enteniment de la resoluci\u00f3 realitzada. En la unitat de documentaci\u00f3 veurem com tractar tota la documentaci\u00f3 del projecte.</li> </ul> Molt b\u00e9 B\u00e9 Deficient Molt deficient Resoluci\u00f3 Utilitza les estructures m\u00e9s adequats per a resoldre l'exercici. Utilitza les estructures necessaris per a resoldre l'exercici, encara que no s\u00f3n les m\u00e9s adequades. Utilitza estructures inadequades per a resoldre l'exercici. Utilitza estructures que no resolen l'exercici. Puntuaci\u00f3 (m\u00e0x. 3)  3 2 1 0 Funcionament El funcionament de l'exercici \u00e9s complet. El funcionament de l\u2019exercici est\u00e0 quasi complet o est\u00e0 complet per\u00f2 t\u00e9 fallades sense import\u00e0ncia. El funcionament de l'exercici t\u00e9 fallades importants. L'exercici no funciona. Puntuaci\u00f3 (m\u00e0x. 2)  2 1 0,5 0 Regles d'estil El nom de components i variables ajuda a entendre el codi, a m\u00e9s, es complixen les regles d'estil de Python. El nom de components i variables ajuda a entendre el codi, per\u00f2 hi ha errades d'estil. El nom de components i variables no ajuda a entendre el codi o no es seguixen les regles d'estil. El nom de components i variables no ajuda a entendre el codi i no es seguixen les regles d'estil. Puntuaci\u00f3 (m\u00e0x. 1)  1 0,5 0,25 0 Disseny gr\u00e0fic El disseny gr\u00e0fic utilitza els components m\u00e9s adequats, \u00e9s clar i estructurat, i a m\u00e9s \u00e9s amigable. El disseny gr\u00e0fic cont\u00e9 alguns components que no s\u00f3n els m\u00e9s adequats, per\u00f2 \u00e9s clar i estructurat. El disseny gr\u00e0fic cont\u00e9 alguns components que no s\u00f3n els m\u00e9s adequats, i a m\u00e9s, no \u00e9s clar ni estructurat. Al disseny gr\u00e0fic li falten alguns components necessaris i utilitza components que no s\u00f3n correctes. Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0 Documentaci\u00f3  Aporta documentaci\u00f3 adequada que ajuda a entendre el codi, a executar i implantar l'aplicaci\u00f3. La documentaci\u00f3 aportada \u00e9s la justa per entendre el codi, per executar-lo i implantar-lo. Aporta documentaci\u00f3 insuficient. No aporta documentaci\u00f3. Puntuaci\u00f3 (m\u00e0x. 1)   1 0,5 0,25 0"},{"location":"unitats/1-python/pr%C3%A0ctiques/1%20-%20PyGame/","title":"Introducci\u00f3","text":"<p>PyGame \u00e9s una llibreria de Python3 pensada per a desenvolupar de forma senzilla jocs amb Python. Anem a utilitzar-la per a desenvolupar un xicotet joc. Ser\u00e0 la primera activitat avaluable del curs.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/1%20-%20PyGame/#installacio-i-configuracio","title":"Instal\u00b7laci\u00f3 i configuraci\u00f3","text":"<p>El primer que farem \u00e9s activar el nostre entorn virtual de desenvolupament i instal\u00b7lar la llibreria pygame. Per a aix\u00f2 recordeu que utilitzarem venv tal com ve explicat a la teoria. Dins l'entorn virtual instal\u00b7lem pygame.</p> Bash<pre><code>$ source .venv/bin/activate\n(.venv) $ pip install pygame\n</code></pre>"},{"location":"unitats/1-python/pr%C3%A0ctiques/1%20-%20PyGame/#hola-mon-del-pygame","title":"Hola m\u00f3n! del pygame","text":"<p>Aquest programa crea una finestra, omple el fons de blanc i dibuixa un cercle blau al mig:</p> Python<pre><code># Simple pygame program\n# Import and initialize the pygame library\nimport pygame\npygame.init()\n# Set up the drawing window\nscreen = pygame.display.set_mode([500, 500])\n# Run until the user asks to quit\nrunning = True\nwhile running:\n# Did the user click the window close button?\nfor event in pygame.event.get():\nif event.type == pygame.QUIT:\nrunning = False\n# Fill the background with white\nscreen.fill((255, 255, 255))\n# Draw a solid blue circle in the center\npygame.draw.circle(screen, (0, 0, 255), (250, 250), 75)\n# Flip the display\npygame.display.flip()enem\n# Done! Time to quit.\npygame.quit()\n</code></pre> <p></p> <p>Fixem-nos en alguns punts:</p> <ul> <li> <p>La l\u00ednia 8 configura la finestra de visualitzaci\u00f3 del programa, amb unes dimensions de 500x500 pixels.</p> </li> <li> <p>Les l\u00ednies 11 i 12 configuren un bucle de joc per controlar quan finalitza el programa.</p> </li> <li> <p>Les l\u00ednies 15 a 17 recullen i gestionen esdeveniments dins del bucle del joc. L'\u00fanic esdeveniment gestionat de moment \u00e9s pygame.QUIT, que es produeix quan l'usuari fa clic al bot\u00f3 de tancament de la finestra.</p> </li> <li> <p>La l\u00ednia 20 omple la finestra d\u2019un color s\u00f2lid. screen.fill() accepta una llista o una tupla que especifica els valors RGB del color. (255, 255, 255), \u00e9s el color blanc.</p> </li> <li> <p>La l\u00ednia 23 dibuixa un cercle a la finestra, utilitzant els par\u00e0metres (finestra on dibuixar, color, posici\u00f3 central i radi)</p> </li> <li>La l\u00ednia 26 actualitza el contingut de la pantalla, que de moment no canvia al llarg del temps.</li> <li>La l\u00ednia 29 ix del joc, sols s'executa quan ix del bucle per l'event QUIT.</li> </ul> <p>Aquesta \u00e9s la versi\u00f3 pygame de \"Hola, m\u00f3n\".</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/","title":"Disseny del joc","text":"<p>Una vegada vist els conceptes b\u00e0sics anem a desenvolupar un xicotet joc a mode d'exemple. </p> <p>L'objectiu del joc \u00e9s evitar obstacles que entren:</p> <ul> <li>El jugador comen\u00e7a a la part esquerra de la pantalla.</li> <li>Els obstacles entren a l'atzar per la dreta i es mouen a l'esquerra en l\u00ednia recta.</li> <li>El jugador pot moure's cap a l'esquerra, cap a la dreta, cap amunt o cap avall per evitar els obstacles.</li> <li>El jugador no pot ixir-se'n de la pantalla.</li> <li>El joc finalitza quan el jugador \u00e9s colpejat per un obstacle o quan l'usuari tanca la finestra. Mentre no es produisca a\u00e7\u00f2, el joc continua, pot ser infinit.</li> </ul>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#importem-i-inicialitzem-el-joc","title":"Importem i inicialitzem el joc","text":"Python<pre><code># Import the pygame module\nimport pygame\n# Import pygame.locals for easier access to key coordinates\n# Updated to conform to flake8 and black standards\nfrom pygame.locals import (\nK_UP,\nK_DOWN,\nK_LEFT,\nK_RIGHT,\nK_ESCAPE,\nKEYDOWN,\nQUIT\n)\n# Initialize pygame\npygame.init()\n</code></pre> <p>Utilitzem les constants definides en locals per veure quina tecla s'ha apretat, o si s'ha pulsat sobre l'aspa de tancar el programa.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#configurem-la-pantalla","title":"Configurem la pantalla","text":"<p>Python<pre><code># Define constants for the screen width and height\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n# Create the screen object\n# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n</code></pre> Definim una finestra \u00e9s de 800x600, utilitzant les constants SCREEN_WIDTH i SCREEN_HEIGHT. El m\u00e8tode ens torna una superf\u00edcie que representa les dimensions interiors de la finestra. Aquesta \u00e9s la part de la finestra que podem controlar, mentre que el sistema operatiu controla els l\u00edmits de la finestra i la barra de t\u00edtol.</p> <p>Si executeu aquest programa ara, apareixer\u00e0 una finestra que apareixer\u00e0 breument i desapareixer\u00e0 immediatament.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#configuracio-del-bucle-principal-del-joc","title":"Configuraci\u00f3 del bucle principal del joc","text":"<p>Tots els jocs des de Pong fins a Fortnite utilitzen un bucle de joc per controlar-lo. Fa quatre coses molt importants:</p> <ol> <li>Processa l'entrada de l'usuari</li> <li>Actualitza l'estat de tots els objectes del joc</li> <li>Actualitza la pantalla i l'\u00e0udio</li> <li>Mant\u00e9 la velocitat del joc</li> </ol> <p>Tots els cicles del bucle del joc s\u2019anomenen fotogrames i, com m\u00e9s r\u00e0pid es facen les coses a cada cicle, m\u00e9s r\u00e0pid es desenvolupar\u00e0 el vostre joc. Els fotogrames continuen ocorrent fins que es compleix alguna condici\u00f3 per ixir del joc. Al vostre disseny, hi ha dues condicions que poden acabar amb el bucle del joc:</p> <ol> <li>El jugador xoca amb un obstacle. (M\u00e9s endavant, cobrir\u00e0 la detecci\u00f3 de col\u00b7lisions.)</li> <li>El jugador tanca la finestra (esdeveniment QUIT).</li> </ol> <p>El primer que fa el bucle del joc \u00e9s processar l'entrada de l'usuari per permetre al jugador moure's per la pantalla. Per tant, necessiteu alguna manera de capturar i processar una gran quantitat d\u2019informacions. Ho farem mitjan\u00e7ant el sistema d'esdeveniments pygame.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#processament-desdeveniments","title":"Processament d'esdeveniments","text":"<p>Pr\u00e9mer una tecla, moure el ratol\u00ed o el joystick s\u00f3n algunes de les maneres en qu\u00e8 un usuari pot proporcionar informaci\u00f3. Totes aquestes accions de l'usuari donen lloc a la generaci\u00f3 d'un esdeveniment i poden passar en qualsevol moment.</p> <p>Tots els esdeveniments de Pygame es col\u00b7loquen a la cua d'esdeveniments, la qual es pot accedir i manipular. El tractament que es fa dels esdeveniments s\u2019anomena gestor d\u2019esdeveniments.</p> <p>Per al vostre joc, els tipus d\u2019esdeveniments en qu\u00e8 us centreu s\u00f3n les pulsacions de tecles i el tancament de la finestra. </p> <ul> <li>Els esdeveniments de premuda de tecles tenen el tipus d'esdeveniment KEYDOWN.</li> <li>L'esdeveniment de tancament de finestra t\u00e9 el tipus QUIT. </li> </ul> <p>Els diferents tipus d'esdeveniments tamb\u00e9 poden tenir associades altres dades. Per exemple, el tipus d'esdeveniment KEYDOWN tamb\u00e9 t\u00e9 una variable anomenada key per indicar quina tecla s'ha premut.</p> <p>Accediu a la llista de tots els esdeveniments actius a la cua cridant amb pygame.event.get(). A continuaci\u00f3, passeu per aquesta llista, inspeccioneu cada tipus d'esdeveniment i tracteu-los:</p> Python<pre><code># Variable to keep the main loop running\nrunning = True\n# Main loop\nwhile running:\n# Look at every event in the queue\nfor event in pygame.event.get():\n# Did the user hit a key?\nif event.type == KEYDOWN:\n# Was it the Escape key? If so, stop the loop.\nif event.key == K_ESCAPE:\nrunning = False\n# Did the user click the window close button? If so, stop the loop.\nelif event.type == QUIT:\nrunning = False\n</code></pre> <p>Vegem m\u00e9s a fons aquest bucle principal del joc:</p> <ol> <li>S'estableix una variable de control per al bucle del joc. Per a ixir del bucle i del joc, hem d\u2019establir la variable running = False.</li> <li>Recorrem el gestor d'esdeveniments, recollint tots els esdeveniments que hi ha actualment a la cua d'esdeveniments. Si no hi ha esdeveniments, la llista est\u00e0 buida i el gestor no far\u00e0 res.</li> <li>Per a cada esdeveniment de la cua, comprovem  el tipus. Si event.type == KEYDOWN, s'ha apretat alguna tecla. Si \u00e9s aix\u00ed, comprovem quina tecla s'ha apretat mirant l'atribut event.key. Si la clau \u00e9s la tecla Esc, indicada per K_ESCAPE, surt del bucle del joc configurant running = False.</li> <li>Es fa una comprovaci\u00f3 similar per al tipus d'esdeveniment QUIT. Aquest esdeveniment nom\u00e9s es produeix quan l'usuari fa clic al bot\u00f3 de tancament de la finestra. L'usuari tamb\u00e9 pot utilitzar qualsevol altra acci\u00f3 del sistema operatiu per tancar la finestra.</li> </ol> <p>Quan afegiu aquestes l\u00ednies al codi anterior i l'executeu, veureu una finestra amb una pantalla en blanc o negre. La finestra no desapareixer\u00e0 fins que no premeu la tecla Esc tanqueu la finestra amb el ratol\u00ed o combinaci\u00f3 de tecles Alt + F4. (Comproveu-ho, per\u00f2 recordeu afegir pygame.display.flip() per a que pinte la pantalla al bucle).</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#pintant-objectes-a-la-pantalla","title":"Pintant objectes a la pantalla","text":"<p>Al programa de mostra, hem dibuixat a la pantalla mitjan\u00e7ant dos m\u00e8todes:</p> <ul> <li>screen.fill() per omplir el fons</li> <li>pygame.draw.circle() per dibuixar un cercle</li> <li>Ara veurem una tercera manera de dibuixar a la pantalla: utilitzar una superf\u00edcie Surface.</li> </ul> <p>Una superf\u00edcie \u00e9s un objecte rectangular sobre el qual podem dibuixar, com un full de paper en blanc. La pantalla \u00e9s una superf\u00edcie i podeu crear els vostres propis objectes de superf\u00edcie separats de la pantalla. Vegem com funciona:</p> Python<pre><code># Fill the screen with white\nscreen.fill((255, 255, 255))\n# Create a surface and pass in a tuple containing its length and width\nsurf = pygame.Surface((50, 50))\n# Give the surface a color to separate it from the background\nsurf.fill((0, 0, 0))\nrect = surf.get_rect()\n</code></pre> <p>A la primera l\u00ednia la pantalla s'omple de blanc. Despr\u00e9s es crea una nova superf\u00edcie de 50 p\u00edxels d'ample, 50 p\u00edxels d'al\u00e7ada i s'assigna a surf. Ara surf \u00e9s una superf\u00edcie igual que la pantalla principal i l'omplim de negre. Accedim al seu rectangle subjacentmitjan\u00e7ant get_rect() per poder-ho utilitzar posteriorment.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#us-de-blit-i-flip","title":"\u00das de .blit () i .flip ()","text":"<p>El fet de crear una nova superf\u00edcie no \u00e9s suficient per veure-la a la pantalla. Per fer-ho, cal que col\u00b7loqueu la superf\u00edcie sobre una altra superf\u00edcie. El terme blit significa Block Transfer (Transfer\u00e8ncia de blocs) i .blit() \u00e9s la forma de copiar el contingut d\u2019una superf\u00edcie a una altra. Nom\u00e9s podeu copiar el contingut entre superf\u00edcies, per\u00f2 ja haviem dit que screen \u00e9s una superf\u00edcie. Vegem com dibuixem surf a la pantalla:</p> Python<pre><code># This line says \"Draw surf onto the screen at the center\"\nscreen.blit(surf, (SCREEN_WIDTH/2, SCREEN_HEIGHT/2))\npygame.display.flip()\n</code></pre> <p>La funci\u00f3 blit pren dos arguments:</p> <ol> <li>La superf\u00edcie a pintar</li> <li>Les coordenades del v\u00e8rtex top-left</li> </ol> <p>Per tant si ho volem pintar exactament al centre de la pantalla hauriem de restar la seua amplada i altura respectivament:</p> Python<pre><code># Put the center of surf at the center of the display\nsurf_center = (\n(SCREEN_WIDTH-surf.get_width())/2,\n(SCREEN_HEIGHT-surf.get_height())/2\n)\n# Draw surf at the new coordinates\nscreen.blit(surf, surf_center)\npygame.display.flip()\n</code></pre> <p>Recordeu fer la crida a la funci\u00f3 flip per a repintar el joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/","title":"Sprites","text":"<p>Al disseny del joc, el jugador comen\u00e7a per l\u2019esquerra i els obstacles entren per la dreta. Podeu representar tots els obstacles amb objectes de la superf\u00edcie per fer tot el dibuix m\u00e9s f\u00e0cil, per\u00f2 com sabeu on dibuixar-los? Com se sap si un obstacle ha xocat amb el jugador? Qu\u00e8 passa quan l'obstacle ix de la pantalla? Qu\u00e8 passa si voleu dibuixar imatges de fons que tamb\u00e9 es moguin? Qu\u00e8 passa si voleu que les vostres imatges siguen animades? Podeu gestionar totes aquestes situacions i molt m\u00e9s amb els sprites.</p> <p>En termes de programaci\u00f3, un sprite \u00e9s una representaci\u00f3 2D d'alguna cosa a la pantalla. Essencialment, \u00e9s una imatge. pygame proporciona una classe Sprite, que est\u00e0 dissenyada per contenir una o diverses representacions gr\u00e0fiques de qualsevol objecte de joc que vulgueu mostrar a la pantalla. Per utilitzar-lo, creeu una nova classe que herede d'Sprite. Aix\u00f2 us permet utilitzar els seus m\u00e8todes heredats.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#jugadors","title":"Jugadors","text":"<p>A continuaci\u00f3 s\u2019explica com s\u2019utilitzen els objectes Sprite amb el joc actual per definir el jugador.</p> Python<pre><code># Define a Player object by extending pygame.sprite.Sprite\n# The surface drawn on the screen is now an attribute of 'player'\nclass Player(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Player, self).__init__()\nself.surf = pygame.Surface((75, 25))\nself.surf.fill((255, 255, 255))\nself.rect = self.surf.get_rect()\n</code></pre> <p>Primer definiu Player ampliant pygame.sprite.Sprite. Despr\u00e9s <code>.__ init __()</code> utilitza <code>.super()</code> per cridar al constructor de la classe pare.</p> <p>A continuaci\u00f3, definim i inicialitzem .surf per mantindre la imatge que voleu mostrar, que actualment \u00e9s un quadre blanc. Tamb\u00e9 definim i inicialitzem .rect, que s'utilitzar\u00e0 m\u00e9s endavant. Per utilitzar aquesta nova classe, heu de crear un objecte nou i canviar tamb\u00e9 el codi de dibuix. Amplieu el bloc de codi seg\u00fcent per veure-ho tot junt:</p> Python<pre><code># Import the pygame module\nimport pygame\n# Import pygame.locals for easier access to key coordinates\n# Updated to conform to flake8 and black standards\nfrom pygame.locals import (\nK_UP,\nK_DOWN,\nK_LEFT,\nK_RIGHT,\nK_ESCAPE,\nKEYDOWN,\nQUIT,\n)\n# Define constants for the screen width and height\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n# Define a player object by extending pygame.sprite.Sprite\n# The surface drawn on the screen is now an attribute of 'player'\nclass Player(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Player, self).__init__()\nself.surf = pygame.Surface((75, 25))\nself.surf.fill((255, 255, 255))\nself.rect = self.surf.get_rect()\n# Initialize pygame\npygame.init()\n# Create the screen object\n# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n# Instantiate player. Right now, this is just a rectangle.\nplayer = Player()\n# Variable to keep the main loop running\nrunning = True\n# Main loop\nwhile running:\n# for loop through the event queue\nfor event in pygame.event.get():\n# Check for KEYDOWN event\nif event.type == KEYDOWN:\n# If the Esc key is pressed, then exit the main loop\nif event.key == K_ESCAPE:\nrunning = False\n# Check for QUIT event. If QUIT, then set running to false.\nelif event.type == QUIT:\nrunning = False\n# Fill the screen with black\nscreen.fill((0, 0, 0))\n# Draw the player on the screen\n#screen.blit(player.surf, (SCREEN_WIDTH/2, SCREEN_HEIGHT/2))\nscreen.blit(player.surf, player.rect)\n# Update the display\npygame.display.flip()\n</code></pre> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#entrada-dusuari","title":"Entrada d\u2019usuari","text":"<p>Fins ara, hem apr\u00e8s a configurar Pygame i dibuixar objectes a la pantalla. Ara comen\u00e7a la diversi\u00f3. Fareu que el joc es puga controlar mitjan\u00e7ant el teclat.</p> <p>Abans, haviem vist que pygame.event.get() retorna la llista dels esdeveniments de la cua, que analitzem per trobar els seus tipus. B\u00e9, aquesta no \u00e9s l\u2019\u00fanica manera de llegir les tecles. pygame tamb\u00e9 proporciona pygame.event.get_pressed(), que retorna un diccionari que cont\u00e9 tots els esdeveniments KEYDOWN actuals a la cua.</p> <p>Posar-ho al bucle del joc despr\u00e9s del bucle de gesti\u00f3 d'esdeveniments torna un diccionari que cont\u00e9 les tecles apretades al comen\u00e7ament de cada fotograma.</p> <p>A continuaci\u00f3, escrivim un m\u00e8tode a Player per analitzar aquest diccionari. Aix\u00f2 definir\u00e0 el comportament del sprite a partir de les tecles que es premen.</p> Python<pre><code># Get the set of keys pressed and check for user input\npressed_keys = pygame.key.get_pressed()\n# Move the sprite based on user keypresses\ndef update(self, pressed_keys):\nif pressed_keys[K_UP]:\nself.rect.move_ip(0, -5)\nif pressed_keys[K_DOWN]:\nself.rect.move_ip(0, 5)\nif pressed_keys[K_LEFT]:\nself.rect.move_ip(-5, 0)\nif pressed_keys[K_RIGHT]:\nself.rect.move_ip(5, 0)\n</code></pre> <p>K_UP, K_DOWN, K_LEFT i K_RIGHT corresponen a les tecles de les fletxes del teclat. Utilitzarem .move_ip(), que significa moure des del punt actual, i reb per par\u00e0metre el n\u00famero de pixels a moure's en horitzontal i en vertical com si es tractara d'un eix de coordenades.</p> <p>A continuaci\u00f3, cridem a .update() cada fotograma per moure el sprite del jugador en resposta a les pulsacions de tecles.</p> Python<pre><code># Main loop\nwhile running:\n# for loop through the event queue\nfor event in pygame.event.get():\n# Check for KEYDOWN event\nif event.type == KEYDOWN:\n# If the Esc key is pressed, then exit the main loop\nif event.key == K_ESCAPE:\nrunning = False\n# Check for QUIT event. If QUIT, then set running to false.\nelif event.type == QUIT:\nrunning = False\n# Get all the keys currently pressed\npressed_keys = pygame.key.get_pressed()\n# Update the player sprite based on user keypresses\nplayer.update(pressed_keys)\n# Fill the screen with black\nscreen.fill((0, 0, 0))\n</code></pre> <p>Amb aix\u00f2, ja veiem que el Player es mou tant en horitzontal com en vertical.</p> <p></p> <p>\u00c9s possible que noteu dos problemes:</p> <ol> <li>El rectangle del jugador es mou molt r\u00e0pid. Ho solucionarem m\u00e9s endavant.</li> <li>El rectangle del jugador pot ixir-se'n de la pantalla. Solucionem-ho ara.</li> </ol> <p>Per mantenir el jugador a la pantalla, cal afegir la l\u00f2gica per detectar les colisions entre el jugador i els l\u00edmits de la pantalla. Per fer-ho, comprovem si les coordenades del rectangle s\u2019han despla\u00e7at m\u00e9s enll\u00e0 del l\u00edmit de la pantalla. Si \u00e9s aix\u00ed, indiquem al programa que el torne a la vora, quedant la funci\u00f3 update com a continuaci\u00f3 s'indica:</p> Python<pre><code># Move the sprite based on user keypresses\ndef update(self, pressed_keys):\nif pressed_keys[K_UP]:\nself.rect.move_ip(0, -5)\nif pressed_keys[K_DOWN]:\nself.rect.move_ip(0, 5)\nif pressed_keys[K_LEFT]:\nself.rect.move_ip(-5, 0)\nif pressed_keys[K_RIGHT]:\nself.rect.move_ip(5, 0)\n# Keep player on the screen\nif self.rect.left &lt; 0:\nself.rect.left = 0\nif self.rect.right &gt; SCREEN_WIDTH:\nself.rect.right = SCREEN_WIDTH\nif self.rect.top &lt;= 0:\nself.rect.top = 0\nif self.rect.bottom &gt;= SCREEN_HEIGHT:\nself.rect.bottom = SCREEN_HEIGHT\n</code></pre> <p>Ac\u00ed, en lloc d\u2019utilitzar .move(), nom\u00e9s heu de canviar les coordenades corresponents de .top, .bottom, .left o .right directament. Proveu-ho i veureu que el rectangle del reproductor ja no pot ixir-se'n de la pantalla.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#enemics","title":"Enemics","text":"<p>Qu\u00e8 \u00e9s un joc sense enemics? Utilitzarem les mateixes t\u00e8cniques que ja hem apr\u00e8s per crear una classe enemiga b\u00e0sica i, a continuaci\u00f3, crearem moltes inst\u00e0ncies d'aquesta per a que el jugador intente evitar-les. Primer, importeu la llibreria random.  A continuaci\u00f3, creeu una nova classe de sprite anomenada Enemy, seguint el mateix patr\u00f3 que utilitzarem per a Player:</p> Python<pre><code># Import random for random numbers\nimport random\n# Define the enemy object by extending pygame.sprite.Sprite\n# The surface you draw on the screen is now an attribute of 'enemy'\nclass Enemy(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Enemy, self).__init__()\nself.surf = pygame.Surface((20, 10))\nself.surf.fill((255, 255, 255))\nself.rect = self.surf.get_rect(\ncenter=(\nrandom.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),\nrandom.randint(0, SCREEN_HEIGHT),\n)\n)\nself.speed = random.randint(5, 20)\n# Move the sprite based on speed\n# Remove the sprite when it passes the left edge of the screen\ndef update(self):\nself.rect.move_ip(-self.speed, 0)\nif self.rect.right &lt; 0:\nself.kill()\n</code></pre> <p>Hi ha quatre difer\u00e8ncies notables entre Enemic i Jugador:</p> <ol> <li>Quan creem un enemic ho fem a una ubicaci\u00f3 aleat\u00f2ria al llarg de la vora dreta de la pantalla. Es troba en una posici\u00f3 entre 20 i 100 p\u00edxels de dist\u00e0ncia de la vora dreta i en algun lloc entre la vora superior i la inferior. De forma que al principi no ser\u00e0 visible i anir\u00e0 apareixent per la vora dreta de la pantalla.</li> <li>Definim una velocitat speed com un n\u00famero aleatori entre 5 i 20. Aix\u00f2 especifica la velocitat amb qu\u00e8 aquest enemic es mou cap al jugador.</li> <li>.update() no necessita arguments, ja que els enemics es mouen autom\u00e0ticament cap a l'esquerra a la velocitat aleat\u00f2ria definida quan es va crear i que ja no canvia.</li> <li>Comprovem si l'enemic s'ha mogut fora de la pantalla al sobrepassar la vora esquerra. Per assegurar-nos que l\u2019enemic estiga completament fora de la pantalla i que no desaparega mentre encara siga visible, comprovem que el costat dret de .rect haja sobrepassat el costat esquerre de la pantalla. Una vegada que l'enemic es troba fora de pantalla, cridem a .kill() per evitar anar consumint m\u00e9s recursos cada vegada.</li> </ol> <p>Qu\u00e8 fa .kill()? Per saber-ho, estudiem els Sprite Groups.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#sprite-groups","title":"Sprite Groups","text":"<p>Una altra classe s\u00faper \u00fatil que proporciona Pygame s\u00f3n els Sprite Groups. Es tracta d'un objecte que cont\u00e9 un grup d'objectes Sprite. Aleshores, per qu\u00e8 utilitzar-lo? No podem fer el seguiment dels nostres objectes Sprite en una llista? B\u00e9, podem, per\u00f2 l\u2019avantatge d\u2019utilitzar un grup radica en els m\u00e8todes que exposa. Aquests m\u00e8todes ajuden a detectar si algun enemic ha xocat amb el jugador, cosa que facilita les actualitzacions.</p> <p>Vegem com crear Sprite Group. Creem dos objectes de grup diferents:</p> <ol> <li>El primer grup tindr\u00e0 tots els Sprite del joc.</li> <li>El segon grup tindr\u00e0 nom\u00e9s els objectes enemics.</li> </ol> <p>A continuaci\u00f3, es mostra el codi: Python<pre><code># Create the 'player'\nplayer = Player()\n# Create groups to hold enemy sprites and all sprites\n# - enemies is used for collision detection and position updates\n# - all_sprites is used for rendering\nenemies = pygame.sprite.Group()\nall_sprites = pygame.sprite.Group()\nall_sprites.add(player)\n# Variable to keep the main loop running\nrunning = True\n</code></pre></p> <p>Quan cridem el m\u00e8tode .kill(), el Sprite s\u2019elimina de tots els grups als quals pertany. Aix\u00f2 tamb\u00e9 elimina les refer\u00e8ncies al Sprite, cosa que permet al garbage collector de Python recuperar la mem\u00f2ria quan siga necessari.</p> <p>Ara que teniu un grup all_sprites, podeu canviar la manera com es dibuixen els objectes. En lloc de cridar a .blit() nom\u00e9s amb Player, podem repintar tot sobre all_sprites:</p> <p>Python<pre><code># Fill the screen with black\nscreen.fill((0, 0, 0))\n# Draw all sprites\nfor entity in all_sprites:\nscreen.blit(entity.surf, entity.rect)\n# Flip everything to the display\npygame.display.flip()\n</code></pre> Ara, qualsevol objecte d'all_sprites es redibuixar\u00e0 a tots els fotogrames, ja sigui un enemic o un jugador.</p> <p>Nom\u00e9s hi ha un problema ... No tenim cap enemic. Podriem crear un munt d\u2019enemics al principi del joc, per\u00f2 el joc es tornaria complicad\u00edssim a l'apareixer tots junts. En el seu lloc, explorem com mantenir un subministrament constant d\u2019enemics que arriben a mesura que avance el joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#esdeveniments-personalitzats","title":"Esdeveniments personalitzats","text":"<p>El disseny demana que apareguen enemics a intervals regulars. Aix\u00f2 significa que, a intervals establerts, hem de fer dues coses:</p> <ol> <li>Crea un enemic nou.</li> <li>Afegiu-lo a all_sprites i a enemics. (Sprite Groups)</li> </ol> <p>Ja teniu codi que gestiona esdeveniments aleatoris. El bucle d'esdeveniments est\u00e0 dissenyat per buscar esdeveniments aleatoris que es produeixen a cada fotograma i tractar-los adequadament. Per sort, pygame no us limita a utilitzar nom\u00e9s els tipus d\u2019esdeveniments que t\u00e9 predefinits. Podeu definir els vostres propis esdeveniments per gestionar-los segons convinga.</p> <p>Vegem com es crea un esdeveniment personalitzat que es genera cada pocs segons. Podeu crear un esdeveniment personalitzat com es mostra a continuaci\u00f3:</p> Python<pre><code># Create the screen object\n# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n# Create a custom event for adding a new enemy\nADDENEMY = pygame.USEREVENT + 1\npygame.time.set_timer(ADDENEMY, 250)\n# Instantiate player. Right now, this is just a rectangle.\nplayer = Player()\n</code></pre> <p>pygame defineix els esdeveniments internament com a enters, de manera que cal definir un nou esdeveniment amb un enter \u00fanic. L'\u00faltim esdeveniment reservat a Pygame es diu USEREVENT, de manera que definir ADDENEMY = pygame.USEREVENT + 1 garanteix que siga \u00fanic.</p> <p>A continuaci\u00f3, heu d'insertar aquest nou esdeveniment a la cua d'esdeveniments a intervals regulars durant tot el joc. Necessitem d'alguna forma gestionar el temps, per aix\u00f2 utilitzarem el m\u00f2dul de temps. </p> <p>Disparem el nou esdeveniment ADDENEMY cada 250 mil\u00b7lisegons, o quatre vegades per segon. Per aix\u00f2 farem una crida a .set_timer() fora del bucle del joc, ja que nom\u00e9s necessitem un temporitzador, per\u00f2 es disparar\u00e0 durant tot el joc cada 250 milisegons.</p> <p>Afegim el codi per gestionar el nostre nou esdeveniment.</p> Python<pre><code># Main loop\nwhile running:\n# Look at every event in the queue\nfor event in pygame.event.get():\n# Did the user hit a key?\nif event.type == KEYDOWN:\n# Was it the Escape key? If so, stop the loop.\nif event.key == K_ESCAPE:\nrunning = False\n# Did the user click the window close button? If so, stop the loop.\nelif event.type == QUIT:\nrunning = False\n# Add a new enemy?\nelif event.type == ADDENEMY:\n# Create the new enemy and add it to sprite groups\nnew_enemy = Enemy()\nenemies.add(new_enemy)\nall_sprites.add(new_enemy)\n# Get the set of keys pressed and check for user input\npressed_keys = pygame.key.get_pressed()\nplayer.update(pressed_keys)\n# Update enemy position\nenemies.update()\n</code></pre> <p>Sempre que el gestor d'esdeveniments veu el nou esdeveniment ADDENEMY, crea un enemic i l'afegeix a enemies i a all_sprites. Com que Enemy est\u00e0 en all_sprites, es dibuixar\u00e0 a cada fotograma. Tamb\u00e9 heu de cridar a enemies.update(), que actualitza totes les posicions dels enemics.</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#deteccio-de-collisions","title":"Detecci\u00f3 de col\u00b7lisions","text":"<p>El disseny del joc demana que finalitze el joc sempre que un enemic xoque amb el jugador. La comprovaci\u00f3 de col\u00b7lisions \u00e9s una t\u00e8cnica b\u00e0sica de programaci\u00f3 de jocs i, en general, requereix alguns c\u00e0lculs matem\u00e0tics per determinar si dos sprites se superposaran.</p> <p>Aqu\u00ed \u00e9s on resulta \u00fatil un framework com Pygame. Escriure un codi de detecci\u00f3 de col\u00b7lisions \u00e9s tedi\u00f3s, per\u00f2 Pygame t\u00e9 MOLTS m\u00e8todes de detecci\u00f3 de col\u00b7lisions disponibles per utilitzar-los.</p> <p>Per a aquest tutorial, utilitzeu un m\u00e8tode anomenat .spritecollideany(), que detecta qualsevol col\u00b7lisi\u00f3 entre un sprite i els sprites d'un grup. Accepta un Sprite i un Grup com a par\u00e0metres. Comprova les superposicions entre tots els .rect del grup i el .rect de l'sprite. Si \u00e9s aix\u00ed, torna True, \u00e9s a dir si detecta col\u00b7lisi\u00f3. En cas contrari, torna False. Aix\u00f2 s'ajusta perfectament a aquest joc, ja que hem de comprovar si un sol jugador xoca amb un grup d'enemics.</p> <p>Vegem el codi:</p> Python<pre><code># Draw all sprites\nfor entity in all_sprites:\nscreen.blit(entity.surf, entity.rect)\n# Check if any enemies have collided with the player\nif pygame.sprite.spritecollideany(player, enemies):\n# If so, then remove the player and stop the loop\nplayer.kill()\nrunning = False\n</code></pre> <p>Es comprova si el jugador ha xocat amb algun enemic. Si \u00e9s aix\u00ed, es crida a player.kill() per eliminar-lo de tots els grups als quals pertany. Com que els \u00fanics objectes que es representen es troben en all_sprites, el jugador ja no es renderitzar\u00e0. Una vegada que el jugador haja perdur, tamb\u00e9 haurem d'eixir del joc, de manera que configureu running = False per ixir del bucle del joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#velocitat-del-joc","title":"Velocitat del joc","text":"<p>En provar el joc, potser vos haureu adonat que els enemics es mouen massa r\u00e0pid. Si no, tranquils, ja que el joc s'executar\u00e0 a diferents velocitats segons el hardware subjacent, el sistema operatiu, etc.</p> <p>La ra\u00f3 d'aix\u00f2 \u00e9s que el bucle del joc processa els fotogrames tan r\u00e0pidament com el processador i l'entorn ho permeten. Com que tots els sprites es mouen una vegada per fotograma, es poden moure centenars de vegades cada segon. El nombre de fotogrames que es manegen cada segon s\u2019anomena velocitat de fotogrames (frame rate), un terme molt utilitzat pels gamers. Aconseguir-ne un adequat \u00e9s la difer\u00e8ncia entre un joc jugable i un altre que no ho \u00e9s.</p> <p>Normalment, volem una freq\u00fc\u00e8ncia de fotogrames el m\u00e9s alta possible, per poder apreciar el major nombre de detalls, per\u00f2, per a aquest joc, cal reduir-lo un poc perqu\u00e8 el joc es puga jugar. Afortunadament, el m\u00f2dul de temps de Python cont\u00e9 un rellotge dissenyat exactament per a aquest prop\u00f2sit.</p> <p>L\u2019\u00fas del rellotge per establir una velocitat de fotogrames reprodu\u00efble requereix nom\u00e9s dues l\u00ednies de codi. El primer crea un rellotge nou abans que comence el bucle del joc. Despr\u00e9s utilitzem la funci\u00f3 .tick() per informar a pygame que el programa ha arribat al final del fotograma.</p> <p>Python<pre><code># Setup the clock for a decent framerate\nclock = pygame.time.Clock() \n...\n# Our main loop\nwhile running:\n...\n# Flip everything to the display\npygame.display.flip()\n# Ensure program maintains a rate of 30 frames per second\nclock.tick(30)\n</code></pre> L'argument passat a .tick() estableix la velocitat de fotogrames desitjada. Per fer-ho, es calcula el nombre de mil\u00b7lisegons que ha de tardar cada fotograma, en funci\u00f3 de la velocitat de fotogrames desitjada. A continuaci\u00f3, compara aquest nombre amb el nombre de mil\u00b7lisegons que han passat des de la darrera vegada que es va cridar .tick(). Si no ha passat prou temps, retarda el processament per assegurar-se que mai no supera la velocitat de fotogrames especificada.</p> <p>Si es passa una freq\u00fc\u00e8ncia de fotogrames m\u00e9s xicoteta, transcorrer\u00e0 m\u00e9s temps entre fotogrames, mentre que una freq\u00fc\u00e8ncia de fotogrames m\u00e9s gran proporcionar\u00e0 un joc m\u00e9s suau (i m\u00e9s r\u00e0pid).</p> <p>En aquest moment, tenim un joc totalment funcional i jugable.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/4%20-%20Imatges/","title":"Imatges dels Sprites","text":"<p>Molt b\u00e9, tens un joc, per\u00f2 siguem sincers ... L'aspecte no \u00e9s massa amigable. El jugador i els enemics s\u00f3n nom\u00e9s blocs blancs sobre fons negre. Va ser una revoluci\u00f3 quan va apar\u00e8ixer el Pong el 1972, per\u00f2 ha quedat antiquat. Anem a substituir aquests rectangles blancs per unes imatges que faran el joc m\u00e9s amigable.</p> <p>Anem a carregar una imatge d'un avi\u00f3 per al jugador i alguns m\u00edssils per als enemics, encara que podeu utilitzar altres per personalitzar el vostre joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/4%20-%20Imatges/#alteracio-dels-constructors-dobjectes","title":"Alteraci\u00f3 dels constructors d'objectes","text":"<p>Abans d\u2019utilitzar imatges per representar el jugador i els sprites enemics, hem de fer alguns canvis als seus constructors. El codi seg\u00fcent substitueix el codi utilitzat anteriorment.</p> Python<pre><code>class Player(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Player, self).__init__()\nself.surf = pygame.image.load(\"resources/jet.png\").convert()\nself.surf.set_colorkey((255, 255, 255), RLEACCEL)\nself.rect = self.surf.get_rect()\n</code></pre> <p>Amb pygame.image.load() carreguem una imatge del disc. Li passem com a argument el path a l'arxiu. Retorna una superf\u00edcie i la crida .convert() optimitza la superf\u00edcie, fent que les futures crides al m\u00e8tode .blit() siguen m\u00e9s r\u00e0pides.</p> <p>Amb .set_colorkey() indiquem quin color es far\u00e0 transparent. En aquest cas, triem el blanc, perqu\u00e8 \u00e9s el color de fons de la imatge. La constant RLEACCEL \u00e9s un par\u00e0metre opcional que ajuda a renderitzar pygame m\u00e9s r\u00e0pidament en pantalles no accelerades. Per poder utilitzar esta constant, necessitem importar-la a la declaraci\u00f3 d\u2019importaci\u00f3 de pygame.locals del principi del codi.</p> <p>No hem de canviar res m\u00e9s, la imatge continua sent una superf\u00edcie, tret que ara hi ha una imatge pintada. </p> <p>Farem el mateix al constructor d'enemic, esta vegada carregant la imatge resources/missile.png.</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/4%20-%20Imatges/#afegir-imatges-de-fons","title":"Afegir imatges de fons","text":"<p>Afegirem ara uns n\u00favols com a imatges de fons, utilitzant els mateixos passos que per a Player i Enemy:</p> <ol> <li>Creem la classe Cloud.</li> <li>Afegim la imatge d\u2019un n\u00favol.</li> <li>Creem un m\u00e8tode .update() que mou el n\u00favol cap a la part esquerra de la pantalla 5 p\u00edxels en cada fotograma.</li> <li>Creem un gestor i un esdeveniment personalitzats per crear objectes de n\u00favol nous a un interval de temps definit de 1000ms.</li> <li>Afegim els objectes de n\u00favols creats a un grup nou anomenat n\u00favols.</li> <li>Actualitzem i dibuixem els n\u00favols al bucle principal del joc.</li> </ol> <p>Tingueu en compte que cada n\u00favol i enemic nous s\u2019afegeixen a all_sprites, mentre que els n\u00favols ho fan al grup clouds i els enemics a enemies. Perqu\u00e8?</p> <ul> <li>El renderitzat (repintat) es fa amb all_sprites.</li> <li>Les actualitzacions de posici\u00f3 es fan a n\u00favols i enemics.</li> <li>La detecci\u00f3 de col\u00b7lisions es fa entre el jugador i enemics, per\u00f2 no amb n\u00favols, ja que un avi\u00f3 pot atrevessar n\u00favols sense problemes.</li> </ul> <p>Per \u00faltim canvieu el color de fons del negre a (135, 206, 250).</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/","title":"Efectes de so","text":"<p>Fins ara ens hem centrat en el joc i els aspectes visuals del mateix. Ara anem a veure com incorporar sons. pygame proporciona un mesclador per gestionar totes les activitats relacionades amb el so. Utilitzar\u00e0 les classes i m\u00e8todes d\u2019aquest m\u00f2dul per proporcionar m\u00fasica de fons i efectes de so per a diverses accions.</p> <p>El nom de mesclador fa refer\u00e8ncia al fet que el m\u00f2dul barreja diversos sons en un tot cohesionat. Mitjan\u00e7ant el subm\u00f2dul de m\u00fasica, podeu reproduir fitxers de so individuals en diversos formats. Tota la reproducci\u00f3 es produeix en segon pla, de manera que mentre es reprodueix un so, el m\u00e8tode s'executa en paral\u00b7lel i torna el control immediatament al punt on s'ha fet la crida.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#inicialitzacio","title":"Inicialitzaci\u00f3","text":"<p>L'\u00fas del mesclador comen\u00e7a amb la seua inicialitzaci\u00f3 pygame.mixer.init(). Si no volem canviar els valors per defecte, no cal passar-li arguments. S'ha d'inicialitzar el mesclador abans que el pygame.</p> Python<pre><code># Setup for sounds. Defaults are good.\npygame.mixer.init()\n# Initialize pygame\npygame.init()\n</code></pre>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#musica-de-fons","title":"M\u00fasica de fons","text":"<p>Una vegada inicialitzat el sistema, podeu configurar els vostres sons i m\u00fasica de fons com es mostra a continuaci\u00f3.</p> Python<pre><code># Load and play background music\npygame.mixer.music.load(\"Apoxode_-_Electric_1.ogg\")\npygame.mixer.music.play(loops=-1)\n# Load all sound files\n# Sound sources: Jon Fincher\nmove_up_sound = pygame.mixer.Sound(\"Rising_putter.ogg\")\nmove_down_sound = pygame.mixer.Sound(\"Falling_putter.ogg\")\ncollision_sound = pygame.mixer.Sound(\"Collision.ogg\")\n</code></pre> <p>Carreguen un clip de so de fons i comencen a reproduir-lo. Podeu dir al clip de so que es reproduisca en bucle i que no acabe mai establint el par\u00e0metre loop = -1.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#sons-desdeveniments","title":"Sons d'esdeveniments","text":"<p>Despr\u00e9s carreguen tres sons que farem servir per a diversos efectes de so. Els dos primers s\u00f3n sons ascendents i descendents, que es reprodueixen quan el jugador es mou cap amunt o cap avall. L\u2019\u00faltim \u00e9s el so que s\u2019utilitza sempre que hi ha una col\u00b7lisi\u00f3. Tamb\u00e9 podeu afegir altres sons, com ara un so per a la creaci\u00f3 d'un enemic o un so final per a la finalitzaci\u00f3 del joc.</p> <p>Llavors, com s\u2019utilitzen els efectes de so? Volem reproduir cada so quan es produeixi un esdeveniment determinat. Per exemple, quan l'avi\u00f3 es mou cap amunt, volem reproduir move_up_sound. Per tant, afegiu una crida a .play() sempre que gestioneu este l'esdeveniment.</p> <p>Per a una col\u00b7lisi\u00f3 entre el jugador i un enemic, reprodu\u00efu el so Collisions.ogg.</p> <p>Utilitzeu el m\u00e8tode stop() quan vulgau parar un so que encara s'est\u00e0 reproduint i no voleu que es mescle amb un nou.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#fi-del-joc","title":"Fi del joc","text":"<p>Finalment, quan acabe el joc, tots els sons haurien de parar-se. Per fer-ho, afegiu les l\u00ednies seg\u00fcents al final del programa despr\u00e9s del bucle:</p> Python<pre><code># All done! Stop and quit the mixer.\npygame.mixer.music.stop()\npygame.mixer.quit()\n</code></pre> <p>T\u00e8cnicament, aquestes \u00faltimes l\u00ednies no s\u00f3n necess\u00e0ries, ja que el programa finalitza i els recursos s'alliberen. No obstant aix\u00f2, si m\u00e9s endavant decidiu afegir una pantalla d'introducci\u00f3 o una pantalla d'eixida al vostre joc, \u00e9s possible que hi haja m\u00e9s codi executat-se despr\u00e9s que finalitze el joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/6%20-%20Conclusi%C3%B3/","title":"Conclusi\u00f3","text":"<p>Al llarg d\u2019aquesta pr\u00e0ctica, hem apr\u00e8s els fonaments de la programaci\u00f3 de jocs amb pygame. Concretament:</p> <ul> <li>Implementar bucles d'esdeveniments</li> <li>Dibuixar elements a la pantalla</li> <li>Reproduir efectes de so i m\u00fasica</li> <li>Gestionar l'entrada de l'usuari</li> </ul> <p>Per fer-ho, hem utilitzat un subconjunt dels m\u00f2duls Pygame, inclosos els m\u00f2duls de visualitzaci\u00f3, mesclador i m\u00fasica, hora, imatge i esdeveniment. Tamb\u00e9 hem utilitzat diverses classes, inclosos Rect, Surface, Sound i Sprite. Per\u00f2 aix\u00f2 nom\u00e9s \u00e9s una xicoteta part del que pot fer Pygame. Consulteu la documentaci\u00f3 oficial de Pygame per obtenir una llista completa de m\u00f2duls i classes disponibles.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/1%20-%20Obligatori/","title":"Part obligat\u00f2ria (30%)","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/1%20-%20Obligatori/#part-obligatoria-practica-30","title":"Part obligat\u00f2ria. Pr\u00e0ctica. (30%)","text":"<ol> <li>Seguix la pr\u00e0ctica pas a pas i construeix el codi del joc. Per fer-ho seguix el mateix ordre que es va explicant al llarg de la pr\u00e0ctica i ves provant els canvis que vas introduint.</li> </ol>"},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/2%20-%20Projecte/","title":"Part d'ampliaci\u00f3 - projecte (70%)","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/2%20-%20Projecte/#part-dampliacio-projecte-70","title":"Part d'ampliaci\u00f3. Projecte. (70%)","text":"<p>En esta segona part pots escollir entre dues opcions:</p> <ol> <li> <p>Primera opci\u00f3. Amplia la funcionalitat del joc dels avions:</p> <ol> <li>La primera ampliaci\u00f3 proposada \u00e9s un sistema de puntuacions que ser\u00e0 visible a la pantalla del joc. Cada vegada que s'esquive un m\u00edssil i aquest sobrepasse la part esquerra de la pantalla, es sumaran 10 punts al marcador.</li> <li>La segona ampliaci\u00f3 ser\u00e0 que el joc anir\u00e0 canviant cada 20 segons entre el dia i la nit, \u00e9s a dir, el fons canviar\u00e0 del blau del dia al negre de la nit autom\u00e0ticament.</li> <li>La tercera ampliaci\u00f3 ser\u00e0 un sistema de nivells. Cada vegada que el jugador supere un m\u00faltiple de 500 punts, el joc canviar\u00e0 a un nivell superior, comen\u00e7ant la partida en el nivell 1. A m\u00e9s, el nivell ser\u00e0 visible en la pantalla, al costat de la puntuaci\u00f3.</li> <li> <p>La quarta ampliaci\u00f3 ser\u00e0 que la dificultat del joc anir\u00e0 creixent amb els nivells. Al principi del joc, es crearan enemics cada 500ms i la seua velocitat ser\u00e0 un n\u00famero aleatori entre 1 i 10. En el segon nivell, la velocitat de creaci\u00f3 seran 450 ms i les velocitats aniran entre 3 i 12. La idea \u00e9s parametritzar els valors segons el nivell, per exemple, per a la velocitat de creaci\u00f3 podria ser:</p> \\[v_c =  100 + (450 - 50 * nivell)\\] \\[v_e = random(2 * nivell, 10 + 3 * nivell)\\] <p>On \\(v_c\\) \u00e9s la velocitat de creaci\u00f3 d'enemics On \\(v_e\\) \u00e9s la velocitat de despla\u00e7ament dels enemics</p> </li> <li> <p>Fes que la puntuaci\u00f3, en cas de ser un nou r\u00e8cord, es guarde en un document de text anomenat punt_max.txt en la mateixa carpeta on est\u00e0 el codi del joc. Per a saber si \u00e9s un nou r\u00e8cord, quan es carrega el joc, haur\u00e0 de llegir el document i extraure la puntuaci\u00f3 m\u00e0xima.</p> </li> <li>Afegeix una pantalla de benvinguda on es done la benvinguda al joc. A m\u00e9s, ha de mostrar el r\u00e8cord fins al moment i esperar fins que es polse la tecla p, moment en que es passar\u00e0 a la pantalla de joc.</li> <li>Fes una pantalla final on s'indique que la partida ha finalitzat, mostre la puntuaci\u00f3 i el nivell al que s'ha arribat, i en cas de ser r\u00e8cord, ho indique i felicite el jugador.</li> <li>Proposeu una funcionalitat extra al joc per fer-lo m\u00e9s interessant. Qualsevol funcionalitat que resulte interessant ser\u00e0 valorada positivament.</li> </ol> </li> <li> <p>Segona opci\u00f3. Proposa la creaci\u00f3 d'un joc del teu gust del tipus que hem desenvolupat en la pr\u00e0ctica. Pots pensar en jocs tipus el Pong, el Tetris, ... Si agafes aquesta opci\u00f3 conta-li-la al professor abans de comen\u00e7ar a desenvolupar perqu\u00e8 et done l'aprovaci\u00f3 de la idea, ja que pot implicar una dificultat massa elevada o massa baixa. El joc hauria d'incloure tots els tractaments que hem anat desenvolupant durant la pr\u00e0ctica.</p> </li> </ol>"},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/3%20-%20Qualificaci%C3%B3/","title":"Qualificaci\u00f3","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/3%20-%20Qualificaci%C3%B3/#qualificacio","title":"Qualificaci\u00f3","text":"<p>Per a qualificar aquesta primera unitat, es valorar\u00e0 un 30% la part de pr\u00e0ctica obligat\u00f2ria i un 70% la part del projecte o ampliaci\u00f3. </p> <p>Per a la part del projecte s'utilitzar\u00e0 una r\u00fabrica que es posar\u00e0 a disposici\u00f3 dels alumnes abans de comen\u00e7ar el desenvolupament. D'esta forma, l'alumne podr\u00e0 saber anticipadament, els aspectes que es tindran en compte a l'hora de corregir.</p> <p>(Sols per a alumnes del presencial) A m\u00e9s, es realitzar\u00e0 una coavaluaci\u00f3. Per a fer a\u00e7\u00f2, cada alumne exposar\u00e0 en un per\u00edode breu, al voltant de 5 minuts el seu projecte, i la resta d'alumnes l'avaluaran.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/","title":"Introducci\u00f3 a Python","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#comencant-amb-python","title":"Comen\u00e7ant amb Python","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#que-es-python","title":"Qu\u00e8 \u00e9s Python?","text":"<p>Python \u00e9s un llenguatge de prop\u00f2sit general, al igual que Java o C. El seu \u00fas ha augmentat durant els \u00faltims temps gr\u00e0cies a:</p> <ul> <li>La seua flexibilitat i simplicitat, que el fan f\u00e0cil d'aprendre</li> <li>El seu \u00fas extens en camps com el \"Data Science\", la IA i l'aprenentatge de programaci\u00f3.</li> <li>Llenguatge d'scripting d'alt nivell.</li> <li>Multiplataforma.</li> <li>Gran quantitat i varietat de llibreries. Web frameworks, clients correu, gestors de contingut, concurr\u00e8ncia, generaci\u00f3 de documents, gr\u00e0fics, intel\u00b7lig\u00e8ncia artificial, ...</li> <li>Lliure!! Mant\u00e9s per la  Python Software Foundation</li> </ul>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#execucio-de-python","title":"Execuci\u00f3 de Python","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#perque-python","title":"Perqu\u00e8 Python","text":"<p>El llenguatge de programaci\u00f3 Python \u00e9s una opci\u00f3 cada vegada m\u00e9s utilitzada per principiants com per desenvolupadors experimentats. Flexible i vers\u00e0til, Python t\u00e9 punts forts en scripts, automatitzaci\u00f3, an\u00e0lisi de dades, aprenentatge autom\u00e0tic i desenvolupament de back-end. Publicat per primera vegada el 1991 amb un nom inspirat en el grup de com\u00e8dia brit\u00e0nic Monty Python, l\u2019equip de desenvolupament volia fer de Python un llenguatge divertit d\u2019utilitzar.</p> <p>C \u00e9s el llenguatge de programaci\u00f3 m\u00e9s popular a l\u2019\u00edndex TIOBE, mentre que Python \u00e9s el llenguatge m\u00e9s buscat a l\u2019\u00edndex PYPL. Python i Java segueixen de prop a C al TIOBE. A PYPL, la difer\u00e8ncia \u00e9s m\u00e9s gran, ja que Python, que ocupa el primer lloc, supera en un 12% a Java, que ocupa el segon lloc.</p> <p>Aquest curs, aprendrem a utilitzar Python i el framework Qt per desenvolupar aplicacions amb interf\u00edcie d'usuari.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#installacio-de-python-3","title":"Instal\u00b7laci\u00f3 de Python 3","text":"<p>Anem a instal\u00b7lar a l'Ubuntu 20.04 un entorn de programaci\u00f3 Python 3, encara que valdr\u00e0 per a qualsevol distribuci\u00f3 basada en Debian Linux, com \u00e9s el cas. En cas d'utilitzar Windows o MacOS, busqueu la forma d'instal\u00b7lar-lo.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#requisits-previs","title":"Requisits previs","text":"<p>Per poder instal\u00b7lar, haureu de tindre un usuari amb privilegis sudo en l'Ubuntu 20.04.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#primer-pas-configurant-python-3","title":"Primer pas - Configurant Python 3","text":"<p>Ubuntu 20.04 ja inclou Python 3 preinstal\u00b7lat. Per assegurar-nos que les nostres versions estan actualitzades, actualitzem els repositoris i actualitzem el sistema amb l'ordre apt:</p> Bash<pre><code>$ sudo apt update\n$ sudo apt -y upgrade\n</code></pre> <p>L'opci\u00f3 -y confirmar\u00e0 que estem d'acord per instal\u00b7lar totes les actualitzacions, per\u00f2, segons la vostra versi\u00f3 de Linux, \u00e9s possible que h\u00e0giu de confirmar les sol\u00b7licituds addicionals.</p> <p>Una vegada finalitzat el proc\u00e9s, podem comprovar la versi\u00f3 de Python 3 que s\u2019instal\u00b7la al sistema escrivint:</p> Bash<pre><code>$ python3 -V\nPython 3.8.10\n</code></pre> <p>El terminal vos indicar\u00e0 el n\u00famero de versi\u00f3. No es tracta de l'\u00faltima versi\u00f3 estable de Python (3.9.7), per\u00f2 si de la \u00faltima disponibles als repositoris d'Ubuntu.</p> <p>Per gestionar paquets de programari per a Python, instal\u00b7leu pip, una eina que instal\u00b7lar\u00e0 i gestionar\u00e0 paquets de programaci\u00f3 que \u00e9s possible que vulguem utilitzar en els nostres projectes de desenvolupament.</p> Bash<pre><code>$ sudo apt install -y python3-pip\n</code></pre> <p>Ara podrem utilitzar pip3 per instal\u00b7lar paquets de Python3.</p> Bash<pre><code>$ pip3 install \"paquet\"\n</code></pre> <p>A m\u00e9s, instl\u00b7larem algunes llibreries necess\u00e0ries per a la construcci\u00f3 dels nostres m\u00f2duls i extensions.</p> Bash<pre><code>$ sudo apt install -y build-essential libssl-dev libffi-dev python3-dev\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#segon-pas-configurem-un-entorn-virtual-de-desenvolupament","title":"Segon pas - Configurem un entorn virtual de desenvolupament","text":"<p>Els entorns virtuals ens permeten tenir un espai a\u00efllat per a desenvolupament de projectes Python, cosa que garanteix que cadascun dels vostres projectes puga tindre el seu propi conjunt de depend\u00e8ncies que no interrompin cap dels vostres altres projectes.</p> <p>Configurar un entorn de programaci\u00f3 proporciona un major control sobre els projectes de Python i sobre com es gestionen les diferents versions dels paquets. Aix\u00f2 \u00e9s especialment important quan es treballa amb paquets de tercers.</p> <p>Podeu configurar tants entorns de programaci\u00f3 Python com vulgueu. Cada entorn \u00e9s b\u00e0sicament un directori que cont\u00e9 uns quants scripts per fer-lo actuar com a entorn a\u00efllat de la resta de programes i llibreries de l'ordinador.</p> <p>Tot i que hi ha algunes maneres d\u2019aconseguir un entorn de programaci\u00f3 a Python, farem servir el m\u00f2dul venv, que forma part de la biblioteca est\u00e0ndard de Python 3. Instal\u00b7lem venv escrivint:</p> Bash<pre><code>$ sudo apt install -y python3-venv\n</code></pre> <p>Amb a\u00e7\u00f2, estem preparats per crear entorns virtuals (virtual environments). Trieu en quin directori volem situar els nostres entorns de programaci\u00f3 Python o b\u00e9 creeu un directori nou amb mkdir:</p> <p>Bash<pre><code>$ mkdir environments\n$ cd environments\n</code></pre> Una vegada esteu al directori on voleu que es creen els entorns, podeu crear un entorn executant l'ordre seg\u00fcent:</p> Bash<pre><code>$ python3 -m venv my_env\n</code></pre> <p>Essencialment, pyvenv crea un nou directori que cont\u00e9 alguns elements:</p> Bash<pre><code>bin include lib lib64 pyvenv.cfg share\n</code></pre> <p>Junts, aquests fitxers funcionen per assegurar-vos que els vostres projectes estiguen a\u00efllats, de manera que els fitxers del sistema i els fitxers de projecte no es mesclen i entren en conflicte. Aquesta \u00e9s una bona pr\u00e0ctica per al control de versions i per garantir que cadascun dels vostres projectes tinga acc\u00e9s als paquets particulars que necessita.</p> <p>Per utilitzar aquest entorn, l'heu d'activar, cosa que podeu aconseguir escrivint l'ordre seg\u00fcent que crida a l'script d'activaci\u00f3:</p> Bash<pre><code>$ source my_env/bin/activate </code></pre> <p>El vostre indicador d\u2019ordres ara tindr\u00e0 el prefix amb el nom del vostre entorn, en aquest cas s\u2019anomena my_env. Depenent de la versi\u00f3 de Debian Linux que utilitzeu, el vostre prefix pot apar\u00e8ixer de manera diferent, per\u00f2 el nom del vostre entorn entre par\u00e8ntesis hauria de ser el primer que veieu a la vostra l\u00ednia:</p> <p>Aquest prefix ens permet saber que l\u2019entorn my_env est\u00e0 actiu actualment, \u00e9s a dir, que quan creem programes aqu\u00ed, nom\u00e9s utilitzaran la configuraci\u00f3 i els paquets d\u2019aquest entorn concret.</p> <p>Nota: a l\u2019entorn virtual, podeu utilitzar l\u2019ordre python en lloc de python3 i pip en lloc de pip3 si ho preferiu. Si utilitzeu Python 3 a la vostra m\u00e0quina fora d\u2019un entorn, haureu d\u2019utilitzar exclusivament les ordres python3 i pip3.</p> <p>Despr\u00e9s de seguir aquests passos, el vostre entorn virtual ja es pot utilitzar.</p> <p>Per a desactivar l'entorn virtual, simplement tanquem la consola o utilitzem l'ordre deactivate. Deapareixer\u00e0 el nom de l'entorn virtual abans del prompt.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#modes-dexecucio","title":"Modes d'execuci\u00f3","text":"<ol> <li>Interactiva a trav\u00e9s de l'int\u00e8rpret</li> </ol> Bash<pre><code>~$ python3\nPython 3.7.3 (default, Jul 25 2020, 13:03:44) [GCC 8.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; </code></pre> <ol> <li>Execuci\u00f3 d'un fitxer Python</li> </ol> Bash<pre><code>~$ python3 hola_mon.py\nHola m\u00f3n\n</code></pre> <ol> <li>Execuci\u00f3 d'un script</li> </ol> Bash<pre><code>hola_mon.py\n---\n#!/usr/bin/env python3\nprint(\"Hola m\u00f3n\")\n---\n\n~$ chmod u+x hola_mon.py\n~$ ./hola_mon.py\nHola m\u00f3n\n</code></pre> <ol> <li>Des d'un Entorn de Desenvolupament IDE</li> </ol>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#activitat-1","title":"Activitat 1","text":"<p>Implementa el \"Hola m\u00f3n!\" i executa-lo de les quatre formes possibles.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#paraules-reservades-i-identificadors","title":"Paraules reservades i identificadors","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#paraules-reservades","title":"Paraules reservades","text":"<p>No es poden utilitzar coma identificador de variables ni nom de funcions, ja que s'utilitzen per a definir la sintaxi i l'estructura d'un programa. Les paraules reservades s\u00f3n:</p> False await else import pass None break except in raise True class finally is return and continue for lambda try as def from nonlocal while assert del global not with async elif if or yield <p>Per a obtindre la llista completa des de l'int\u00e8rpret:</p> Python<pre><code>&gt;&gt;&gt; import keyword\n&gt;&gt;&gt; print(keyword.kwlist)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#identificadors","title":"Identificadors","text":"<p>Per convenci\u00f3, els noms de les variables i funcions han de ser:</p> <ul> <li>combinacions de lletres min\u00fascules i n\u00fameros</li> <li>comen\u00e7ar per lletra</li> <li>descriptius (excepte en bucles o se sol utilitzar i i j)</li> <li>amb paraules separades per gui\u00f3 baix</li> </ul> <p>Per exemple: nom_usuari, numero_telefon, cognom1, sumar(), ...</p> <p>Recorda que Python \u00e9s un llenguatge case sensitive. Per tant Var i var no s\u00f3n el mateix identificador.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#instruccions-i-sagnat","title":"Instruccions i sagnat","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#instruccions","title":"Instruccions","text":"<p>L'int\u00e8rpret de Python va executant l\u00ednia a l\u00ednia cada instrucci\u00f3. Si volem que una instrucci\u00f3 ocupe diverses l\u00ednies ho hem d'indicar amb el car\u00e0cter \\.</p> <p>Per exemple:</p> Python<pre><code>&gt;&gt;&gt; a = 1 + 2 + 3 + \\\n...     4 + 5 + 6 + \\\n...     7 + 8 + 9\n&gt;&gt;&gt; print(a)\n45\n</code></pre> <p>La continuaci\u00f3 de l\u00ednia \u00e9s implicita dins de par\u00e8ntesis (), corxets [] i claus {}.</p> Python<pre><code>colors = ['red',\n'blue',\n'green']\n</code></pre> <p>Tamb\u00e9 podem posar diverses sent\u00e8ncies en una l\u00ednia:</p> Python<pre><code>a = 1; b = 2; c = 3\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#sagnat","title":"Sagnat","text":"<p>La majoria de llenguatges de programaci\u00f3 utilitzen les claus {} per a definir blocs de codi. En canvi, Python utilitza el sagnat (identation).</p> <p>Un bloc de codi (cos d'una funci\u00f3, bucle, etc.) comen\u00e7a amb sagnat i acaba amb la primera l\u00ednia sense sagnat. Dep\u00e8n de vosaltres la quantitat de sagnat, per\u00f2 ha de ser coherent en tot el bloc. Generalment, s\u2019utilitzen quatre espais en blanc per a sagnat i es prefereixen a les tabulacions. El resultat \u00e9s un codi net i clar. Exemple:</p> Python<pre><code>for i in range(1,11):\nprint(i)\nif i == 5:\nbreak\n</code></pre> <p>Un sagnat incorrecte llan\u00e7a un IndentationError.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#comentaris","title":"Comentaris","text":"<p>Els comentaris s\u00f3n molt importants en escriure un programa. Descriuen el que passa dins d\u2019un programa, de manera que una persona que mira el codi font no tinga dificultats per entendre'l. A m\u00e9s, \u00e9s possible que oblideu els detalls clau d'implementaci\u00f3 del programa que acabeu d\u2019escriure. Per tant, invertir temps per explicar aquests conceptes en forma de comentaris sempre \u00e9s fruct\u00edfer.</p> <p>A Python, fem servir el s\u00edmbol coixinet (#) per comen\u00e7ar a escriure un comentari.  S'est\u00e9n fins al car\u00e0cter de l\u00ednia nova. No cal que el comentari estiga a principi de l\u00ednia, pot estar en mig.</p> <p>Per fer comentaris multil\u00ednia, podem utilitzar el coixinet a principi de cada l\u00ednia. Tamb\u00e9 podem fer servir les cometes dobles o simples tres vegades.</p> <p>Exemple:</p> Python<pre><code>''' Comentari\nmultil\u00ednia'''\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#docstrings","title":"Docstrings","text":"<p>Una docstring \u00e9s una abreviatura de text de documentaci\u00f3.</p> <p>La documentaci\u00f3 de Python s\u00f3n els textos que apareixen just despr\u00e9s de la definici\u00f3 d'una funci\u00f3, m\u00e8tode, classe o m\u00f2dul.</p> <p>S'utilitzen cometes triples durant l'escriptura de la documentaci\u00f3. </p> <p>Per exemple:</p> Python<pre><code>def doble (num):\n\"\"\"Funci\u00f3 per duplicar el valor\"\"\"\nreturn 2 * num\n</code></pre> <p>La documentaci\u00f3 s\u2019associa a l\u2019objecte com a atribut doc.</p> <p>Per tant, podem accedir a la documentaci\u00f3 de la funci\u00f3 anterior amb les seg\u00fcents l\u00ednies de codi:</p> Python<pre><code>def doble (num):\n\"\"\"Funci\u00f3 per duplicar el valor\"\"\"\nreturn 2 * num\nprint(doble.__ doc__)\n</code></pre> Python<pre><code>def suma_binaria(a, b):\n'''\n    Torna la suma de dos enters en binari.\n            Par\u00e0metres:\n                    a (int): Un enter\n                    b (int): Altre enter\n            Torna:\n                    suma_binaria (str): String amb els digits binaris de la suma\n    '''\nsuma_binaria = bin(a+b)[2:]\nreturn suma_binaria\nprint(suma_binaria.__doc__)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#variables-constants-i-tipus","title":"Variables, constants i tipus","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#variables","title":"Variables","text":"<p>En Python, quan declarem una variable i li assignem un valor, realment estem creant un objecte i assignant un valor per refer\u00e8ncia.</p> Python<pre><code>&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; type(num)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; num = 10.0\n&gt;&gt;&gt; type(num)\n&lt;class 'float'&gt;\n</code></pre> <p>Podem inicialitzar m\u00faltiples variables en una mateixa l\u00ednia, ja siga amb el mateix valor o diferent.</p> Python<pre><code>a, b, c = 5, 3.2, \"Hola\"\nx = y = z = \"iguals\"\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#constants","title":"Constants","text":"<p>A Python no existeixen les constants a l'estil de static final de Java, sin\u00f3 que simplement es defineix una variable que no es modifica el valor. Normalment es definixen en un m\u00f2dul a banda, utilitzant maj\u00fascules i gui\u00f3 baix si \u00e9s necessari, que s'importa a l'arxiu principal.</p> Python<pre><code>constants.py\n---\nPI = 3.14\nmain.py\n---\nimport constants.py\nradi = 5\nperimetre = 2 * constants.PI * radi\nprint(perimetre)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#tipus","title":"Tipus","text":"<p>L'assignaci\u00f3 de tipus \u00e9s din\u00e0mica i pot canviar, per aix\u00f2 no declarem els tipus de les variables. Per determinar el tipus d'un objecte, fem servir el m\u00e8tode type(). Els tipus d'objecte definits a Python3 s\u00f3n: 1. Num\u00e8rics: </p> <p>1.1. Integer</p> Python<pre><code>    a = 0b1010 #Binary\nb = 100 #Decimal \nc = 0o310 #Octal\nd = 0x12c #Hexadecimal\n</code></pre> <p>1.2. Float</p> Python<pre><code>    float_1 = 10.5 \nfloat_2 = 1.5e2\n</code></pre> <p>1.3. Complex</p> Python<pre><code>    x = 3 + 4j\n</code></pre> <ol> <li>Strings</li> </ol> Python<pre><code>    nom = 'Ferran Cunyat'\n</code></pre> <p>Els principals m\u00e8todes sobre un string s\u00f3n capitalize(), count(), find(), format(), lower(), replace(), split(), title(), translate(), upper().</p> <ol> <li>Boolean</li> </ol> Python<pre><code>    x = (1 == True) # True pren el valor num\u00e8ric 1, mentre que False el 0\ny = (1 == False)\na = True + 4\nb = False + 10\n</code></pre> <ol> <li>Especials (None)</li> </ol> <p>S'utilitza per no donar-li valor a una variable.</p> Python<pre><code>&gt;&gt;&gt; x = None\n&gt;&gt;&gt; type(x)\n&lt;class 'NoneType'&gt;\n</code></pre> <ol> <li> <p>Col\u00b7leccions</p> </li> <li> <p>Llista</p> <p>S\u00f3n una seq\u00fc\u00e8ncia d'elements, no necess\u00e0riament del mateix tipus, encara que normalment si que ho s\u00f3n. Es definix amb corxets i els elements separats per comes. Podem accedir a un element o un rang i \u00e9s mutable.</p> Python<pre><code>    &gt;&gt;&gt; a = [5,10,15,20,25,30,45,40]\n&gt;&gt;&gt; print(a)\n[5, 10, 15, 20, 25, 30, 45, 40]\n&gt;&gt;&gt; a[3] = \"Ferran\"\n&gt;&gt;&gt; print(a[:4])\n[5, 10, 15, 'Ferran']\n</code></pre> <p>Algunes de les principals funcions que podem aplicar sobre llistes s\u00f3n apend(), clear(), copy(), extend(), insert(), remove(), reverse().</p> </li> <li> <p>Tupla</p> <p>S\u00f3n una seq\u00fc\u00e8ncia d'elements, no necess\u00e0riament del mateix tipus, per\u00f2 esta vegada immutable.</p> Python<pre><code>    &gt;&gt;&gt; tupla = (2,'hola')\n&gt;&gt;&gt; tupla[1] = 'clavel'\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n</code></pre> <ol> <li>Rang</li> </ol> <p>Seq\u00fc\u00e8ncia immutable de n\u00fameros, generalment utilitzada per a iterar sobre for o generar llistes r\u00e0pidament.</p> Python<pre><code>    &gt;&gt;&gt; list(range(0, 30, 5))\n[0, 5, 10, 15, 20, 25]\n</code></pre> <p>3</p> <p>. Conjunt (Set)</p> <p>Col\u00b7lecci\u00f3 desordenada d'elements \u00fanics. Ja que \u00e9s una llista desordenada, no la podem indexar i per tant accedir als elements segons la seua posici\u00f3.</p> Python<pre><code>&gt;&gt;&gt; a = {2,2,5,5,4,10,1,0}\n&gt;&gt;&gt; print(a)\n{0, 1, 2, 4, 5, 10}\n&gt;&gt;&gt; a[1]\nTraceback (most recent call last):\nFile \"&lt;string&gt;\", line 301, in runcode\nFile \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: 'set' object does not support indexing\n</code></pre> <ol> <li>Diccionari</li> </ol> <p>Diccionari \u00e9s una col\u00b7lecci\u00f3 no ordenada de parells valor-clau.</p> <p>Generalment s\u2019utilitza quan tenim una gran quantitat de dades. Els diccionaris estan optimitzats per recuperar dades. Hem de con\u00e8ixer la clau per recuperar el valor.</p> <p>A Python, els diccionaris es defineixen entre claus {} i cada element \u00e9s un parell que adopta la forma de clau:valor. La clau i el valor poden ser de qualsevol tipus.</p> Python<pre><code>    &gt;&gt;&gt; d = {1:'valor','clau':2}\n&gt;&gt;&gt; print(type(d))\n&lt;class 'dict'&gt;\n&gt;&gt;&gt; print(\"d[1] = \", d[1]);\nd[1] =  valor\n&gt;&gt;&gt; print(\"d['clau'] = \", d['clau']);\nd['clau'] =  2\n&gt;&gt;&gt; print(\"d[2] = \", d[2]);\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nKeyError: 2\n</code></pre> </li> </ol>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#activitat-2","title":"Activitat 2","text":"<p>Fixa't en el seg\u00fcent fragment de codi:</p> <p>Python<pre><code>&gt;&gt;&gt; s = [1,2]\n&gt;&gt;&gt; r = s[:]\n&gt;&gt;&gt; s[0]=2\n&gt;&gt;&gt; print(s)\n[2, 2]\n&gt;&gt;&gt; print(r)\n???\n&gt;&gt;&gt; print(s)\n???\n</code></pre> Quina ser\u00e0 l'eixida? Per qu\u00e9?</p> <p>Python<pre><code>&gt;&gt;&gt; r = s\n&gt;&gt;&gt; s[0]= 5\n&gt;&gt;&gt; print(r)\n???\n&gt;&gt;&gt; print(s)\n???\n</code></pre> I ara? Per qu\u00e9?</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#conversio-entre-tipus","title":"Conversi\u00f3 entre tipus","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#conversio-implicita","title":"Conversi\u00f3 impl\u00edcita","text":"<p>S\u00f3n conversions que fa el mateix llenguatge autom\u00e0ticament. Per exemple:</p> Python<pre><code>num_int = 123\nnum_flo = 1.23\nnum_nou = num_int + num_flo\nprint(\"num_int \u00e9s de tipus:\",type(num_int))\nprint(\"num_flo \u00e9s de tipus:\",type(num_flo))\nprint(\"Valor de num_nou:\",num_nou)\nprint(\"num_nou \u00e9s de tipus:\",type(num_nou))\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#conversio-explicita","title":"Conversi\u00f3 expl\u00edcita","text":"<p>Utilitzem funcions predefinides per a for\u00e7ar la conversi\u00f3 int(), float(), str(), ....</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#activitat-3","title":"Activitat 3","text":"<p>Quin \u00e9s el resultat d'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>&gt;&gt;&gt; enter = 123\n&gt;&gt;&gt; cadena = \"456\"\n&gt;&gt;&gt; suma = enter + cadena\n</code></pre> <p>Definix dues variables, una per a fer la suma entera (579) i l'altra per a concatrenar com a text (123456).</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#entrada-eixida-i-import","title":"Entrada, eixida i import","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#entrada","title":"Entrada","text":"<p>Ja hem vist que per a introduir informaci\u00f3 per teclat utilitzem la funci\u00f3 input([prompt]). </p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#eixida","title":"Eixida","text":"<p>Per a imprimir per ella utilitzarem la funci\u00f3 print().  Moltes vegades s'utilitza en combinaci\u00f3 amb la funci\u00f3 format() dels strings.</p> Python<pre><code>&gt;&gt;&gt; x = 5; y = 10\n&gt;&gt;&gt; print('El valor d\\'x \u00e9s {} i el de y \u00e9s {}'.format(x,y))\n&gt;&gt;&gt; # Fixeu-se que hem escapat el caracter '\nEl valor d'x \u00e9s 5 i el de y \u00e9s 10\n&gt;&gt;&gt; print('Hola {nom}, {salutacio}'.format(salutacio = 'Bon dia', nom = 'Pau'))\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#activitat-4","title":"Activitat 4","text":"<p>Implementa el programa \"Hola m\u00f3n\" utilitzant la funci\u00f3 format.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#import","title":"Import","text":"<p>Quan volem fer \u00fas del codi d'un altre m\u00f2dul (.py), l'hem d'importar al programa actual amb import.</p> Python<pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; print(math.pi)\n</code></pre> <p>Tamb\u00e9 podem importar sols alguna de les funcions o atributs amb from</p> Python<pre><code>&gt;&gt;&gt; from math import pi\n</code></pre> <p>En importar un m\u00f2dul, Python analitza diversos llocs definits a sys.path. \u00c9s una llista de les ubicacions on buscar el m\u00f2dul.</p> Python<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.path\n['', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/home/ferran/.local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/dist-packages', '/usr/lib/python3/dist-packages']\n</code></pre> <p>Per a importar d'una altra carpeta, ho fem amb from paquet import modul. Pots posar ubicacions absolutes o relatives. Si volem importar un codi d'una ubicaci\u00f3 que no est\u00e0 al path.</p> Python<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.path.append('/path/a/la/carpeta')\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#espai-de-noms-i-ambit-de-variables","title":"Espai de noms i \u00e0mbit de variables","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#noms","title":"Noms","text":"<p>En Python, tot s\u00f3n objectes, incl\u00fas les funcions. Un nom \u00e9s la forma d'accedir als objectes, i amb la funci\u00f3 id() podem veure la seua ubicaci\u00f3 en mem\u00f2ria. Per exemple:</p> Python<pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt;print('id(2) =', id(2))\nid(2) = 9062656\n&gt;&gt;&gt;print('id(a) =', id(a))\nd(a) = 9062656\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#activitat-5","title":"Activitat 5","text":"<p>Quin creus que ser\u00e0 el resultat a l'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; print('id(a) =', id(a))\n&gt;&gt;&gt; a = a+1\n&gt;&gt;&gt; print('id(a) =', id(a))\n&gt;&gt;&gt; print('id(3) =', id(3))\n&gt;&gt;&gt; b = 2\n&gt;&gt;&gt; print('id(b) =', id(b))\n&gt;&gt;&gt; print('id(2) =', id(2))\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#espais-de-noms-namespaces","title":"Espais de noms (namespaces)","text":"<p>Els espais de noms a Python, s\u00f3n una col\u00b7lecci\u00f3 de noms. </p> <p>Diferents espais de noms poden coexistir, per\u00f2 estan completament a\u00efllats.</p> <p>Quan iniciem Python, es crea un espai de noms amb totes les funcions que l'int\u00e8rpret reconeix, espai de noms predefinit. Aquesta \u00e9s la ra\u00f3 per la qual funcions integrades com id (), print () etc. sempre estan disponibles per a nosaltres des de qualsevol part del programa.</p> <p>En canvi, cada m\u00f2dul crea el seu propi espai de noms global. Aquests espais de noms estan a\u00efllats entre ells. Per tant, podem donar el mateix nom a objectes de m\u00f2duls diferents sense que entren en conflicte.</p> <p>Els m\u00f2duls poden contindre funcions i classes. Quan es crida una funci\u00f3, es crea un espai de noms local que t\u00e9 noms propis definits. Similar, \u00e9s el cas de la classe. El seg\u00fcent diagrama pot ajudar a aclarir aquest concepte.</p> <p></p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#ambit-de-les-variables","title":"\u00c0mbit de les variables","text":"<p>Tot i que hi ha diversos espais de noms definits, \u00e9s possible que no puguem accedir a tots ells des de totes les parts del programa. El concepte d\u2019\u00e0mbit entra en joc.</p> <p>Sempre hi ha almenys tres \u00e0mbits definits.</p> <ol> <li>\u00c0mbit local a la funci\u00f3 amb nom locals</li> <li>\u00c0mbit del m\u00f2dul que t\u00e9 noms globals</li> <li>\u00c0mbit m\u00e9s extern que t\u00e9 noms predefinits</li> </ol> <p>Quan es fa una refer\u00e8ncia dins d'una funci\u00f3, el nom es busca a l'espai de noms local, despr\u00e9s a l'espai de noms global i finalment a l'espai de noms predefinit.</p> <p>Si hi ha una funci\u00f3 dins d\u2019una altra funci\u00f3, s\u2019anida un nou \u00e0mbit dins de l'\u00e0mbit local.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#activitat-6","title":"Activitat 6","text":"<p>Quin ser\u00e0 el resultat mostrat per consola a l'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>def funcio_externa():\na = 20\ndef funcio_interna():\na = 30\nprint('a =', a)\nfuncio_interna()\nprint('a =', a)\na = 10\nfuncio_externa()\nprint('a =', a)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#activitat-7","title":"Activitat 7","text":"<p>Quin ser\u00e0 el resultat mostrat per consola a l'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>def funcio_externa():\nglobal a\na = 20\ndef funcio_interna():\nglobal a\na = 30\nprint('a =', a)\nfuncio_interna()\nprint('a =', a)\na = 10\nfuncio_externa()\nprint('a =', a)\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/","title":"Control de fluxe","text":""},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#if-else","title":"If ... else","text":"Python<pre><code>num = int(input(\"N\u00famero: \"))\nif num &gt; 0:\nprint(\"Positiu\")\nelif num == 0:\nprint(\"Zero\")\nelse:\nprint(\"Negatiu\")\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#for","title":"For","text":"<p>No existeix un for a l'estil de C o Java. Am\u00e9s podem afegir un else al final de bucle.</p> Python<pre><code>nums = [6, 5, 3, 8, 4, 2, 5, 4, 11]\nsuma = 0\nfor val in nums:\nsuma = suma + val\nelse:\nprint(\"Hem acabat de sumar\")\nprint(\"La suma \u00e9s\", suma)\n</code></pre> <p>Podem combinar el bucle for amb la funci\u00f3 range(principi, fi, pas). </p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#activitat-8","title":"Activitat 8","text":"<p>Fes una aplicaci\u00f3 que imprimisca els n\u00fameros imparells entre l'1 i el 100.</p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#activitat-9","title":"Activitat 9","text":"<p>Fes una aplicaci\u00f3 que donada la seg\u00fcent llista, imprimisca els seus membres: aficions = ['esports', 'cine', 'teatre']</p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#while","title":"While","text":"Python<pre><code>contador = 0\nwhile contador &lt; 3:\nprint(\"Dins del while\")\ncontador = contador + 1\nelse:\nprint(\"Fora del bucle\")\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#break-i-continue","title":"Break i continue","text":"<p>S'utilitzen igual que a Java. El continue passa a la seg\u00fcent iteraci\u00f3, mentre que el break ix del bucle. En cas de bucles anidats, ix del bucle intern.</p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#switch-case","title":"Switch - Case","text":"<p>Fins a la versi\u00f3 3.10, python no implementava el switch-case d'altres llenguatges i s'havia d'utilitzar un bloc d'if-elseif:</p> Python<pre><code>edat = 120\nif age &gt; 90:\nprint(\"Esta festa \u00e9s sols per a joves.\")\nelif age &lt; 0:\nprint(\"Encara no has nascut!!\")\nelif age &gt;= 18:\nprint(\"Endavant!!\")\nelse: \n\"Ers massa jove per entrar a esta festa\"\n# Output: Esta festa \u00e9s sols per a joves.\n</code></pre> <p>O definir una funci\u00f3 que executara aquesta funcionalitat:</p> Python<pre><code>def switch(lang):\nif lang == \"JavaScript\":\nreturn \"Ser\u00e0s programador web.\"\nelif lang == \"PHP\":\nreturn \"Ser\u00e0s programador de backend.\"\nelif lang == \"Python\":\nreturn \"Ser\u00e0s cient\u00edfic de dades.\"\nelif lang == \"Solidity\":\nreturn \"Ser\u00e0s desenvolupador de Blockchain.\"\nelif lang == \"Dart\":\nreturn \"Ser\u00e0s desenvolupador d'aplicacions m\u00f2bils.\"\nprint(switch(\"JavaScript\"))   \nprint(switch(\"Python\"))   \nprint(switch(\"Dart\"))  \n\"\"\"\nEixida: \nSer\u00e0s programador web.\nSer\u00e0s cient\u00edfic de dades.\nSer\u00e0s desenvolupador d'aplicacions m\u00f2bils\n\"\"\"\n</code></pre> <p>A partir de la versi\u00f3 3.10, Python disposa de les paraules reservades match-case:</p> Python<pre><code>match terme:\ncase patr\u00f3-1:\nacci\u00f3-1\ncase patr\u00f3-2:\nacci\u00f3-2\ncase patr\u00f3-3:\nacci\u00f3-3\ncase _:\nacci\u00f3-per-defecte\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#exemple","title":"Exemple","text":"Python<pre><code>lang = input(\"Quin llenguatge de programaci\u00f3 vols aprendre? \")\nmatch lang:\ncase \"JavaScript\":\nprint(\"Ser\u00e0s programador web.\")\ncase \"Python\":\nprint(\"Ser\u00e0s cient\u00edfic de dades.\")\ncase \"PHP\":\nprint(\"Ser\u00e0s programador de backend.\")\ncase \"Solidity\":\nprint(\"Ser\u00e0s desenvolupador de Blockchain.\")\ncase \"Dart\":\nprint(\"er\u00e0s desenvolupador d'aplicacions m\u00f2bils.\")\ncase _:\nprint(\"L'idioma no importa, el que importa \u00e9s resoldre problemes.\")\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/","title":"Funcions","text":""},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#definicio-de-funcions","title":"Definici\u00f3 de funcions","text":"Python<pre><code>def nom_funcio(par\u00e0metres):\n\"\"\"docstring\"\"\"\ninstruccions(s)\n</code></pre> <p>Nota: Recordeu l\u00e0mbit de les variables, ja que hi haur\u00e0 variables locals a la funci\u00f3.</p>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#arguments","title":"Arguments","text":""},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#valors-per-defecte","title":"Valors per defecte","text":"<p>Els arguments de les funcions poden tindre un valor per defecte. En cas de no assignar-li un valor per defecte, necessitem fer la crida passant-li el valor de l'argument. </p> Python<pre><code>def saluda(nom=\"desconegut\", msg=\"Benvingut!\"):\n\"\"\"\n    Funci\u00f3 per saludar a un usuari\n    Entrada:\n        nom=\"desconegut\": String, nom de l'usuari\n        msg=\"Benvingut!\": String, missatge de salutaci\u00f3\n    Si no li proporcionem valors en la crida, \n    utilitzar\u00e0 els valors per defecte\n    \"\"\"\nprint(\"Hola\", nom + '.', msg)\n</code></pre> <p>La crida a la funci\u00f3 la podem fer sense arguments, amb un o amb dos. \u00c9s una forma de fer una sobrec\u00e0rrega de m\u00e8todes de forma molt r\u00e0pida.</p> Python<pre><code>saluda(\"Tom\u00e0s\", \"Qu\u00e8 fas?\")\nsaluda(\"Pau\")\nsaluda()\nsaluda(msg=\"\", nom=\"Artur\")\nsaluda(msg=\"\",\"Artur\")\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#nombre-arbitrari-darguments","title":"Nombre arbitrari d'arguments","text":"<p>Si no sabem a priori quants arguments rebr\u00e0 la funci\u00f3, podem utilitzar el car\u00e0cter \"*\" en la definici\u00f3 de la funci\u00f3.</p> Python<pre><code>def saluda(*noms):\n\"\"\"\n    Funci\u00f3 per saludar a un conjunt d'usuaris\n    Entrada:\n        noms: llistat de noms\n    \"\"\"\nfor nom in noms:\nprint(\"Hola\", nom)\nsaluda(\"Alex\",\"Guillem\",\"Javier\")\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#funcions-recursives","title":"Funcions recursives","text":"<p>La recursi\u00f3 \u00e9s el proc\u00e9s de definir alguna cosa en termes d'eixa mateixa cosa. Aleshores, una funci\u00f3 recursiva \u00e9s aquella que es crida a s\u00ed mateix. S'ha d'anar molt en compte en crear correctament la condici\u00f3 d'eixida de la funci\u00f3, ja que d'altra forma entrariem en bucle infinit.</p> Python<pre><code>def factorial(x):\n\"\"\"Funci\u00f3 per a calcular el fatorial d'un enter.\n        Entrada:\n            - x: int, el nombre del que volem calcular el factorial\n        Eixida:\n            - x!: int, factorial d'x\n    \"\"\"\nif x == 1:\nreturn 1\nelse:\nreturn (x * factorial(x-1))\nnum = int(input(\"N\u00famero: \"))\nprint(num, \"! =\", factorial(num))\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#funcions-anonimes","title":"Funcions an\u00f2nimes","text":"<p>Les funcions an\u00f2nimes o funcions lambda, s\u00f3n funcions sense nom. Poden tindre un nombre indeterminat d'arguments, per\u00f2 sols una expressi\u00f3, que ser\u00e0 avaluada i retornat el seu resultat.</p> Python<pre><code>quadrat = lambda x: x ** 2\nprint(quadrat(5))\n</code></pre> <p>Normalment les funcions lambda s'utilitzen en combinaci\u00f3 amb altres funcions com filter(), map(), etc.</p> <p>La funci\u00f3 map() rep com a arguments una funci\u00f3 i una llista, i torna una llista del mateix tamany on cada element \u00e9s el resultat d'aplicar la funci\u00f3 sobre l'element que ocupa la mateixa posici\u00f3 a la llista original.</p> <p>La funci\u00f3 filter(), rep una funci\u00f3 i una llista com a arguments, i torna com a resultat una llista amb els elements que avaluen a True la funci\u00f3.</p> Python<pre><code>llista = [1, 5, 4, 6, 8, 11, 3, 12]\nnova_llista = list(map(lambda x: x ** 2 , llista))\nprint(nova_llista)\n\"\"\"\nEixida:\n[1, 25, 16, 36, 64, 121, 9, 144]\n\"\"\"\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#activitat-10","title":"Activitat 10","text":"<p>Definix una llista i utilitzant filter, que la separe en dues llistes, una amb els elements parells i l'altra amb els senars.</p>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#packages","title":"Packages","text":"<p>Igual que la informaci\u00f3 al disc dur est\u00e0 organitzada en carpetes i subcarpetes, un programa en Python es pot organitzar en paquets, sub paquets i m\u00f2duls. A\u00e7\u00f2 fa un programa m\u00e9s f\u00e0cil de gestionar i conceptualment m\u00e9s clar. Una carpeta ha de contindre un arxiu anomenat __init__.py. Este arxiu pot estar buit o no, per\u00f2 normalment cont\u00e9 codi d'inicialitzaci\u00f3.</p> <p></p> <p>Per a importar un m\u00f2dul d'un paquet utilitzariem import o from ... import.</p> Python<pre><code>import Game.Level.start\nfrom Game.Level import start\n</code></pre>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/","title":"Tractament de fitxers","text":""},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#fitxers","title":"Fitxers","text":""},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#entrada-eixida-utilitzant-fitxers","title":"Entrada eixida utilitzant fitxers","text":"<p>Per a llegir o escriure en un fitxer, primer l\u2019hem d\u2019obrir. Quan acabem, s\u2019ha de tancar perqu\u00e8 s\u2019alliberen els recursos relacionats amb el fitxer.</p> <p>Per tant, a Python, utilitzem la seg\u00fcent seq\u00fc\u00e8ncia d'operacions per traballar amb fitxers:</p> <ol> <li>Obrir un fitxer</li> <li>Llegir o escriure </li> <li>Tancar el fitxer</li> </ol>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#open","title":"Open","text":"<p>Per obrir un fitxer utilitzem la funci\u00f3 open().</p> Python<pre><code>&gt;&gt;&gt; f = open(\"test.txt\")    # arxiu en el mateix directori\n&gt;&gt;&gt; f = open(\"C:/Python38/README.txt\")  # path sencer\n</code></pre> <p>A m\u00e9s, podem especificar el mode d'apertura i la codificaci\u00f3.</p> Mode Descripci\u00f3 r lectura w escriptura x creaci\u00f3 exclusiva (falla si ja existeix) a afegir al final, el crea si no existeix t mode lectura de text (per defecte) b mode binari + actualitzaci\u00f3 (lectura i escriptura ) Python<pre><code>&gt;&gt;&gt; f = open(\"test.txt\",'w') # obert per a escriptura\n&gt;&gt;&gt; f = open(\"test.txt\", mode='r', encoding='utf-8')\n</code></pre> <p>Warning</p> <p>\u00c9s important que tingau en compte que quan l'int\u00e8rpret de python s'executa, ho fa des del directori del qu\u00e8 s'ha llan\u00e7at(el podeu obtindre mitjan\u00e7ant os.getcwd()), per aix\u00f2 la c\u00e0rrega de fitxers en rutes relatives en funcions tipus open, load, etc potser vos d\u00f3ne un error indicant que no el troba.</p> <p>f = open(\"ruta relativa/arxiu.txt\")</p> <p>S'han d'evitar les rutes absolutes.</p> <p>El que podeu fer per evitar estos errors \u00e9s obtindre la ruta des del fitxer font de la seg\u00fcent forma:    Python<pre><code>ruta_base = os.path.dirname(__file__)\nruta_a_recurs = os.path.join(ruta_base, \"arxiu.txt\")\nf = open(ruta_a_recurs)\n</code></pre></p>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#close","title":"Close","text":"<p>Python utilitza un garbage collector per netejar objectes sense refer\u00e8ncies, per\u00f2 no hem de confiar per tancar el fitxer.</p> Python<pre><code>try:\nf = open(\"test.txt\", encoding = 'utf-8')\n# operacions sobre l'arxiu\nfinally:\nf.close()\n</code></pre> <p>Altra possibilitat \u00e9s amb with. En este cas no hem de tancar-lo expl\u00edcitament.</p> Python<pre><code>with open(\"test.txt\", encoding = 'utf-8') as f:\n# operacions sobre l'arxiu\n</code></pre>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#escriptura","title":"Escriptura","text":"<p>Per a escriure, necessitem haver-lo obert amb les opcions w, a o x. Compte amb l'opci\u00f3 w, perqu\u00e8 sobreescriu els arxius.</p> Python<pre><code>with open(\"test.txt\",'w',encoding = 'utf-8') as f:\nf.write(\"Primer arxiu\\n\")\nf.write(\"Este arxiu\\n\")\nf.write(\"cont\u00e9 tres l\u00ednies\\n\")\n</code></pre>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#lectura","title":"Lectura","text":"<p>Utilitzarem el m\u00e8tode read() per a llegir. La funci\u00f3 tell() ens diu en quina posici\u00f3 tenim el cursor i amb seek() el podem modificar.</p> Python<pre><code>&gt;&gt;&gt; f = open(\"test.txt\",'r',encoding = 'utf-8')\n&gt;&gt;&gt; f.read(6)\n'Primer'\n&gt;&gt;&gt; f.read(6)\n' arxiu'\n&gt;&gt;&gt; f.read()     # llig fins al final\n'\\nEste arxiu\\ncont\u00e9 tres l\u00ednies\\n'\n&gt;&gt;&gt; f.read()  # posteriors lectures tornen la cadena buida\n''\n</code></pre> Python<pre><code>&gt;&gt;&gt; f.tell()\n45\n&gt;&gt;&gt; f.seek(0)\n0\n&gt;&gt;&gt; print(f.read())\nPrimer arxiu\nEste arxiu\ncont\u00e9 tres l\u00ednies\n</code></pre> <p>Tamb\u00e9 podem utilitzar la funci\u00f3 readline() per a llegir una l\u00ednia, o readlines() per a que ens torne una llista de l\u00ednies llegides.</p>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#activitat-11","title":"Activitat 11","text":"<p>Crea una aplicaci\u00f3 que vaja llegint operacions d'un fitxer \"operacions.txt\" que contindr\u00e0 una operaci\u00f3 per l\u00ednia. Per exemple: 4 + 4</p> <p>Haur\u00e0 de guardar els resultats en un altre arxiu \"resultats.txt\". Per exemple: 4 + 4 = 8</p> <p>Utilitza funcions an\u00f2nimes per a implementar les operacions de suma, resta, multiplicaci\u00f3 i divisi\u00f3, que seran les \u00faniques operacions reconegudes per la nostra aplicaci\u00f3.</p>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#directoris","title":"Directoris","text":"<p>Si hi ha una gran quantitat de fitxers i directoris amb els que tractar, disposem del m\u00f2dul os (operating system), que ens proporciona m\u00e8todes per al seu tractament.</p> <p>Per a veure el directori de treball, utilitzem getcwd().</p> Python<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n</code></pre> <p>Per a canviar de directori, chdir().</p> Python<pre><code>&gt;&gt;&gt; os.chdir('/home/ferran')\n</code></pre> <p>Per a llistar els directoris ens servim de listdir().</p> Python<pre><code>&gt;&gt;&gt; os.listdir('/home')\n</code></pre> <p>Per crear un directori usem mkdir().</p> Python<pre><code>&gt;&gt;&gt; os.mkdir('Nova_carpeta')\n</code></pre> <p>Si volem renombrar un directori.</p> Python<pre><code>&gt;&gt;&gt; os.rename('Nova_carpeta','Vella_carpeta')\n</code></pre> <p>Per a eliminar un arxiu utilitzarem remove(). Si el que volem eliminar \u00e9s una carpeta buida rmdir().</p> Python<pre><code>&gt;&gt;&gt; os.remove('arxiu.txt')\n&gt;&gt;&gt; os.rmdir('Vella_carpeta')\n</code></pre> <p>En el cas que la carpeta no estiga buida, hem d'importar el m\u00f2dul shutil i utilitzar la funci\u00f3 rmtree().</p> Python<pre><code>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.rmtree('Carpeta')\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/","title":"Errors i excepcions","text":"<p>Podem cometre errors mentre programem. Estos errors es poden classificar b\u00e0sicament en dos tipus:</p> <ol> <li>Errors de sintaxi</li> <li>Errors en la l\u00f2gica (Excepcions)</li> </ol> <p>Els erros de sintaxi es produixen abans de l'execuci\u00f3, mentre que els erros l\u00f2gics es produixen en temps d'execuci\u00f3.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#excepcions","title":"Excepcions","text":"<p>Algun exemple d'excepci\u00f3 s\u00f3n els seg\u00fcents:</p> <ul> <li>Quan intentem obrir un fitxer (per llegir) que no existeix (FileNotFoundError)</li> <li>Quan intentem dividir un nombre per zero (ZeroDivisionError)</li> <li>Quan intentem importar un m\u00f2dul que no existeix (ImportError).</li> </ul> <p>Sempre que es produeixen aquests tipus d\u2019errors d\u2019execuci\u00f3, Python crea un objecte d\u2019excepci\u00f3. Si no el tractem, interrumpeix l'execuci\u00f3 i imprimeix una tra\u00e7a de l'error juntament amb alguns detalls sobre per qu\u00e8 ha produ\u00eft aquest error.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#excepcions-definides-en-python","title":"Excepcions definides en Python","text":"<p>Per a consultar totes les excepcions definides podem utilitzar:</p> Python<pre><code>&gt;&gt;&gt; print(dir(locals()['__builtins__']))\n</code></pre> <ul> <li>ArithmeticError</li> <li>AssertionError</li> <li>AttributeError</li> <li>BaseException</li> <li>BlockingIOError</li> <li>BrokenPipeError</li> <li>BufferError</li> <li>ChildProcessError</li> <li>ConnectionAbortedError</li> <li>ConnectionError</li> <li>ConnectionRefusedError</li> <li>ConnectionResetError</li> <li>EOFError</li> <li>EnvironmentError</li> <li>Exception</li> <li>FileExistsError</li> <li>FileNotFoundError</li> <li>FloatingPointError</li> <li>GeneratorExit</li> <li>IOError</li> <li>ImportError</li> <li>IndentationError</li> <li>IndexError</li> <li>InterruptedError</li> <li>IsADirectoryError</li> <li>KeyError</li> <li>LookupError</li> <li>MemoryError</li> <li>ModuleNotFoundError</li> <li>NameError</li> <li>NotADirectoryError</li> <li>NotImplementedError</li> <li>OSError</li> <li>OverflowError</li> <li>PermissionError</li> <li>ProcessLookupError</li> <li>RecursionError</li> <li>ReferenceError</li> <li>RuntimeError</li> <li>StopAsyncIteration</li> <li>SyntaxError</li> <li>SystemError</li> <li>TabError</li> <li>TimeoutError</li> <li>TypeError</li> <li>UnboundLocalError</li> <li>UnicodeDecodeError</li> <li>UnicodeEncodeError</li> <li>UnicodeError</li> <li>UnicodeTranslateError</li> <li>ValueError</li> </ul>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#com-funcionen-les-excepcions","title":"Com funcionen les excepcions","text":"<p>Python llan\u00e7a una d'aquestes excepcions en executar una instrucci\u00f3 que provoca un error. </p> <p>Quan es produeixen aquestes excepcions, l'int\u00e8rpret de Python det\u00e9n l'execuci\u00f3 del proc\u00e9s actual i el passa al proc\u00e9s que ha fet la crida, fins que alg\u00fa la tracte. Si ning\u00fan proc\u00e9s la tracta, el programa es detendr\u00e0.</p> <p>Per exemple, considerem un programa en qu\u00e8 tenim una funci\u00f3 A que crida a la funci\u00f3 B, que al seu torn crida a la funci\u00f3 C. Si es produeix una excepci\u00f3 a la funci\u00f3 C per\u00f2 no es tracta a C, l\u2019excepci\u00f3 passa a B i despr\u00e9s a A.</p> <p>Si no es gestiona mai, es mostrar\u00e0 un missatge d'error i el nostre programa s'aturar\u00e0 de sobte.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#capturant-excepcions-en-python","title":"Capturant excepcions en Python","text":"<p>A Python, les excepcions es poden gestionar mitjan\u00e7ant una sent\u00e8ncia try.</p> <p>L'operaci\u00f3 cr\u00edtica que pot generar una excepci\u00f3 es col\u00b7loca dins de la cl\u00e0usula try. El codi que gestiona les excepcions s\u2019escriu a la cl\u00e0usula except i s'executar\u00e0 en produ\u00efr-se. Per tant, podem escollir quines operacions es realitzaran una vegada que haguem capturat l'excepci\u00f3. </p> <p>Exemple:</p> Python<pre><code># importem el m\u00f2dul sys per veure el tipus d'excepci\u00f3\nimport sys\nrandomList = ['a', 0, 2]\nfor element in randomList:\ntry:\nprint(\"Element val \", element)\nr = 1/int(element)\nbreak\nexcept:\nprint(\"Oops! Excepci\u00f3 capturada --&gt;\", sys.exc_info()[0])\nprint(\"Seg\u00fcent iteraci\u00f3\")\nprint()\nprint(\"L'invers de \", element, \"\u00e9s\", r)\n</code></pre> <p>Com totes les excepcions hereden de la superclasse Exception, podem reescriure el programa com:</p> Python<pre><code># importem el m\u00f2dul sys per veure el tipus d'excepci\u00f3\nimport sys\nrandomList = ['a', 0, 2]\nfor element in randomList:\ntry:\nprint(\"Element val \", element)\nr = 1/int(element)\nbreak\nexcept Exception as e:\nprint(\"Oops! Excepci\u00f3 capturada --&gt;\", e.__class__)\nprint(\"Seg\u00fcent iteraci\u00f3\")\nprint()\nprint(\"L'invers de \", element, \"\u00e9s\", r)\n</code></pre> <p>A l'exemple anterior, no hem utilitzat cap excepci\u00f3 espec\u00edfica a la cl\u00e0usula except.</p> <p>No \u00e9s una bona pr\u00e0ctica de programaci\u00f3, ja que capturar\u00e0 totes les excepcions i gestionar\u00e0 tots els casos de la mateixa manera. Podem especificar quines excepcions hauria de capturar una cl\u00e0usula except.</p> <p>Una cl\u00e0usula try pot tindre un nombre indeterminat de cl\u00e0usules except per gestionar diferents excepcions, per\u00f2, nom\u00e9s s'executar\u00e0 una en cas que es produeixi una excepci\u00f3.</p> <p>Podem utilitzar una tupla de valors per especificar diverses excepcions en una cl\u00e0usula except.</p> <p>Exemple:</p> Python<pre><code>try:\n# fer alguna cosa\npass\nexcept ValueError:\n# manegem ValueError\npass\nexcept (TypeError, ZeroDivisionError):\n# manegem m\u00faltiples excepcions\n# TypeError i ZeroDivisionError\npass\nexcept:\n# manegem totes les altres excepcions\npass\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#try-except-finally","title":"Try ... except ... finally","text":"<p>La sent\u00e8ncia try de Python pot tindre una cl\u00e0usula final opcional. Aquesta cl\u00e0usula s\u2019executa independentment de si es produix una excepci\u00f3 o no i s\u2019utilitza generalment per alliberar recursos.</p> <p>Per exemple, podem estar connectats a un centre de dades remot a trav\u00e9s de la xarxa o treballar amb un fitxer o una interf\u00edcie gr\u00e0fica d'usuari (GUI). En totes aquestes circumst\u00e0ncies, hem de netejar recursos abans que el programa ature la seua execuci\u00f3, tant si ho fa de forma controlada com si es para bruscament. Aquestes accions (tancar un fitxer, GUI o desconnectar de la xarxa) es realitzen normalment a la cl\u00e0usula final.</p> <p>Exemple:</p> Python<pre><code>try:\nf = open(\"test.txt\",encoding = 'utf-8')\n# operacions amb el fitxer\nfinally:\nf.close()\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#llancant-excepcions-en-python","title":"Llan\u00e7ant excepcions en Python","text":"<p>Les excepcions es generen normalment quan es produeixen errors en temps d'execuci\u00f3, per\u00f2 tamb\u00e9 podem generar/llan\u00e7ar excepcions manualment mitjan\u00e7ant la paraula reservada raise. Opcionalment, podem passar arguments a l\u2019excepci\u00f3 per aclarir per qu\u00e8 s\u2019ha generat aquesta excepci\u00f3.</p> Python<pre><code>import sys\ntry:\nnombre = int(input(\"Dona'm un n\u00famero positiu: \"))\nif nombre &lt;= 0:\nraise ValueError(str(nombre) + \" no \u00e9s un n\u00famero positiu!\")\n1/0\nexcept ValueError as ve:\nprint(\"Excepci\u00f3 capturada:\", ve)\nexcept:\nprint(\"Unexpected error:\", sys.exc_info()[0])\nraise\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#assert","title":"Assert","text":"<p>Amb la paraula reservada assert llancem una excepci\u00f3 sempre i quan l'expressi\u00f3 que la segueix s'avalua a Fals. Si s'avalua a True, es continua l'execuci\u00f3 del programa de forma seq\u00fcencial.</p> Python<pre><code>try:\nnum = int(input(\"Introdueix un nombre positiu: \"))\nassert num &gt; 0\nexcept AssertionError:\nprint(\"AssertionError: No \u00e9s positiu!\")\nexcept ValueError:\nprint (\"ValueError: No has introd\u00eft un n\u00famero!\")\nelse:\nprint(\"\u00c9s positiu\")\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#excepcions-definides-per-lusuari","title":"Excepcions definides per l'usuari","text":"<p>De vegades necessitem definir excepcions que no estan disponibles a Python quan es d\u00f3na alguna condici\u00f3. En este cas, hem de crear les nostres propies excepcions. Per a fer-ho, hem de definir noves classes que hereden de Exception, ja siga directa o indirectament. Esta nova excepci\u00f3 que hem creat tamb\u00e9 podr\u00e0 ser llan\u00e7ada amb raise. </p> Python<pre><code>&gt;&gt;&gt;class CustomError(Exception):\n...    pass\n&gt;&gt;&gt; raise CustomError\nTraceback (most recent call last):\n...\n__main__.CustomError\n&gt;&gt;&gt; raise CustomError(\"S'ha produ\u00eft un error\")\nTraceback (most recent call last):\n...\n__main__.CustomError: S'ha produ\u00eft un error\n</code></pre> <p>Quan estem desenvolupant un programa gran, \u00e9s una bona pr\u00e0ctica col\u00b7locar totes les excepcions definides per l'usuari que el nostre programa definix en un fitxer separat exceptions.py o errors.py.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#activitat-12","title":"Activitat 12","text":"<p>Anem a implementar un xicotet joc per consola. El programa generar\u00e0 un n\u00famero aleatori entre 0 i 100 (utilitzeu randint() del m\u00f2dul random) i demanar\u00e0 a l'usuari que introdu\u00efsca un n\u00famero.</p> <p>Mentre el n\u00famero siga massa menut, llan\u00e7ar\u00e0 una excepci\u00f3 ErrorEnterMassaMenut indicant-li-ho. Si per contra \u00e9s massa gran llan\u00e7ar\u00e0 ErrorEnterMassaGran.</p> <p>Si s'introdueix un valor no num\u00e8ric, es llan\u00e7ar\u00e0 una excepci\u00f3 de tipus ErrorNoEsEnter.</p> <p>El joc acabar\u00e0 quan s'introdu\u00efsca l'enter buscat, felicitant a l'usuari.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#activitat-13","title":"Activitat 13","text":"<p>Modifica el codi de l'activitat 11 per a que no es produ\u00efsquen errors en l'execuci\u00f3, ja siga per introd\u00efur valor no definits per a les funcions, valors que no s\u00f3n num\u00e8rics o operacions desconegudes. Controla tamb\u00e9 que no es produ\u00efsquen errors en la lectura/escriptura dels arxius.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/","title":"Programaci\u00f3 orientada a objectes amb Python","text":"<p>\u00c9s un dels paradigmes m\u00e9s populars per resoldre problemes a trav\u00e9s de la programaci\u00f3. </p> <p>Un objecte t\u00e9 dues caracter\u00edstiques:</p> <ul> <li>atributs (estat)</li> <li>funcions (comportament)</li> </ul> <p>Per exemple:</p> <p>Una persona pot ser un objecte, ja que t\u00e9 les propietats seg\u00fcents:</p> <ul> <li>nom, edat com a atributs</li> <li>cantar, ballar com a comportament</li> </ul> <p>El concepte de POO a Python se centra en la reutilitzaci\u00f3 de codi. Aquest concepte tamb\u00e9 es coneix com DRY (Don't Repeat Yourself).</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#classes","title":"Classes","text":"<p>Una classe \u00e9s una definici\u00f3 d'un objecte abstracte, que representa algun ent de la realitat al nostre programa. Cont\u00e9 tots els detalls comuns sobre tots els objectes del mateix tipus. </p> <p>L'exemple de classe de lloro pot ser:</p> Python<pre><code>class Parrot():\npass\n</code></pre> <p>Ac\u00ed fem servir la paraula clau class per definir una classe Loro buida. </p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#objectes","title":"Objectes","text":"<p>Quan es defineix la classe, nom\u00e9s es defineix la descripci\u00f3 de l'objecte. Per tant, no s\u2019assignen recursos per a la seua execuci\u00f3, ni s'assignen valors als seus atributs. Quan este fet es produeix, aleshores tenim un objecte en mem\u00f2ria sobre el que podem actuar.</p> <p>L'exemple d'objecte de classe lloro pot ser:</p> Python<pre><code>obj = Loro ()\n</code></pre> <p>Aqu\u00ed, obj \u00e9s un objecte de la classe Loro.</p> <p>Suposem que tenim detalls de lloros. Ara, podem construir la classe i crear un objecte per a cada lloro.</p> Python<pre><code>class Parrot:\n# class attribute\nspecies = \"bird\"\n# instance attribute\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n# instantiate the Parrot class\nblu = Parrot(\"Blu\", 10)\nwoo = Parrot(\"Woo\", 15)\n# access the class attributes\nprint(\"Blu is a {}\".format(blu.__class__.species))\nprint(\"Woo is also a {}\".format(woo.__class__.species))\n# access the instance attributes\nprint(\"{} is {} years old\".format( blu.name, blu.age))\nprint(\"{} is {} years old\".format( woo.name, woo.age))\n---\nEixida\nBlu is a bird\nWoo is also a bird\nBlu is 10 years old\nWoo is 15 years old\n</code></pre> <p>Al programa anterior, hem creat una classe Parrot. A continuaci\u00f3, hem definit uns atributs, que prendran valors diferents en la instanciaci\u00f3 d'objectes diferents.</p> <p>Aquests atributs es defineixen dins del m\u00e8tode init de la classe, que \u00e9s el m\u00e8tode inicialitzador que s\u2019executar\u00e0 nom\u00e9s creem objectes.</p> <p>Despr\u00e9s, creem inst\u00e0ncies de la classe Parrot. blu i woo s\u00f3n refer\u00e8ncies (valor) als nostres objectes nous.</p> <p>Podem accedir als atributs de classe mitjan\u00e7ant <code>__class__.species</code>. Els atributs de classe s\u00f3n els mateixos per a totes les inst\u00e0ncies d\u2019una classe. De la mateixa manera, accedim als atributs de la inst\u00e0ncia mitjan\u00e7ant <code>objecte.nom_atribut</code>. Els atributs d\u2019inst\u00e0ncia (valors) s\u00f3n diferents per a cada inst\u00e0ncia d\u2019una classe.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#metodes","title":"M\u00e8todes","text":"<p>S\u00f3n funcions definides dins el cos d'una classe. S'utilitzen per a definir el comportament de l'objecte.</p> Python<pre><code>class Parrot:\n# instance attributes\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n# instance method\ndef sing(self, song):\nreturn \"{} sings {}\".format(self.name, song)\ndef dance(self):\nreturn \"{} is now dancing\".format(self.name)\n# instantiate the object\nblu = Parrot(\"Blu\", 10)\n# call our instance methods\nprint(blu.sing(\"'Happy'\"))\nprint(blu.dance())\n---\nBlu sings 'Happy'\nBlu is now dancing\n</code></pre> <p>Hem definit dos m\u00e8todes sing() i dance(), que s\u00f3n m\u00e8todes d'inst\u00e0ncia, ja que es criden sobre un objecte.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#herencia","title":"Her\u00e8ncia","text":"<p>L'her\u00e8ncia \u00e9s una forma de reutilitzar codi sense tindre-lo que reescriure. A\u00e7\u00f2 facilita el manteniment de les aplicacions. </p> <p>Les noves classes s'anomenen classes derivades (o classe filla). La classes de les que deriven s\u00f3n les classes base (o classe pare).</p> Python<pre><code># parent class\nclass Bird:\ndef __init__(self):\nprint(\"Bird is ready\")\ndef who_is_this(self):\nprint(\"Bird\")\ndef swim(self):\nprint(\"Swim faster\")\n# child class\nclass Penguin(Bird):\ndef __init__(self):\n# call super() function\nsuper().__init__()\nprint(\"Penguin is ready\")\ndef who_is_this(self):\nprint(\"Penguin\")\ndef run(self):\nprint(\"Run faster\")\npeggy = Penguin()\npeggy.whoisThis()\npeggy.swim()\npeggy.run()\n---\nBird is ready\nPenguin is ready\nPenguin\nSwim faster\nRun faster\n</code></pre> <p>En l'anterior programa, la classe Penguin hereda de la classe Bird. La classe derivada hereda el m\u00e8tode swim(), modifica el m\u00e8tode who_is_this() i ext\u00e9n amb un nou m\u00e8tode run().</p> <p>Utilitzem <code>super().__init__()</code> dins de l'<code>__init()__</code> per a inicialitzar la classe pare. </p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#encapsulament","title":"Encapsulament","text":"<p>Podem restringir l\u2019acc\u00e9s a m\u00e8todes i variables, \u00e9s a dir, definir-los com a privats. Aix\u00f2 impedeix que les dades es modifiquen directament accedint als atributs, \u00e9s el que anomenem encapsulament. Definim atributs o m\u00e8todes privats utilitzant el gui\u00f3 baix com a prefix, \u00e9s a dir, simple _ o doble __.</p> Python<pre><code>class Computer:\ndef __init__(self):\nself.__maxprice = 900\ndef sell(self):\nprint(\"Selling Price: {}\".format(self.__maxprice))\ndef setMaxPrice(self, price):\nself.__maxprice = price\nc = Computer()\nc.sell()\n# change the price\nc.__maxprice = 1000\nc.sell()\n# using setter function\nc.setMaxPrice(1000)\nc.sell()\n</code></pre> Text Only<pre><code>Eixida\nSelling Price: 900\nSelling Price: 900\nSelling Price: 1000\n</code></pre> <p>Com vegem, per canviar el valor, hem d\u2019utilitzar una funci\u00f3 modificadora setter, \u00e9s a dir, setMaxPrice (), que pren el preu com a par\u00e0metre.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#polimorfisme","title":"Polimorfisme","text":"<p>El polimorfisme \u00e9s la capacitat d\u2019utilitzar una interf\u00edcie comuna (crides amb els mateixos noms) en diferents classes derivades.</p> <p>Suposem que hem de pintar una forma i que hi ha diverses opcions: rectangle, quadrat, cercle, ... Podr\u00edem utilitzar el mateix m\u00e8tode per a pintar qualsevol forma. Aquest concepte s\u2019anomena polimorfisme.</p> Python<pre><code>class Parrot:\ndef fly(self):\nprint(\"Parrot can fly\")\ndef swim(self):\nprint(\"Parrot can't swim\")\nclass Penguin:\ndef fly(self):\nprint(\"Penguin can't fly\")\ndef swim(self):\nprint(\"Penguin can swim\")\n# common interface\ndef flying_test(bird):\nbird.fly()\n#instantiate objects\nblu = Parrot()\npeggy = Penguin()\n# passing the object\nflying_test(blu)\nflying_test(peggy)\n</code></pre> Text Only<pre><code>Parrot can fly\nPenguin can't fly\n</code></pre> <p>Al programa anterior, hem definit dues classes Parrot i Penguin. Cadascun d'elles t\u00e9 un m\u00e8tode com\u00fa fly(). No obstant aix\u00f2, les seues funcions s\u00f3n diferents.</p> <p>Per utilitzar el polimorfisme, hem creat una interf\u00edcie comuna, \u00e9s a dir, la funci\u00f3 flying_test() que pren com a par\u00e0metre qualsevol objecte i crida al m\u00e8tode fly() de l\u2019objecte. Aix\u00ed, quan passem els objectes blu i peggy a la funci\u00f3 flying_test(), s'executa el m\u00e8tode corresponent a cadascuna.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#activitat-14","title":"Activitat 14","text":"<p>Defineix una jerarquia de figures amb les classes Figura, Cercle, Triangle, Rectangle i Quadrat.</p> <ul> <li> <p>La clase Figura tindr\u00e1 dos m\u00e9todes abstractes area i perimetre, que implementar\u00e1n la resta de classes. La classe figura ser\u00e0 el que s'anomena una interf\u00edcie informal, ja que tots els seus m\u00e8todes s\u00f3n abstractes. Per a definir que s\u00f3n abstractes, simplement utilitzeu la instrucci\u00f3 pass al bloc de la funci\u00f3.</p> Python<pre><code>def area() -&gt; int:\n\"\"\"Torna l'\u00e0rea d'una Figura\"\"\"\npass\n</code></pre> </li> <li> <p>El Cercle rebr\u00e1 el radi com a argument al seu constructor, el Triangle el costat i el Rectangle la base i l'altura.</p> </li> <li>Cercle, Triangle i Rectangle heredar\u00e1n de Figura directament.</li> <li>Quadrat heredar\u00e1 de Rectangle, per\u00f2 al constructor sols rebr\u00e1 un argument, el costat.</li> <li> <p>Crea un objecte de cada tipus i imprimeix les seues caracter\u00edstiques.</p> <p>Info</p> <p>En realitat la classe Figura es pot implementar com a una classe interf\u00edcie, on tots els seus m\u00e8todes siguen abstractes. En Python existeixen dos tipus d'interf\u00edcies, formals i informals.</p> <p>Per altra banda, podem declarar els atributs de les classes com a atributs privats i utilitzar els decoradors @property i @atribut.setter per a indicar els m\u00e8todes getters i setters, que seran p\u00fablics. Fer-ho d'esta forma t\u00e9 alguns avantatges que veurem m\u00e9s endavant.</p> </li> </ul>"},{"location":"unitats/2-intro-interficies/enlla%C3%A7os/enlla%C3%A7os/","title":"Unitat 2. Introducci\u00f3 a les interf\u00edcies gr\u00e0fiques","text":"<ol> <li>10 heur\u00edstiques d'usabilitat per al diseny d'interf\u00edcies d'usuari</li> <li>Guia per a elaborar GUIs en Windows</li> <li>Guia per a elaborar GUIs en Apple</li> <li>Guia per a elaborar GUIs en GNOME</li> <li>Guia per a elaborar GUIs en KDE</li> <li>Coolors: generador de paleta de colors</li> <li>diagrams.net, ferramenta per a crear diagrames. Ens val per a disenyar prototips.</li> <li>Figma, plataforma per construir prototips. Molt utilitzada en el m\u00f3n real</li> </ol>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/","title":"Activitats","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#1-interficies-dusuari","title":"1. Interf\u00edcies d'usuari","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-1","title":"Activitat 1","text":"<p>T'han encarregat que faces el disseny de la interf\u00edcie d'usuari per a l'aplicaci\u00f3 d'una empresa de lloguer de cotxes amb oficina a l'aeroport. L'aplicaci\u00f3 ser\u00e0 utilitzada pels empleats de l'oficina situada a la terminal d'arribades de l'aeroport, que atenen directament els viatgers que volen llogar un cotxe de manera presencial. \u00c9s habitual que a l'oficina hi haja alumnes de pr\u00e0ctiques de Formaci\u00f3 Professional realitzant les FCTs.</p> <p>La primera decisi\u00f3 que has de prendre \u00e9s el tipus d'interf\u00edcie que plantejar\u00e0s en el teu disseny: CLI, GUI o NUI. Justifica la resposta.</p>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-2-escola-infantil","title":"Activitat 2 - Escola infantil","text":"<p>Participes en el projecte de desenvolupament d'una aplicaci\u00f3 per als docents d'una escola bressol, i t'han encarregat elaborar l'an\u00e0lisi del context d'\u00fas (primer pas del disseny centrat en l'usuari). L'aplicaci\u00f3 estar\u00e0 instal\u00b7lada en un ordinador a cada aula i l'objectiu \u00e9s facilitar el m\u00e0xim possible la tasca dels professors del centre.</p> <p>CLAUS DE RESOLUCI\u00d3</p> <p>Recorda que el context d'\u00fas est\u00e0 format tant per les tasques que realitzen els usuaris, com per les caracter\u00edstiques dels usuaris i de l'entorn d'\u00fas que poden ser rellevants per al disseny de la soluci\u00f3.</p>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#2-usabilitat","title":"2. Usabilitat","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-3","title":"Activitat 3","text":"<p>No tots els components de la usabilitat vistos en aquest apartat (aprenentatge, record, efic\u00e0cia, errors i satisfacci\u00f3) tenen la mateixa import\u00e0ncia a totes les aplicacions. Segurament, els components de la usabilitat amb m\u00e9s pes en un joc no seran els mateixos que els d'una aplicaci\u00f3 de retoc fotogr\u00e0fic.</p> <p>En aquest cas pr\u00e0ctic haur\u00e0s d'ordenar de m\u00e9s a menys import\u00e0ncia els cinc components de la usabilitat en una aplicaci\u00f3 d'\u00e0mbit empresarial (per exemple, un programari de gesti\u00f3 de la comptabilitat).</p>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#3-pautes-de-disseny","title":"3. Pautes de disseny","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-4","title":"Activitat 4","text":"<p>Durant el disseny d'una aplicaci\u00f3 per a la compra de peces de roba es planteja la q\u00fcesti\u00f3 de quin tipus de controls utilitzar per als camps seg\u00fcents:</p> <ul> <li>Quantitat de peces (el m\u00e0xim \u00e9s de 10).</li> <li>Talla (les possibles opcions s\u00f3n S, M i L).</li> <li>Si l'usuari vol que s'embolique la pe\u00e7a per a regal.</li> <li>En cas que siga per a regal, el missatge que es posar\u00e0 a la targeta.</li> </ul> <p>Quin tipus de control dels comentats en la teoria seria m\u00e9s adequat per a cada cas?</p>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-5-formulari","title":"Activitat 5 - Formulari","text":"<p>Redissenya el seg\u00fcent formulari de manera que siga m\u00e9s usable per als usuaris.</p> <p></p>"},{"location":"unitats/2-intro-interficies/tasques/2%20-%20Pr%C3%A0ctiques/","title":"Pr\u00e0ctiques","text":""},{"location":"unitats/2-intro-interficies/tasques/2%20-%20Pr%C3%A0ctiques/#practica-1-heuristiques-dusabilitat","title":"Pr\u00e0ctica 1 - Heur\u00edstiques d'usabilitat","text":"<p>L'any 1994, el guru de la usabilitat Jakob Nielsen va proposar 10 heur\u00edstiques per al disseny d'interf\u00edcies d'usuari basant-se en la seua experi\u00e8ncia personal en aquest camp. Tot i el temps transcorregut des del seu plantejament, les heur\u00edstiques de Nielsen segueixen vigents i s\u00f3n utilitzades per la majoria dels professionals del disseny.</p> <p>Heur\u00edstica</p> <p>Una heur\u00edstica es pot definir com un m\u00e8tode o principi basat en l'experi\u00e8ncia, que es pot utilitzar com a ajuda per resoldre un problema m\u00e9s complex.</p> <p>A continuaci\u00f3 detallem les 10 heur\u00edstiques de Nielsen:</p> <p>1. Visibilitat de l'estat del sistema: sempre hem de mantenir informats els usuaris del que est\u00e0 passant a l'aplicaci\u00f3, tan aviat com siga possible.</p> <p>2. Relaci\u00f3 entre el sistema i el m\u00f3n real: la interf\u00edcie ha d'utilitzar expressions i conceptes propers a l'usuari i a l'entorn real on es desenvolupa la seua activitat.</p> <p>3. Donar llibertat i el control a l'usuari: l'usuari ha de tenir el control de qu\u00e8 passa a l'aplicaci\u00f3 en tot moment, fins i tot podent canviar d'opini\u00f3 respecte a una acci\u00f3 anterior.</p> <p>4. Consist\u00e8ncia i est\u00e0ndards: el nostre disseny ha de ser consistent amb all\u00f2 que l'usuari acostuma a trobar en altres productes, i respectar els est\u00e0ndards establerts per a la plataforma o el tipus d'aplicaci\u00f3.</p> <p>5. Prevenci\u00f3 d'errors: la interf\u00edcie que plantegem ha d'ajudar l'usuari a no cometre errors, anticipant-nos a les accions i comportaments que els poden ocasionar.</p> <p>6. Recon\u00e8ixer en comptes de recordar: la nostra aplicaci\u00f3 ha de minimitzar l'esfor\u00e7 de memoritzaci\u00f3 de l'usuari, facilitant l'acc\u00e9s a la informaci\u00f3 que necessite a cada moment.</p> <p>7. Flexibilitat i efici\u00e8ncia d'\u00fas: hem d'oferir diferents maneres de fer les coses, de manera que els usuaris amb caracter\u00edstiques diferents o diferents nivells d'experi\u00e8ncia puguen utilitzar el nostre disseny de forma eficient.</p> <p>8. Est\u00e8tica i disseny minimalista: tots els elements visuals que utilitzem a la interf\u00edcie han de tenir un prop\u00f2sit i ajudar els objectius de l'usuari, evitant elements purament decoratius.</p> <p>9. Ajudar amb els errors: quan es produesca un error haurem d'informar amb un llenguatge familiar a l'usuari, evitant expressions i termes t\u00e8cnics, i oferint una soluci\u00f3.</p> <p>10. Documentaci\u00f3 i ajuda: conv\u00e9 oferir a l'usuari fonts d'informaci\u00f3 i ajuda que us permeten resoldre dubtes sobre l'aplicaci\u00f3.</p> <p>Important</p> <p>En els projectes de disseny d'interf\u00edcies \u00e9s habitual fer sessions d'avaluaci\u00f3 de les heur\u00edstiques sobre els prototips que es plantegen. A difer\u00e8ncia de les avaluacions de la usabilitat comentades a la teoria de l'apartat, a les sessions d'avaluaci\u00f3 de les heur\u00edstiques no participen usuaris, sin\u00f3 que s\u00f3n professionals de la usabilitat els que avaluen el disseny.</p> <p>En aquest cas pr\u00e0ctic haur\u00e0s de plantejar un exemple de cada heur\u00edstica en aplicacions o productes que conegues (no han de ser necess\u00e0riament tecnol\u00f2gics). Tamb\u00e9 pots plantejar un contraexemple, \u00e9s a dir, un cas en qu\u00e8 no s'estiga respectant l'heur\u00edstica. </p>"},{"location":"unitats/2-intro-interficies/tasques/2%20-%20Pr%C3%A0ctiques/#practica-2-disseny-dun-prototip","title":"Pr\u00e0ctica 2 - Disseny d'un prototip","text":"<p>Com hem vist al llarg de la unitat, el disseny de la interf\u00edcie d'usuari d'una aplicaci\u00f3 comporta tenir en compte m\u00faltiples aspectes, sempre amb l'usuari com a referent. A m\u00e9s, \u00e9s un proc\u00e9s iteratiu, en qu\u00e8 el disseny inicial (molt allunyat de la soluci\u00f3 final) evolucionar\u00e0 fins a la versi\u00f3 final (sobre la qual es basar\u00e0 la construcci\u00f3 de l'aplicaci\u00f3).</p> <p>Les propostes de disseny que es van elaborant i que s'avaluen amb els usuaris s'anomenen prototips. Segons es va avan\u00e7ant en el proc\u00e9s de disseny, els prototips van guanyant en fidelitat, \u00e9s a dir, es van semblant cada cop m\u00e9s a la soluci\u00f3 final. Segons el grau de fidelitat es pot distingir entre els tipus de prototips seg\u00fcents:</p> <ul> <li>Prototip de molt baixa fidelitat (en angl\u00e9s, sketch): s\u00f3n els primers esbossos que es fan en iniciar el disseny, i representen les idees generals del projecte. Moltes vegades s'elaboren en paper.</li> <li>Prototip de baixa fidelitat (en angl\u00e9s, wireframe): aquest tipus de prototips se centra en l'estructura i l'organitzaci\u00f3 dels continguts del disseny. No incorpora aspectes visuals com ara colors, fonts o imatges, per centrar-se en la funcionalitat i no en la part est\u00e8tica.</li> <li>Prototip de mitja fidelitat (en angl\u00e9s, mockup): en aquest prototip s'incorporen aspectes visuals al prototip de baixa fidelitat obtingut, obtenint un prototip molt proper visualment al producte final, per\u00f2 sense funcionalitat.</li> <li>Prototip d'alta fidelitat (en angl\u00e9s, prototype): es realitza en les darreres etapes del disseny, i ja s'hi incorporen algunes funcionalitats, com ara la navegaci\u00f3 entre les parts de l'aplicaci\u00f3. </li> </ul> <p>Important</p> <p>Encara que \u00e9s important fer avaluacions dels prototips amb els usuaris des de les primeres versions, els tests d'usabilitat i les avaluacions de les heur\u00edstiques solen intensificar-se i formalitzar-se amb els prototips d'alta fidelitat.</p> <p>En aquest cas pr\u00e0ctic haur\u00e0s de dissenyar un prototip de baixa fidelitat per a una cadena de restaurants de menjar r\u00e0pid, utilitzant l'eina online diagrams.net.</p> <p>La descripci\u00f3 de la funcionalitat que ens ha donat el nostre client \u00e9s la seg\u00fcent:</p> <p>\u201cVolem una aplicaci\u00f3 perqu\u00e8 els nostres clients puguen fer la comanda de manera aut\u00f2noma utilitzant una pantalla t\u00e0ctil situada a l'entrada del restaurant. El client ha de poder afegir a la seua comanda tots els productes que desitge, i els trobareu organitzats per categories (entrants, plats principals, begudes i postres). Quan finalitze la comanda podr\u00e0 decidir si vol pagar amb targeta de cr\u00e8dit al mateix terminal o en efectiu en recollir-lo al taulell. Tamb\u00e9 podran triar entre prendre la seua comanda al restaurant o endur-se'l a casa\u201d </p> <p>Prototip de baixa fidelitat</p> <p>Recorda que un prototip de baixa fidelitat no inclou aspectes est\u00e8tics com ara colors o imatges, i intenta aplicar tot all\u00f2 que hem apr\u00e9s a la unitat a l'hora de plantejar la teua proposta. </p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/","title":"1. Interf\u00edcies d'usuari","text":"<p>La interf\u00edcie d'usuari d'un sistema est\u00e0 definida per la manera com els usuaris interactuen amb els components del sistema. Quan parlem de sistemes inform\u00e0tics, podem distingir dos tipus d'interf\u00edcies d'usuari:</p> <ul> <li>Interf\u00edcies de maquinari: els components f\u00edsics que permeten a l'usuari introduir ordres i dades al sistema, i obtenir els resultats (com ara el teclat, el ratol\u00ed o el monitor).</li> <li>Interf\u00edcies programari: les aplicacions utilitzades pels usuaris per dur a terme una tasca concreta.</li> </ul> <p>HCI</p> <p>La Interacci\u00f3 Persona-Ordinador (en angl\u00e9s Human-Computer Interaction o HCI) \u00e9s la disciplina cient\u00edfica que s'encarrega de l'estudi de les interf\u00edcies entre els humans i els ordinadors en l'\u00fas de sistemes interactius.</p> <p>Al m\u00f2dul de Desenvolupament d'Interf\u00edcies abordarem diferents q\u00fcestions relacionades amb la construcci\u00f3 d'interf\u00edcies de programari, aix\u00ed com alguns aspectes relacionats amb la implantaci\u00f3 de les aplicacions. </p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#11-disseny-centrat-en-lusuari","title":"1.1 Disseny centrat en l'usuari","text":"<p>El disseny d'interf\u00edcies d'usuari actualment es regeix per l'anomenat disseny centrat en l'usuari, una filosofia de disseny on el focus se centra en les caracter\u00edstiques i necessitats de les persones a qui va dirigit un producte o servei. Aquest corrent sorgeix en contraposici\u00f3 a altres com el disseny centrat en el producte, en qu\u00e8 tot el proc\u00e9s gira al voltant del producte que es desenvolupa, i s\u00f3n els usuaris els que s'hi han d'adaptar. </p> <p>Disseny centrat en l'usuari</p> <p>L'enginyer americ\u00e0 Donald Norman va popularitzar el concepte de disseny centrat en l'usuari als anys 80 i 90. L'any 1999 es va crear la norma ISO 13407, que estandarditza el proc\u00e9s de disseny centrat en l'usuari per a sistemes interactius. L'any 2010, es va revisar i actualitzar com a ISO 9241-210.</p> <p>El proc\u00e9s que s'associa al disseny centrat en l'usuari es resumeix en l'esquema seg\u00fcent:</p> <p></p> <ul> <li>An\u00e0lisi del context d'\u00fas: s'investiguen totes les caracter\u00edstiques del context d\u00fas del producte o servei, que inclou tant la tasca a realitzar com les particularitats dels usuaris i de l'entorn d'\u00fas.</li> <li>Detallar els requisits: tenint en compte l'an\u00e0lisi realitzat al pas anterior, s'especifiquen els requisits que el producte o servei ha de complir. </li> <li>Dissenyar solucions: a continuaci\u00f3, es comen\u00e7ar\u00e0 amb el disseny de possibles solucions (prototips) que complisquen els requisits detallats. S'evolucionar\u00e0 des d'un disseny inicial aproximat fins a un disseny complet i detallat. </li> <li>Avaluar amb els usuaris: l'avaluaci\u00f3 de les solucions pels usuaris \u00e9s un punt de vital import\u00e0ncia en el disseny centrat en l'usuari i s'ha de fer des de les primeres versions de la soluci\u00f3. Com a resultat de l'avaluaci\u00f3, \u00e9s probable que s'haja de tornar a una etapa anterior del proc\u00e9s.</li> </ul> <p>Important</p> <p>Tot i que l'aplicaci\u00f3 del disseny centrat en l'usuari consumeix recursos i comporta un esfor\u00e7 extra en el desenvolupament d'un projecte, contribueix a assegurar l'\u00e8xit final i, per tant, s'ha de prendre sempre com a guia.</p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#12-evolucio-de-les-interficies-dusuari","title":"1.2 Evoluci\u00f3 de les interf\u00edcies d'usuari","text":"<p>Tenint en compte l'evoluci\u00f3 en el temps de les interf\u00edcies programari d'usuari, podem distingir tres grans tipus d'interf\u00edcies: CLI, GUI i NUI.</p> <p></p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#a-interficies-tipus-cli","title":"A. Interf\u00edcies tipus CLI","text":"<p>Les interf\u00edcies tipus CLI (de l'angl\u00e9s, Command Line Interface) o interf\u00edcies de l\u00ednia d'ordres s\u00f3n les primeres que van sorgir, amb l'objectiu que l'usuari d'un ordinador pogu\u00e9s interactuar amb el sistema operatiu. Aquest tipus d'interf\u00edcies es basa en la introducci\u00f3 d'ordres mitjan\u00e7ant l\u00ednies de text, i implica que l'usuari conega les regles sint\u00e0ctiques per construir aquestes ordres.</p> <p>Actualment es continuen utilitzant interf\u00edcies tipus CLI en diferents \u00e0mbits. I no nom\u00e9s per interactuar amb els sistemes operatius, sin\u00f3 que multitud d'entorns i aplicacions ofereixen la possibilitat a l'usuari d'interactuar mitjan\u00e7ant ordres de text. L'efici\u00e8ncia que s'aconsegueix amb aquest tipus d'interf\u00edcies, a m\u00e9s de les possibilitats d'automatitzaci\u00f3, s\u00f3n algunes de les raons perqu\u00e8 seguisquen tenint vig\u00e8ncia.</p> <p>git</p> <p>Un exemple clar d\u00fas actual d'interf\u00edcies de tipus CLI \u00e9s el gestor de versions git, utilitzat en multitud de projectes de desenvolupament de programari. Tot i que hi ha diferents interf\u00edcies gr\u00e0fiques per a git, el m\u00e9s habitual \u00e9s utilitzar-lo per mitj\u00e0 d'ordres.</p> <p>Cloud</p> <p>La majoria de plataformes de n\u00favol p\u00fablic (com Amazon Web Services, Microsoft Azure o Google Cloud) ofereixen una interf\u00edcie de tipus CLI per crear i mantenir la infraestructura de serveis al n\u00favol. Aquesta possibilitat permet automatitzar tasques relacionades amb el n\u00favol dins dels processos de desplegament de les aplicacions.</p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#b-interficies-tipus-gui","title":"B. Interf\u00edcies tipus GUI","text":"<p>Les interf\u00edcies gr\u00e0fiques d'usuari (de l'angl\u00e9s, Graphical User Interface) s\u00f3n aquelles que utilitzen imatges i objectes gr\u00e0fics per representar la informaci\u00f3 i les accions que els usuaris poden realitzar. Solen utilitzar met\u00e0fores del m\u00f3n real (com les finestres o els botons) i, a difer\u00e8ncia de les interf\u00edcies CLI, donen llibertat d'exploraci\u00f3 a l'usuari, que no necessita con\u00e9ixer una estricta sintaxi. </p> <p>Les interf\u00edcies tipus GUI es van popularitzar durant els anys 80 gr\u00e0cies a la seua introducci\u00f3 als sistemes operatius d'Apple i Microsoft, encara que el seu origen real es remunta a l'any 1973. Aquest any es va presentar l'ordinador Xerox Alto, el primer a utilitzar la met\u00e0fora de l'escriptori i un dispositiu apuntador (el ratol\u00ed). </p> <p>GUIs</p> <p>Actualment, les interf\u00edcies de tipus GUI s\u00f3n les m\u00e9s comunes a les aplicacions destinades a l'\u00e0mbit empresarial, i per aix\u00f2 el m\u00f2dul de Desenvolupament d'Interf\u00edcies se centra en la construcci\u00f3 d'aquest tipus d'interf\u00edcies.</p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#c-interficies-tipus-nui","title":"C. Interf\u00edcies tipus NUI","text":"<p>Les interf\u00edcies NUI o interf\u00edcies naturals d'usuari (de l'angl\u00e8s, Natural User Interface) es caracteritzen per oferir a l'usuari un estil d'interacci\u00f3 molt m\u00e9s directe i intu\u00eftiu que amb els tipus d'interf\u00edcies anteriors. Solen mancar de dispositiu f\u00edsic d'entrada (com teclat o ratol\u00ed), i en el seu lloc fan \u00fas d'habilitats naturals com el moviment, els gestos o la veu. </p> <p>NUI</p> <p>Les interf\u00edcies t\u00e0ctils dels dispositius m\u00f2bils (com els tel\u00e8fons intel\u00b7ligents o les tauletes) s\u00f3n un clar exemple d'interf\u00edcies NUI, ja que permeten a l'usuari realitzar accions per mitj\u00e0 de gestos naturals (per exemple, navegar entre imatges fent-les lliscar a la pantalla del dispositiu). Tamb\u00e9 els assistents de veu (com Google Assistant o Amazon Alexa) s\u00f3n exemples d'interf\u00edcies naturals, en aquest cas controlades per mitj\u00e0 de la veu.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/","title":"2. Usabilitat","text":"<p>No \u00e9s senzill trobar una definici\u00f3 exacta d'usabilitat, per\u00f2 en termes generals es podria dir que la usabilitat d'un sistema \u00e9s la facilitat amb qu\u00e8 els usuaris poden fer servir aquest sistema per a dur a terme una tasca concreta. Per\u00f2 no hem de pensar que la usabilitat \u00e9s simplement un sin\u00f2nim de facilitat, ja que com veurem m\u00e9s endavant, hi ha molts altres factors que influeixen en la usabilitat d'una aplicaci\u00f3.</p> <p>El terme usabilitat \u00e9s un neologisme, adaptat del vocable angl\u00e9s usability. Encara que la Reial Acad\u00e8mia Espanyola (RAE) no ho inclou al seu diccionari, el seu \u00fas est\u00e0 acceptat i \u00e9s molt habitual en l'\u00e0mbit tecnol\u00f2gic.</p> <p>La usabilitat \u00e9s un dels conceptes clau dins del proc\u00e9s de disseny centrat en l'usuari que vam veure a l'apartat anterior, i ha d'estar present tant en el disseny de les possibles solucions com en la seua avaluaci\u00f3 posterior. </p> <p>S\u00f3n diverses les normes internacionals que inclouen recomanacions relacionades amb la usabilitat, com ara:</p> <ul> <li>ISO 9241-11 (Usabilitat: definicions i conceptes).</li> <li>ISO/IEC 25010 (Qualitat en programari i sistemes).</li> <li>ISO/TR 16982 (M\u00e8todes d'usabilitat com a base al disseny centrat en l'usuari).</li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#21-components-de-la-usabilitat","title":"2.1 Components de la usabilitat","text":"<p>La usabilitat d'un producte o sistema es considera habitualment formada per cinc components:</p> <p></p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#a-aprenentatge","title":"A. Aprenentatge.","text":"<p>Un dels components principals de la usabilitat \u00e9s la facilitat d'aprenentatge, determinada per l'esfor\u00e7 amb qu\u00e8 un nou usuari de la nostra aplicaci\u00f3 pot arribar a completar una tasca espec\u00edfica. Tamb\u00e9 \u00e9s important que en els usos successius de l'aplicaci\u00f3 l'usuari trobe l'aplicaci\u00f3 cada vegada m\u00e9s f\u00e0cil d'utilitzar.</p> <p>Per facilitar l'aprenentatge, un dels aspectes clau \u00e9s la consist\u00e8ncia amb els est\u00e0ndards establerts a la resta d'aplicacions. Per exemple, la majoria de les aplicacions associen la drecera de teclat Ctrl+C amb l'acci\u00f3 de copiar. Si ho fem aix\u00ed tamb\u00e9 al nostre producte, estarem facilitant l'aprenentatge.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#b-eficiencia","title":"B. Efici\u00e8ncia.","text":"<p>Un altre requisit per a la bona usabilitat de l'aplicaci\u00f3 \u00e9s l'efici\u00e8ncia. L'usuari, un cop ha apr\u00e9s el nostre disseny, ha de ser capa\u00e7 d'executar les tasques per a les quals s'ha creat el producte tan r\u00e0pid com siga possible i sense impediments, seguint el proc\u00e9s m\u00e9s senzill.</p> <p>Moltes aplicacions ofereixen als usuaris experimentats formes alternatives de dur a terme les tasques que ajuden a millorar l'efici\u00e8ncia, com ara la definici\u00f3 de dreceres de teclat personalitzades o la creaci\u00f3 de macros per encadenar diverses accions.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#c-record","title":"C. Record.","text":"<p>Tamb\u00e9 \u00e9s important que si un usuari est\u00e0 un temps sense utilitzar el nostre disseny, l'esfor\u00e7 de recordar quan el torna a fer servir el producte siga el m\u00ednim possible. Hem d'evitar que l'usuari haja de memoritzar la manera com es fan les tasques.</p> <p>Un recurs que s'utilitza en algunes aplicacions per evitar memoritzar l'usuari s\u00f3n els assistents, que van guiant pas per pas per fer una tasca llarga o especialment complexa.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#d-errors","title":"D. Errors.","text":"<p>Una part fonamental de la usabilitat \u00e9s la relacionada amb els errors. L'aplicaci\u00f3 ha de ser capa\u00e7 de tolerar un ampli ventall d'accions realitzades per l'usuari sense generar un error. En cas que l'error es produ\u00efsca, cal informar adequadament l'usuari del tipus d'error i la gravetat, i proporcionar informaci\u00f3 per poder corregir l'error. Per a tal finalitat, ens pot ajudar molt un tractament d'excepcions adequat.</p> <p>Hem de prestar especial atenci\u00f3 al llenguatge utilitzat en els missatges d'error que es mostren a l'usuari, ja que la forma d'expressar la situaci\u00f3 produ\u00efda pot tindre una influ\u00e8ncia negativa. Cal evitar el llenguatge acusatori i intimidador, aix\u00ed com la descripci\u00f3 excessivament t\u00e8cnica de l'error.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#e-satisfaccio","title":"E. Satisfacci\u00f3.","text":"<p>El darrer component de la usabilitat \u00e9s la satisfacci\u00f3 de l'usuari en utilitzar el nostre producte. El disseny ha d'aconseguir que l'experi\u00e8ncia de l'usuari amb la nostra aplicaci\u00f3 siga agradable i la seua sensaci\u00f3 subjectiva despr\u00e9s de l'\u00fas siga positiva.</p> <p>La satisfacci\u00f3 de l'usuari est\u00e0 en gran manera influenciada per l'aparen\u00e7a visual de la interf\u00edcie, que hauria de ser est\u00e8ticament agradable per\u00f2 minimalista. En aquest sentit \u00e9s important seguir les pautes de disseny que veurem a l'\u00faltim apartat de la unitat.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#22-avaluacio-de-la-usabilitat","title":"2.2 Avaluaci\u00f3 de la usabilitat","text":"<p>Com vam veure a l'apartat anterior, una de les fases del proc\u00e9s de disseny centrat en l'usuari \u00e9s l'avaluaci\u00f3, i la usabilitat \u00e9s un dels factors clau que cal avaluar. Des dels primers prototips del nostre producte hem de validar el disseny amb els nostres usuaris, cosa que ens aportar\u00e0 informaci\u00f3 molt valuosa per millorar i evolucionar cap a la soluci\u00f3 final.</p> <p>Podem destacar els tres objectius seg\u00fcents de l'avaluaci\u00f3 de la usabilitat:</p> <ul> <li>Identificar problemes en el disseny del producte o servei.</li> <li>Descobrir noves oportunitats de millora del disseny que no ens hav\u00edem plantejat.</li> <li>Aprendre sobre el comportament i les prefer\u00e8ncies dels nostres usuaris.</li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#a-que-hem-davaluar","title":"A. Qu\u00e8 hem d'avaluar?","text":"<p>La primera pregunta que hem de respondre a l'hora de plantejar l'avaluaci\u00f3 de la usabilitat d'un disseny \u00e9s qu\u00e8 avaluarem. Les sessions d'avaluaci\u00f3 de la usabilitat consisteixen a plantejar a un grup d'usuaris la realitzaci\u00f3 d'una s\u00e8rie de tasques realistes que podrien fer a la feina di\u00e0ria amb l'aplicaci\u00f3.</p> <p>Les tasques que es plantegen poden ser molt espec\u00edfiques o amb un resultat obert, depenent dels objectius de la prova. Per\u00f2 sempre haurem de ser molt curosos amb la manera d'especificar la tasca, per evitar malentesos i confusions a l'usuari. Tamb\u00e9 hem d'evitar dirigir l'usuari excessivament, i permetre que utilitze lliurement el disseny.</p> <p>Important</p> <p>A l'hora d'escollir les tasques que els usuaris hauran de realitzar a la sessi\u00f3 d'avaluaci\u00f3 de la usabilitat, hem de prioritzar les m\u00e9s rellevants per a la nostra aplicaci\u00f3. Es recomana que no siguen m\u00e9s de cinc tasques per participant, i que la durada total de la sessi\u00f3 no supere una hora.</p> <p>A m\u00e9s de les tasques que es plantejaran a l'usuari, hem de decidir qu\u00e8 ens interessa mesurar durant la prova. En termes generals, se sol distingir entre dos tipus de m\u00e8triques:</p> <ul> <li> <p>Qualitatives: aquest tipus de m\u00e8triques s\u00f3n especialment importants a les primeres fases del disseny, i consisteixen en valoracions subjectives que realitza l'usuari durant la prova o en observacions que podem realitzar del seu comportament . </p> <p>Exemple</p> <p>Exemples de m\u00e8triques qualitatives s\u00f3n el nivell d'estr\u00e8s de l'usuari (determinat pels seus moviments, gestos o expressions) o la satisfacci\u00f3 de l'usuari despr\u00e9s de la prova (que podeu comentar directament o podem recollir amb un q\u00fcestionari).</p> </li> <li> <p>Quantitatives: aquestes m\u00e8triques es basen en par\u00e0metres quantificables, i s'utilitzen m\u00e9s quan el disseny est\u00e0 quasi acabat o fins i tot quan el producte ja est\u00e0 en funcionament. </p> <p>Exemple</p> <p>Algunes m\u00e8triques quantitatives podrien ser el temps que li costa a un usuari dur a terme una tasca, el nombre de tasques que completa en una sessi\u00f3 o la quantitat de vegades que ha hagut d'anar a l'ajuda.</p> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#b-qui-participa-en-lavaluacio","title":"B. Qui participa en l'avaluaci\u00f3?","text":"<p>A les sessions d'avaluaci\u00f3 de la usabilitat podem distingir els rols seg\u00fcents:</p> <ul> <li> <p>Moderador: \u00e9s l'encarregat de guiar els usuaris participants durant la sessi\u00f3 d'avaluaci\u00f3. Presentar\u00e0 les tasques a realitzar, resoldr\u00e0 els dubtes dels usuaris i obtindr\u00e0 informaci\u00f3 mitjan\u00e7ant l'observaci\u00f3 o preguntant als usuaris. \u00c9s recomanable que siga alg\u00fa extern a l'equip de desenvolupament del producte, i fins i tot de vegades es recorre a professionals especialitzats en aquest tipus d'avaluacions.</p> <p>Important</p> <p>El moderador ha de procurar mantenir-se neutral i no influir en els participants. Ha d'intervenir tan poc com siga possible, i quan ho fa\u00e7a ha d'utilitzar un estil d'interacci\u00f3 obert, que permeta a l'usuari expressar-se amb llibertat. Per exemple, en lloc de preguntar si us sembla b\u00e9 una funcionalitat \u00e9s millor preguntar per la vostra opini\u00f3 sobre aquesta funcionalitat.</p> </li> <li> <p>Usuaris: els participants a la sessi\u00f3 han de ser usuaris potencials del producte o servei que estem dissenyant. Es recomana que a cada sessi\u00f3 d'avaluaci\u00f3 participen al voltant de cinc usuaris, ja que a partir d'aquest nombre els problemes d'usabilitat detectats se solen repetir. </p> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#c-com-es-fa-lavaluacio","title":"C. Com es fa l'avaluaci\u00f3?","text":"<p>Hi ha diferents opcions a l'hora de plantejar l'avaluaci\u00f3 de la usabilitat:</p> <ul> <li>Presencial: el moderador i els usuaris estan f\u00edsicament al mateix lloc. Tot i que el moderador sol prendre notes durant la sessi\u00f3, tamb\u00e9 \u00e9s habitual gravar la sessi\u00f3 en v\u00eddeo per poder fer una an\u00e0lisi m\u00e9s detallada amb posterioritat.</li> <li>Remota: els participants a la sessi\u00f3 estan en llocs diferents. Solen ser menys costoses que les sessions presencials, i en estar els usuaris en el seu propi entorn de treball solen sentir-se m\u00e9s segurs davant de les tasques a realitzar. Podem distingir dos tipus d'avaluacions remotes:<ul> <li>Moderades: encara que el moderador i els usuaris estan en ubicacions f\u00edsiques diferents, interactuen de manera semblant a les sessions presencials, utilitzant algun programari de comunicaci\u00f3 que permeta compartir la pantalla de l'usuari.</li> <li>No moderades: es fa servir algun programari especialitzat per a avaluacions d'usabilitat, on es configuren les tasques a realitzar. Un cop acabada la sessi\u00f3, el moderador rep el resultat de l'avaluaci\u00f3 (normalment, l'enregistrament de la sessi\u00f3, un test de valoraci\u00f3 de l'usuari i les m\u00e8triques quantitatives que s'hagen definit).</li> </ul> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#23-experiencia-dusuari-ux","title":"2.3 Experi\u00e8ncia dusuari (UX)","text":"<p>El concepte d'experi\u00e8ncia d'usuari o UX (de l'angl\u00e9s, User Experience) fa refer\u00e8ncia a l'experi\u00e8ncia completa de l'usuari en relaci\u00f3 amb un producte o servei. Una bona experi\u00e8ncia d'usuari donar\u00e0 com a resultat una percepci\u00f3 subjectiva positiva de l'usuari cap a la nostra aplicaci\u00f3.</p> <p>Important</p> <p>No s'han de confondre els conceptes d'experi\u00e8ncia d'usuari i usabilitat, encara que hi ha relaci\u00f3 entre ells. La usabilitat \u00e9s un dels factors que influeixen en una bona experi\u00e8ncia d'usuari, per\u00f2 tamb\u00e9 seran determinants factors com ara la utilitat (que el producte permeta a l'usuari resoldre un problema concret), la credibilitat (que l'usuari confie en el nostre producte) o l'accessibilitat (que el disseny tinga en compte la varietat d'usuaris i dispositius).</p> <p>Donald Norman (del que ja parl\u00e0rem a l'apartat anterior) juntament amb Jakob Nielsen (un dels principals referents en el m\u00f3n de la usabilitat) van proposar els nivells seg\u00fcents en parlar d'experi\u00e8ncia d'usuari.</p> <p></p> <p>Com veiem, aconseguir una bona experi\u00e8ncia d'usuari comen\u00e7a creant un producte o servei que siga \u00fatil per a l'usuari i li permeta resoldre un problema concret. El seg\u00fcent pas seria aconseguir que el disseny siga usable, aplicant tot el que hem apr\u00e9s als apartats anteriors. Una vegada tenim un disseny \u00fatil i usable, l'objectiu seria aconseguir un producte atractiu per als usuaris, que han de desitjar utilitzar-lo. L'\u00faltim nivell \u00e9s on s'assoleix una experi\u00e8ncia global positiva, aconseguint que la seua opini\u00f3 subjectiva cap al nostre producte siga bona.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/","title":"3. Pautes de disseny","text":"<p>Com hem vist als apartats anteriors, la interf\u00edcie d'usuari d'una aplicaci\u00f3 ha de ser dissenyada amb l'usuari sempre en ment, i tenir com a objectiu que l'experi\u00e8ncia global dels usuaris amb la nostra aplicaci\u00f3 siga la m\u00e9s satisfact\u00f2ria possible. Per aconseguir-ho, \u00e9s de vital import\u00e0ncia con\u00e9ixer les pautes i recomanacions existents per a cadascun dels components de la interf\u00edcie, que ens ajudaran sobre manera a aconseguir un disseny exit\u00f3s.</p> <p>Les pautes de disseny es troben en diferents tipus de documents, que podem organitzar en els seg\u00fcents nivells:</p> <p></p> <p>Al nivell m\u00e9s baix tenim els est\u00e0ndards internacionals, com les normes ISO comentades en apartats anteriors. Serveixen de base per a la resta de pautes, encara que no s\u00f3n documents amb qu\u00e8 els dissenyadors d'interf\u00edcies treballen habitualment. </p> <p>Prenent com a refer\u00e8ncia els est\u00e0ndards internacionals s'elaboren les guies de cada plataforma. Per exemple, Microsoft ha desenvolupat una guia de disseny per a aplicacions d'escriptori per al sistema operatiu Windows i Apple una guia per a cadascuna de les seues plataformes (com macOS o iOS). A l'entorn de les aplicacions per a Linux, hi ha una guia per al GNOME i una altra per al KDE.</p> <p>Important</p> <p>Les guies de disseny de cada plataforma contenen informaci\u00f3 molt \u00fatil a l'hora de plantejar el disseny de la interf\u00edcie d'usuari, i s'han de con\u00e9ixer i utilitzar per part dels dissenyadors. A les refer\u00e8ncies de la unitat es pot trobar un enlla\u00e7 a cadascuna de les guies comentades.</p> <p>En algunes organitzacions, s'elaboren est\u00e0ndards corporatius propis relatius al disseny de la interf\u00edcie, que solen incloure aspectes com la tipografia a utilitzar o les paletes de colors permeses. I respectant aquests est\u00e0ndards corporatius, de vegades es desenvolupen fins i tot guies de disseny per a aplicacions concretes dins una organitzaci\u00f3.</p> <p>Els apartats seg\u00fcents recullen algunes pautes generals que cal tenir en compte a l'hora de fer el disseny de la nostra interf\u00edcie.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#31-estructura-de-la-interficie","title":"3.1 Estructura de la interf\u00edcie","text":""},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#a-principis-de-disseny","title":"A. Principis de disseny","text":"<p>Pel que fa a com estructurar i organitzar els elements que formen la interf\u00edcie de la nostra aplicaci\u00f3, s'han de tenir presents en tot moment els principis de disseny seg\u00fcents:</p> <ul> <li> <p>Contrast: cal utilitzar els contrastos de color i mida per organitzar la informaci\u00f3 i dirigir l'atenci\u00f3 de l'usuari.</p> <p>Exemple</p> <p>S'utilitza habitualment el color roig per advertir l'usuari d'una acci\u00f3 destructiva o que no es pot desfer, ja que contrasta fortament amb els colors que se solen utilitzar com a fons.</p> </li> <li> <p>Jerarquia: agrupar els elements que formen la interf\u00edcie, ordenant-los segons la seua import\u00e0ncia.</p> <p>Exemple</p> <p>Els men\u00fas s\u00f3n un exemple t\u00edpic de jer\u00e0rquica a la interf\u00edcie, ja que ens permeten organitzar les funcionalitats de l'aplicaci\u00f3 en categories i subcategories.</p> </li> <li> <p>Proximitat: podem crear una relaci\u00f3 entre diferents elements de la interf\u00edcie si els situem a prop els uns dels altres. De la mateixa manera, quan dos components de la interf\u00edcie estan allunyats, l'usuari entendr\u00e0 que no hi ha relaci\u00f3 entre ells.</p> <p>Exemple</p> <p>A les barres de ferramentes els diferents botons solen estar agrupats segons la seva funcionalitat, de manera que els usuaris els poden localitzar m\u00e9s f\u00e0cilment. Per exemple, les opcions de negreta, cursiva i subratllat en un processador de text sempre estan juntes.</p> </li> <li> <p>Alineaci\u00f3: la correcta alineaci\u00f3 dels diferents components de la interf\u00edcie facilita a l'usuari processar la informaci\u00f3 i ens permet guiar-los m\u00e9s f\u00e0cilment per les diferents zones de la interf\u00edcie. L'alineaci\u00f3 entre els elements propers \u00e9s especialment important per evitar errors i sobreesfor\u00e7os a l'usuari.</p> <p>Exemple</p> <p>Quan dissenyem un formulari perqu\u00e8 l'usuari introdueixi informaci\u00f3, \u00e9s especialment important l'alineaci\u00f3 entre els diferents elements. D'una banda, les etiquetes han d'estar correctament alineades amb els controls que acompanyen. I de l'altra, hem d'alinear uns camps amb els altres per facilitar a l'usuari la seva tasca.</p> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#b-menus-menus-contextuals-i-barres-de-ferramentes","title":"B. Men\u00fas, men\u00fas contextuals i barres de ferramentes","text":"<p>Gran part de les aplicacions amb interf\u00edcie gr\u00e0fica d'usuari compten amb men\u00fas i barres de ferramentes per permetre a l'usuari accedir a les diferents funcionalitats de l'aplicaci\u00f3. Veurem algunes de les pautes m\u00e9s importants a tenir en compte quan fem servir aquests elements:</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#menus","title":"Men\u00fas","text":"<p>Si el men\u00fa t\u00e9 poques opcions principals (tres o menys) \u00e9s millor considerar una altra alternativa, com ara una barra amb botons. Si teniu massa opcions principals (m\u00e9s de 10) cal intentar reorganitzar les opcions de men\u00fa per reduir-les.</p> <p>Cal intentar simplificar l'estructura de men\u00fas i de submen\u00fas, ja que compliquen a l'usuari trobar l'opci\u00f3 desitjada. Si la jerarquia \u00e9s massa profunda haurem d'intentar reorganitzar les opcions.</p> <p>Les etiquetes han de ser tan simples com siga possible, recomanant-se una sola paraula a les opcions principals del men\u00fa.</p> <p>Si l'acci\u00f3 associada a una opci\u00f3 de men\u00fa requereix obrir una finestra o di\u00e0leg, la vostra etiqueta ha d'acabar amb punts suspensius (per exemple, Desa com\u2026).</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#menus-contextuals","title":"Men\u00fas contextuals","text":"<p>Han d'apar\u00e9ixer en pr\u00e9mer amb el bot\u00f3 dret del ratol\u00ed sobre una zona de la interf\u00edcie, i oferiran un xicotet conjunt d'opcions (no m\u00e9s de 10) relacionades amb l'element sobre el qual heu premut. Les opcions del men\u00fa contextual tamb\u00e9 han d'estar disponibles des del men\u00fa principal de l'aplicaci\u00f3.</p> <p>Ordenar les opcions de m\u00e9s a menys rellev\u00e0ncia per a l'usuari. Evitar l'\u00fas de submen\u00fas als men\u00fas contextuals.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#barres-de-ferramentes","title":"Barres de ferramentes","text":"<p>Incloure a la barra de ferramentes nom\u00e9s les opcions m\u00e9s utilitzades pels usuaris. \u00c9s recomanable permetre a l'usuari personalitzar els botons presents a les barres de ferramentes.</p> <p>Com que, en la majoria de les aplicacions, les barres de ferramentes es poden ocultar, les opcions han de ser accessibles d'altres maneres (per exemple, amb el men\u00fa principal de l'aplicaci\u00f3). Les icones utilitzades han de ser consistents amb les que l'usuari sol trobar a la majoria de les aplicacions (per exemple, un disquet per a l'opci\u00f3 de guardar). Tamb\u00e9 \u00e9s recomanable afegir una descripci\u00f3 de cada acci\u00f3 a manera de tooltip.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#32-controls","title":"3.2 Controls","text":"<p>Els controls s\u00f3n els components b\u00e0sics amb qu\u00e8 constru\u00efm la interf\u00edcie gr\u00e0fica d'una aplicaci\u00f3. </p> <p>Exemple</p> <p>Alguns exemples de controls s\u00f3n els botons, les caselles de selecci\u00f3 o les llistes desplegables.</p> <p>La taula seg\u00fcent recull informaci\u00f3 sobre l'\u00fas dels principals controls, indicant quan han de ser usats i algunes pautes importants en cadascun.</p> <p>Pautes d'\u00fas dels controls</p> BotonsEntrada de textLlista desplegableCasella de selecci\u00f3Bot\u00f3 de r\u00e0dio <p></p> <p>Els botons permeten a l'usuari iniciar una acci\u00f3 de manera immediata.</p> <ul> <li>Utilitzar etiquetes descriptives de lacci\u00f3.</li> <li>Ser consistent en tota l'aplicaci\u00f3 (posici\u00f3, colors, icones, mida,...).</li> <li>Situar-los a prop d'altres controls relacionats.</li> <li>Agrupar-los de manera l\u00f2gica.</li> </ul> <p></p> <p>Permet introduir text de forma lliure. No ho utilitzarem quan hi hagi un control especialitzat m\u00e9s adequat (per exemple, un selector de dates) o quan els possibles valors estiguin restringits (per exemple, la prov\u00edncia d'una adre\u00e7a).</p> <ul> <li>L'etiqueta ha d'indicar clarament a l'usuari qu\u00e8 ha d'introduir i ser tan curta com siga possible.</li> <li>\u00c9s preferible situar l\u02bbetiqueta sobre el control, encara que tamb\u00e9 es pot posar a la seva esquerra.</li> <li>L'amplada del control ha de ser adequada al tipus de dada que cont\u00e9.</li> </ul> <p></p> <p>S'utilitzen per triar un valor d'una llista de valors possibles. S\u00f3n especialment \u00fatils quan una de les opcions \u00e9s la predeterminada, o quan lespai disponible \u00e9s limitat.</p> <ul> <li>Cadascuna de les opcions ha d'estar formada per poques paraules.</li> <li>Les opcions han d'estar ordenades de manera l\u00f2gica. </li> <li>Les meta-opcions (com Cap) s'han de situar a l'inici de la llista i entre par\u00e8ntesis. </li> </ul> <p></p> <p>S'utilitzen per activar o desactivar una opci\u00f3, o per seleccionar o deseleccionar una opci\u00f3 dins d'un grup d'opcions. \u00c9s molt \u00fatil quan lusuari pot triar diverses opcions, o no triar cap opci\u00f3.</p> <ul> <li>Les diferents caselles d\u201fun grup han d\u201festar alineades verticalment.</li> <li>Limitar a 10 el n\u00famero de caselles en un grup.</li> <li>En un grup de caselles totes les etiquetes han de ser homog\u00e8nies en extensi\u00f3 i en format.</li> </ul> <p></p> <p>Permet a l'usuari seleccionar una \u00fanica opci\u00f3 dins d'un grup d'opcions. S\u00f3n recomanables quan volem que l'usuari vegi totes les opcions alhora, i quan les etiquetes de les opcions sigan extenses.</p> <ul> <li>El nombre d'opcions ha de ser inferior a 7.</li> <li>Ordenar les diferents opcions en un ordre l\u00f2gic per a l'usuari.</li> <li>Seleccionar per defecte l'opci\u00f3 m\u00e9s adequada per a l'usuari.</li> </ul> <p>A les guies de disseny de cada plataforma s'ofereix informaci\u00f3 per a altres tipus de controls m\u00e9s espec\u00edfics, com ara les barres de progr\u00e9s, els controls lliscants o els selectors de data i hora.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#33-aspecte-visual","title":"3.3 Aspecte visual","text":"<p>En aquest apartat es mostren algunes pautes de disseny importants relacionades amb l'aspecte visual de l'aplicaci\u00f3, concretament relatives al color, el text i les icones.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#a-color","title":"A. Color","text":"<p>L'\u00fas de diferents colors a la interf\u00edcie amb fins est\u00e8tics ha de ser redu\u00eft, i s'utilitzar\u00e0 principalment per comunicar alguna cosa a l'usuari (per exemple, utilitzarem el color roig per comunicar un error o situaci\u00f3 perillosa). No obstant aix\u00f2, mai no ha de ser l'\u00fanica via per comunicar alguna cosa.</p> <p>Mai referenciar un element de la interf\u00edcie pel seu color (per exemple, seria incorrecte indicar a l'usuari \u201cHa de pr\u00e9mer el bot\u00f3 roig\u201d).</p> <p>La interpretaci\u00f3 que fem dels diferents colors pot variar depenent de la cultura dels usuaris, per la qual cosa ens haurem d'assegurar que el significat dels colors siga el que pretenem.</p> <p>El conjunt de colors que utilitzem en el nostre disseny (conegut com a esquema de color o paleta) han de contrastar de forma adequada.</p> <p>Paleta de colors</p> <p>S'aconsella utilitzar les paletes del sistema, o un generador de paletes de colors com el que s'inclou a les refer\u00e8ncies de la unitat.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#b-text","title":"B. Text","text":"<p>Es recomana utilitzar les fonts predeterminades de la plataforma a qu\u00e8 va destinada l'aplicaci\u00f3 (per exemple, les fonts Segoe UI a Microsoft Windows o San Francisco a Apple macOS).</p> <p>La mida del text s'ha de determinar de manera que ajude l'usuari a establir la jerarquia entre els elements de la interf\u00edcie.</p> <p>Utilitzar les propietats del text (com la negreta, la cursiva o el subratllat) de forma consistent dins de l'aplicaci\u00f3, i tamb\u00e9 amb la resta d'aplicacions. Per exemple, els enlla\u00e7os sempre han d'estar subratllats.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#c-icones","title":"C. Icones","text":"<p>Com a regla general, no s'han d'usar etiquetes i icones alhora al mateix control. Cal triar una de les dues opcions. Es recomana utilitzar icones f\u00e0cilment identificables per l'usuari, que seguisquen les convencions de la resta d'aplicacions (per exemple, una paperera per a l'acci\u00f3 d'esborrar).</p> <p>Algunes icones s\u00f3n f\u00e0cilment reconeixibles dins d'un grup d'icones, per\u00f2 no fora del grup. Per exemple, una icona amb un quadrat negre representa l'acci\u00f3 de parar en un reproductor multim\u00e8dia, per\u00f2 dif\u00edcilment ser\u00e0 associada a aquesta acci\u00f3 fora del context.</p> <p>Conv\u00e9 adaptar-se a l'estil visual de les icones de cada plataforma, encara que actualment el m\u00e9s habitual \u00e9s utilitzar icones amb un disseny simple que representen clarament una acci\u00f3.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#34-missatges-a-lusuari","title":"3.4 Missatges a l'usuari","text":"<p>La majoria de les aplicacions necessiten mostrar diferents tipus de missatges a l'usuari amb diferents prop\u00f2sits. S\u00f3n molt habituals els missatges de confirmaci\u00f3, error o advert\u00e8ncia i les notificacions. </p> <p>A continuaci\u00f3 es llisten algunes recomanacions relacionades amb els missatges a l'usuari:</p> <p>Missatges a l'usuari</p> <ul> <li>Cal avisar l'usuari abans de comen\u00e7ar una acci\u00f3 irreversible i que podria causar una p\u00e8rdua d'informaci\u00f3.</li> <li>Cal evitar interrompre l'usuari amb missatges que no siguen importants.</li> <li>Sempre hem d'utilitzar un llenguatge proper a l'usuari, sense incloure informaci\u00f3 interna de l'aplicaci\u00f3 (com ara codis d'error que no siguen \u00fatils per a l'usuari).</li> <li>La manera d'expressar els missatges ha de ser respectuosa amb l'usuari, i utilitzar un estil d'escriptura directe i conc\u00eds. </li> </ul>"},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/","title":"Activitats","text":""},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#2-components-dus-comu","title":"2. Components d'\u00fas com\u00fa","text":""},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#activitat-1-conexio-entre-senyals-i-ranures","title":"Activitat 1 - Conexi\u00f3 entre senyals i ranures","text":"<p>Desenvolupa una aplicaci\u00f3 amb una finestra que continga un QLineEdit i un QLabel. Assigna una mida m\u00e0xima de text de 5 car\u00e0cters al QLineEdit i una mida fixa de 50x30 p\u00edxels. El QLabel tamb\u00e9 tindr\u00e0 una mida fixa de 50x30 i es despla\u00e7ar\u00e0 50 p\u00edxels a la dreta per no solapar-se amb el QLineEdit. Quan canvieu el text del QLineEdit, l'etiqueta mostrar\u00e0 el text introdu\u00eft.</p> <p></p> <p>Documentaci\u00f3</p> <p>A la documentaci\u00f3 de cada component, es pot consultar si els seus senyals i ranures passen i reben arguments respectivament i de quin tipus s\u00f3n.</p>"},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#3-contenidors-de-components-disseny","title":"3. Contenidors de components. Disseny.","text":""},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#activitat-2-layouts-imbricats","title":"Activitat 2 - Layouts imbricats","text":"<p>Els layouts no nom\u00e9s poden contenir widgets, sin\u00f3 tamb\u00e9 altres layouts que al seu torn poden contenir widgets i layouts. Per afegir un layout com a layout fill, farem servir el m\u00e8tode addLayout del pare, i li passarem el layout fill com a argument.</p> <p>Desenvolupa una aplicaci\u00f3 que tinga l'aspecte seg\u00fcent:</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#4-barres-de-ferramentes-barra-destat-i-menus","title":"4. Barres de ferramentes, barra d'estat i men\u00fas.","text":""},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#activitat-3-sistema-dajuda","title":"Activitat 3 - Sistema d'ajuda","text":"<p>L'ajuda \"What's This?\" o \"Qu\u00e9 es esto?\" \u00e9s part del sistema d'ajuda en l\u00ednia d'una aplicaci\u00f3 i brinda als usuaris informaci\u00f3 sobre la funcionalitat i l'\u00fas d'un control en particular. </p> <p>QWhatsThis proporciona una sola finestra amb un text explicatiu que apareix quan l'usuari fa clic sobre \"What's this?\" seguit d'un altre clic sobre un control. La forma per defecte perqu\u00e8 els usuaris facen la pregunta \u00e9s pr\u00e9mer Shift+F1 per activar el mode ajuda. El text d'ajuda apareix al fer clic, amb el mode d'ajuda activat, sobre un control; desapareix quan l'usuari torna a fer clic. </p> <p>Per entrar en el mode ajuda necessitem cridar al m\u00e8tode est\u00e0tic (no necessites declarar un objecte de la classe) enterWhatsThisMode() mentre que per ixir es cridar\u00e0 a leaveWhatsThisMode(). Podem saber si el tenim activat o no usant inWhatsThisMode().</p> <p>Creeu una aplicaci\u00f3 amb un component tipus dock (flotant) que continga un QTextEdit i un component principal. Per defecte el dock se situar\u00e0 a la part superior de la finestra.</p> <p>Afegeix una acci\u00f3 \u201cImprimeix en dock\u201d que imprimir\u00e0 \u201cAcci\u00f3 Polsada\u201d al component flotant en fer clic sobre ella. La drecera ser\u00e0 Ctrl + P i a m\u00e9s apareixer\u00e0 en una barra d'eines i en un men\u00fa. El vostre text d'ajuda ser\u00e0 \"En executar aquesta acci\u00f3 s'afegir\u00e0 el text \"Acci\u00f3 polsada\" al dock. </p> <p>En resum, es pot llan\u00e7ar per Men\u00fa -&gt; Imprimir a dock, amb Ctrl + P o fent clic al bot\u00f3 corresponent de la barra d'eines.</p> <p>Afegeix un bot\u00f3 Qu\u00e8 \u00e9s aix\u00f2? a l'aplicaci\u00f3 amb el comportament habitual, \u00e9s a dir, entrar o eixir del mode ajuda.</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#5-dialegs-i-altres-finestres","title":"5. Di\u00e0legs i altres finestres.","text":""},{"location":"unitats/3-GUI-PySide6/tasques/1%20-%20Activitats/#activitat-4-dialegs-per-obrir-o-guardar","title":"Activitat 4 - Dialegs per obrir o guardar.","text":"<p>A la pr\u00e0ctica de l'apartat anterior (Pr\u00e0ctica 3), hav\u00edem comen\u00e7at a desenvolupar un editor de text molt simple que permetia carregar i guardar \u201carxiu.txt\u201d situat a la mateixa ruta des de la qual execut\u00e0vem el codi.</p> <p>En aquest cas pr\u00e0ctic, utilitzarem dos di\u00e0legs, un per demanar quin fitxer obrir i un altre per demanar en quin fitxer volem desar els canvis. En cas que ja hi haja un fitxer obert, en donar a desar no demanar\u00e0 la ruta al fitxer, sin\u00f3 que utilitzar\u00e0 la ruta del fitxer obert anteriorment, sobreescrivint-lo.</p> <p>A m\u00e9s, afegirem una entrada de men\u00fa \u201cTancar\u201d per tancar l'arxiu obert actualment i comen\u00e7ar-ne un de nou.</p>"},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/","title":"Pr\u00e0ctiques","text":""},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#2-components-dus-comu","title":"2. Components d'\u00fas com\u00fa","text":""},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-1-combobox","title":"Pr\u00e0ctica 1 - ComboBox","text":"<p>Un dels Widgets que hem esmentat a la teoria \u00e9s el QComboBox. Aquest component ens permet seleccionar un element d'una llista desplegable. En aquesta pr\u00e0ctica es pret\u00e9n que emplenes un ComboBox amb els mesos de l'any, en seleccionar un dels elements, s'imprimir\u00e0 per la consola el n\u00famero que ocupa al ComboBox i el text que cont\u00e9 l'opci\u00f3. </p> <p>Exemple:</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#3-contenidors-de-components-disseny","title":"3. Contenidors de components. Disseny.","text":""},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-2-login","title":"Pr\u00e0ctica 2 - Login","text":"<p>Crearem una aplicaci\u00f3 que simule una finestra de login amb l'aspecte seg\u00fcent:</p> <p></p> <p>En cas d'introduir l'usuari \u201cadmin\u201d amb la contrasenya \u201cadmin\u201d, l'aspecte canviar\u00e0 al seg\u00fcent:</p> <p></p> <p>Si l'usuari o la contrasenya \u00e9s qualsevol altre, l'aspecte seria el seg\u00fcent:</p> <p></p> <p>Credencial harcodejades</p> <p>Tingues en compte que posar els usuaris i contrasenyes al codi no \u00e9s una bona pr\u00e0ctica, ja que per canviar-lo caldria editar el codi. A m\u00e9s, suposa un gran risc de seguretat, perqu\u00e8 en fer enginyeria inversa i obtenir el codi original de l'aplicaci\u00f3, s'obtindrien les credencials. A les aplicacions reals es consultaria un servidor de bases de dades o algun fitxer protegit.</p>"},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#4-barres-de-ferramentes-barra-destat-i-menus","title":"4. Barres de ferramentes, barra d'estat i men\u00fas.","text":""},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-3-editor-de-text","title":"Pr\u00e0ctica 3 - Editor de text","text":"<p>En aquesta pr\u00e0ctica anem a desenvolupar un editor de text molt simple, que tindr\u00e0 el seg\u00fcent aspecte:</p> <p></p> <p>Tindr\u00e0 tres accions:</p> <ul> <li>Obrir fitxer, al men\u00fa i a la barra d'eines. Drecera Ctrl + o</li> <li>Guarda fitxer, al men\u00fa i a la barra d'eines. Drecera Ctrl + s</li> <li>Sortir, al men\u00fa. Drecera Ctrl + q</li> </ul> <p>L'arxiu on guardeu o que podeu carregar sempre ser\u00e0 el mateix, \u201carxiu.txt\u201d, i estar\u00e0 situat a la mateixa ruta que l'executable. En desar, se sobreescriur\u00e0 el fitxer.</p> <p>Ajuda</p> <p>Defineix tres QAction per a les accions. Cadascuna anir\u00e0 connectada a una ranura amb la funcionalitat especificada i la situar\u00e0s a la barra d'eines i al men\u00fa segons corresponga.</p> <p>Per llegir/escriure en un fitxer, utilitza el m\u00e8tode de python \u201copen\u201d com corresponga:</p> <ul> <li>\u201cr+\u201d per a lectura i actualitzaci\u00f3.</li> <li>\u201cw\u201d per a escriptura</li> </ul> <p>Per ixir de l'aplicaci\u00f3 recorda que les aplicacions acaben normalment en tancar la \u00faltima de les finestres visibles.</p>"},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#5-dialegs-i-altres-finestres","title":"5. Di\u00e0legs i altres finestres.","text":""},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-4-no-perdre-els-canvis","title":"Pr\u00e0ctica 4 - No perdre els canvis.","text":"<p>Anem a continuar afegint funcionalitat al nostre editor de text de la pr\u00e0ctica 3. </p> <p>En sortir de l'aplicaci\u00f3, tancar el fitxer o obrir un altre fitxer, hem de comprovar si hem guardat els canvis. En cas de no haver-los guardat, haur\u00edem de demanar a l'usuari si vol guardar-los, de manera que els canvis no es perden.</p>"},{"location":"unitats/3-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-5-dialeg-en-login","title":"Pr\u00e0ctica 5 - Di\u00e0leg en login","text":"<p>A la pr\u00e0ctica 2 de l'apartat 3 hav\u00edem creat una finestra per demanar l'usuari i la contrasenya en una finestra de login. Canviarem la implementaci\u00f3, fent que siga un di\u00e0leg, de manera que si l'usuari i la contrasenya s\u00f3n \u201cadmin\u201d, \u201cadmin\u201d, entrarem a l'aplicaci\u00f3, que mostrarem de forma maximitzada. Per\u00f2 si no, mostrarem un quadre de di\u00e0leg nou indicant que \u201cl'usuari o la contrasenya s\u00f3n incorrectes\u201d.</p> <p>La finestra de l'aplicaci\u00f3 simplement contindr\u00e0 un QLabel amb el text Finestra principal.</p> <p></p> <p></p> <p>Ajuda</p> <p>El di\u00e0leg es mostrar\u00e0 en llan\u00e7ar el seu bucle d'esdeveniments, funci\u00f3 exec(). Aquesta funci\u00f3 ens tornar\u00e0 el resultat del di\u00e0leg, aix\u00ed que podem utilitzar la ranura accept() quan el login siga correcte, que ens tornar\u00e0 el valor QDialog.Accepted. En cas de tornar una altra cosa, mostrarem el missatge de login incorrecte indicat a l'enunciat, utilitzant un QMessageBox. </p>"},{"location":"unitats/3-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/","title":"1. Introducci\u00f3","text":"<p>En aquest primer apartat de la unitat introduirem les tecnologies que utilitzarem per als nostres desenvolupaments, Python, Qt i PySide6.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/#11-python","title":"1.1 Python","text":"<p>\u2122/\u00aePython Software Foundation, GPL http://www.gnu.org/licenses/gpl.html, via Wikimedia Commons</p> <p>Python \u00e9s un llenguatge de programaci\u00f3 multiparadigma, interpretat, multiplataforma i lliure. Va n\u00e0ixer de la m\u00e0 de Guido Van Rossum, un programador holand\u00e9s, i la seua primera versi\u00f3 va ser publicada el 1991. </p> <p>Caracter\u00edstiques:</p> <ul> <li>D'alt nivell: proper a llenguatge de l'\u00e9sser hum\u00e0 i no al llenguatge m\u00e0quina binari.</li> <li>Interpretat: s'executa en qualsevol m\u00e0quina que tinga un int\u00e8rpret de Python. Aix\u00f2 suposa un gran avantatge a l'hora de fer petits canvis de forma r\u00e0pida, ja que elimina la necessitat de recompilar el codi.</li> <li>Multiparadigma: podem fer servir la programaci\u00f3 modular, estructurada o l'orientaci\u00f3 a objectes segons les nostres necessitats.</li> <li>Multiplataforma: permet que el codi siga executat en diferents sistemes operatius.</li> <li>Lliure: \u00e9s propietat de la Python Software Foundation i est\u00e0 publicat sota llic\u00e8ncia PSF-License que \u00e9s compatible amb GPL (General Public License), la qual cosa significa que \u00e9s de lliure \u00fas i distribuci\u00f3, fins i tot per a \u00fas comercial.</li> <li>Net i llegible: posa l'accent en la seua llegibilitat, cosa que ho fa f\u00e0cilment comprensible i f\u00e0cil d'aprendre. Si ja heu treballat amb qualsevol altre llenguatge de programaci\u00f3, us resultar\u00e0 f\u00e0cil l'\u00fas de Python.</li> <li>Tipat fort i din\u00e0mic: encara que les variables s\u00f3n d'un tipus concret, no tenim la necessitat de declarar-los, sin\u00f3 que l'assignaci\u00f3 de tipus s'anir\u00e0 en temps d'execuci\u00f3.</li> <li>\u00c0mplia comunitat: gr\u00e0cies a la seua popularitat compta amb un ampli suport i es pot trobar f\u00e0cilment molta documentaci\u00f3, esdeveniments, confer\u00e8ncies, etc.</li> </ul> <p>Actualment ocupa el primer lloc al r\u00e0nquing TIOBE, que \u00e9s un prestigi\u00f3s indicador de la popularitat dels llenguatges de programaci\u00f3 que s'actualitza un cop al mes. No nom\u00e9s aix\u00f2, sin\u00f3 que a m\u00e9s mostra una tend\u00e8ncia creixent davant de llenguatges com C o Java, que mostren la tend\u00e8ncia contr\u00e0ria. Aix\u00f2 \u00e9s degut en gran manera al seu \u00fas majoritari en camps com la Intel\u00b7lig\u00e8ncia Artificial, el Big Data, el Machine Learning o la Ciberseguretat, \u00e0rees predominants en un futur proper. </p> <p>TIOBE</p> <p>\u00c9s important assenyalar que l'\u00edndex TIOBE no tracta d'escollir el millor llenguatge de programaci\u00f3 o el llenguatge en qu\u00e8 s'han escrit la majoria de les l\u00ednies de codi.</p> <p>Tot aix\u00f2 ens ha portat a escollir aquest llenguatge de programaci\u00f3 per al present curs.</p> <p>Vegem la comparaci\u00f3 entre \u201cHola M\u00f3n!\u201d de Java i de Python</p> JavaPython Java<pre><code>public class HolaM\u00f3n {\npublic static void main(String[] args) {\nSystem.out.println(\"Hola M\u00f3n!\");\n}\n}\n</code></pre> Python<pre><code>print(\"Hola m\u00f3n!\")\n</code></pre> <p>Versions de Python</p> <p>Hi ha dues versions de python no compatibles entre elles, la versi\u00f3 2 i la versi\u00f3 3. Nosaltres utilitzarem la versi\u00f3 3 de python.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/#12-qt","title":"1.2 Qt","text":"<p>Qt \u00e9s un framework de desenvolupament d'aplicacions multiplataforma per a escriptori, sistemes de paret i sistemes m\u00f2bils. Els seus desenvolupaments permeten executar-se a plataformes com Linux, OS X, Windows, VxWorks, QNX, Android, iOS, BlackBerry, Sailfish OS i altres. No \u00e9s un llenguatge de programaci\u00f3 sin\u00f3 un conjunt d'eines per al desenvolupament d'interf\u00edcies gr\u00e0fiques d'usuari multiplataforma mitjan\u00e7ant C++.</p> <p>El desenvolupament de Qt va ser iniciat el 1990 pels programadors noruecs Eirik Chambe-Eng i Haavard Nord. La seua empresa, Trolltech, que venia llic\u00e8ncies de Qt i donava suport. Va passar per diverses adquisicions al llarg dels anys. Avui, l'antiga Trolltech es diu The Qt Company. </p> <p>Encara que The Qt Company \u00e9s el principal impulsor de Qt, ara Qt \u00e9s desenvolupat per un conjunt de companyies m\u00e9s gran: The Qt Project. Est\u00e0 format per moltes empreses i persones de tot el m\u00f3n i segueix un model de govern meritocr\u00e0tic. Tots els que vulguen, particulars i empreses, poden sumar-se al projecte col\u00b7laboratiu, escrivint codi o documentaci\u00f3, informant d'errors, ajudant altres usuaris al f\u00f2rum o mantenint p\u00e0gines al seu wiki.</p> <p>Qt est\u00e0 disponible sota diverses llic\u00e8ncies: The Qt Company ven llic\u00e8ncies comercials, per\u00f2 Qt tamb\u00e9 est\u00e0 disponible com a programari lliure sota diverses versions de GPL i LGPL.</p> <p>Alguns exemples d'aplicacions desenvolupades amb Qt s\u00f3n:</p> <ul> <li>Adobe Photoshop Album, per organitzar imatges.</li> <li>L'escriptori Kde de les distribucions Linux.</li> <li>Last.fm Player, el client descriptori per a streaming de m\u00fasica i r\u00e0dio.</li> <li>Skype, per a missatgeria i VOIP.</li> <li>TeamSpeak, per a la comunicaci\u00f3 amb veu \u00e0mpliament usada per gamers.</li> <li>VirtualBox, per a la virtualitzaci\u00f3 de sistemes.</li> <li>LibreOffice, paquet ofim\u00e0tic lliure. Alternativa a Microsoft Office.</li> <li>OnlyDesktops, paquet ofim\u00e0tic lliure competidor de LibreOffice.</li> </ul>"},{"location":"unitats/3-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/#13-pyside6","title":"1.3 PySide6","text":"<p>PySide \u00e9s la uni\u00f3 de Python i Qt . Va ser desenvolupat per The Qt Company, com a part del projecte Qt for Python. \u00c9s una de les alternatives al paquet est\u00e0ndard Tkinter de Python per crear interf\u00edcies. Com Qt, PySide \u00e9s programari lliure. PySide \u00e9s compatible amb Linux/X11, macOS i Microsoft Windows, per tant, els nostres desenvolupaments seran compatibles amb qualsevol d'aquestes plataformes amb nom\u00e9s un desenvolupament de codi.</p> <p>Documentaci\u00f3</p> <p>Encara que hi ha documentaci\u00f3 espec\u00edfica de PySide disponible, tamb\u00e9 podem i recomanem utilitzar la documentaci\u00f3 de Qt per a C++, tenint en compte que caldr\u00e0 traduir la sintaxi d'objectes i m\u00e8todes C++ per adaptar-lo a Python.</p> <p>Hi ha hagut tres versions principals de PySide:</p> <ul> <li>PySide: compatible amb Qt 4</li> <li>PySide2: compatible amb Qt 5</li> <li>PySide6: compatible amb Qt 6</li> </ul> <p>La versi\u00f3 1 de PySide va ser llan\u00e7ada a l'agost de 2009 sota llic\u00e8ncia LGPL per Nokia, llavors propiet\u00e0ria de Qt, despr\u00e9s de no arribar a un acord amb els desenvolupadors de PyQt, Riverbank Computing. Va recolzar Qt 4 sota els sistemes operatius Linux/X11, Mac US X, Microsoft Windows, Maemo i MeeGo, mentre que la comunitat PySide va afegir suport per a Android.</p> <p>Christian Tismer va iniciar PySide2 per portar PySide de Qt 4 a Qt 5 el 2015. Aleshores, el projecte es va incorporar al projecte Qt. Va ser llan\u00e7at el desembre del 2018.</p> <p>PySide6 es va llan\u00e7ar el desembre del 2020. Va afegir suport per Qt 6 i va eliminar el suport per a totes les versions de Python anteriors a la 3.6.</p> <p>Nosaltres farem \u00fas de PySide6 durant aquest curs.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/","title":"2. Components d'\u00fas com\u00fa.","text":""},{"location":"unitats/3-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#21-components-programari","title":"2.1 Components programari","text":"<p>En el desenvolupament de circuits electr\u00f2nics, el grau de reutilitzaci\u00f3 de components \u00e9s molt alt, de manera que la construcci\u00f3 d'un circuit electr\u00f2nic es limita a la integraci\u00f3 i acoblament de diferents components comercials. Per exemple, una placa base cont\u00e9 components com resist\u00e8ncies, condensadors, rel\u00e9s, xips\u2026, que no han estat fabricats pel fabricant de la placa. Aix\u00ed que, hi ha fabricants especialitzats en components i altres en producte final. Aix\u00f2 permet reduir costos quant a temps i diners es refereix.</p> <p>En el desenvolupament de programari, la reutilitzaci\u00f3 de codi continua sent relativament escassa, per\u00f2 amb la utilitzaci\u00f3 de components aquest problema es redueix, reduint alhora el temps de desenvolupament, el cost econ\u00f2mic i els errors de programaci\u00f3.</p> <p>El desenvolupament de la interf\u00edcie d'una aplicaci\u00f3 es basa en la construcci\u00f3 d'una aplicaci\u00f3 a partir de components programari ja existents, limitant al m\u00ednim necessari el desenvolupament de codi nou. Podem imaginar-nos els components com les peces d'un Lego que podem connectar entre ells en una jerarquia d'arbre de components. Qualsevol aplicaci\u00f3 pot estar composta per m\u00faltiples components, i els components principals tenen components secundaris niats dins seu. </p> <p>Vam veure una llista dels principals controls d'usuari a la unitat anterior. En aquesta unitat posarem en pr\u00e0ctica l'\u00fas dels controls o components esmentats amb PySide6.</p> <p></p> <p>A l'exemple anterior, veiem sis components diferents que formen el formulari.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#22-components-a-pyside6","title":"2.2 Components a PySide6","text":"<p>Els controls s\u00f3n els elements b\u00e0sics i principals per crear interf\u00edcies d'usuari a Qt. Podeu mostrar informaci\u00f3, rebre informaci\u00f3 de l'usuari i contenir altres controls de forma agrupada. Un control que no est\u00e0 incrustat en un control pare es mostra en forma de finestra independent. Vegem la implementaci\u00f3 de \u201cHola M\u00f3n!\u201d amb PySide6.</p> <p>Exemple</p> Python<pre><code># Importem les classes QApplication, QLabel i QWidget\n# del m\u00f2dul QtWidgets del paquet PySide6\nfrom PySide6.QtWidgets import QApplication, QLabel, QWidget\nclass Finestra(QWidget):\n'''\n    Classe Finestra, hereta de QWidget, component base.\n    '''\n# Constructor de la classe Finestra\ndef __init__(self):\n# Crida al constructor de la superclasse\nsuper().__init__()\n# Assignem el t\u00edtol de la finestra\nself.setWindowTitle(\"finestra\")\n# Creem una etiqueta amb la finestra com a parent.\nself.etiqueta1 = QLabel(\"Hola m\u00f3n!\", self)\nif __name__ == \"__main__\":\n# Cada aplicaci\u00f3 ser\u00e0 una sola inst\u00e0ncia de QApplication.\napp = QApplication([])\n# Creem un objecte Finestra.\nfinestra1 = Finestra()\n# Mostrem la Finestra, per defecte els components estan ocults.\nfinestra1.show()\n# Iniciem el bucle d'esdeveniments.\napp.exec()\n</code></pre> <p>L'aspecte que presenta en executar-lo en un escriptori Kde \u00e9s el d'una finestra com la seg\u00fcent:</p> <p></p> <p>Dins la finestra estar\u00e0 continguda tota la interf\u00edcie de l'usuari. En aquest cas, nom\u00e9s cont\u00e9 un component QLabel sense interacci\u00f3 possible, ja que \u00e9s una etiqueta que mostra un text. Cada aplicaci\u00f3 gr\u00e0fica tindr\u00e0 almenys una finestra, per\u00f2 en podr\u00e0 tenir m\u00e9s. Aix\u00f2 ho veurem en seccions posteriors de la unitat. Normalment una aplicaci\u00f3 acabar\u00e0 en tancar la darrera de les finestres.</p> <p>Algunes coses que cal tenir en compte del codi:</p> <ul> <li>Per crear una classe derivada d'una altra, es passa la classe base entre par\u00e8ntesis. En aquest cas heretem de la classe QWidget per crear la nostra pr\u00f2pia finestra. super() es refereix a la classe de qu\u00e8 s'hereta.</li> <li>El constructor de classe \u00e9s el m\u00e8tode especial init.</li> <li>El par\u00e0metre self fa refer\u00e8ncia a si mateixa, \u00e9s a dir a la classe que estem implementant.</li> <li>Els components estan ocults per defecte. Si els passem el parent en la seua creaci\u00f3 es mostraran en mostrar el parent. En cas contrari els podem mostrar amb el m\u00e8tode show, per\u00f2 es mostraran com una finestra independent.</li> <li>Per accedir o canviar les propietats dels widgets ho fem a trav\u00e9s dels seus m\u00e8todes p\u00fablics. Els m\u00e8todes d'assignaci\u00f3 de valors a propietats, setters, comencen per set seguit del nom de la propietat que volem assignar (setText, setAlignement, setSizePolicy, ...), mentre que els de lectura de valors, getters, solen comen\u00e7ar pel nom del domini a llegir (text, alignement, sizePolicy, ...).</li> </ul>"},{"location":"unitats/3-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#23-esdeveniments","title":"2.3 Esdeveniments","text":"<p>Cada interacci\u00f3 de l'usuari amb la interf\u00edcie, per exemple un clic de ratol\u00ed, un doble clic, l'\u00fas d'una tecla, etc. generar\u00e0 un esdeveniment. Aquest esdeveniment ser\u00e0 afegit a la cua d'esdeveniments (event queue) per ser gestionat.</p> <p>El bucle d'esdeveniments (event loop), que \u00e9s un bucle infinit, comprovar\u00e0 a cada iteraci\u00f3 si hi ha esdeveniments pendents de ser gestionats. En cas de ser aix\u00ed, l'esdeveniment ser\u00e0 gestionat pel gestor d'esdeveniments (event handler) que executar\u00e0 el vostre manejador. Quan aquest acaba, el control torna al bucle d'esdeveniments per esperar m\u00e9s esdeveniments.</p> <p>El bucle d'esdeveniments estar\u00e0 gestionat per l'objecte QApplication i es llan\u00e7ar\u00e0 en executar el m\u00e8tode exec(). En fer clic sobre l'aspa, gestionar\u00e0 l'esdeveniment de tancar, de manera que la finestra es tancar\u00e0 i l'aplicaci\u00f3 s'acabar\u00e0.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#231-senyals-i-ranures","title":"2.3.1 Senyals i ranures","text":"<p>A l'aplicaci\u00f3 de l'exemple anterior, en produir-se un esdeveniment sobre l'etiqueta, l'aplicaci\u00f3 no executava cap funcionalitat associada a aquest esdeveniment. Necessitem connectar els esdeveniments a alguna funcionalitat concreta. A Qt, aix\u00f2 s'implementa mitjan\u00e7ant senyals i ranures.</p> <p>Signals</p> <p>Un senyal (signal) a Qt s'emet quan l'usuari produeix un esdeveniment. </p> <p>Slots</p> <p>Les ranures (slots) s\u00f3n escoltadors de senyals que s'executaran en llan\u00e7ar-se l'emissi\u00f3 del senyal al qual estan connectats.</p> <p>Exemple</p> Python<pre><code>'''\nUnidad 2. Generaci\u00f3n de interfaces. Arxiu 2.\n\"Exemple de signal-slot\"\n'''\nfrom PySide6.QtWidgets import QApplication, QPushButton, QMainWindow\nclass FinestraPrincipal(QMainWindow):\n'''\n    Classe FinestraPrincipal, hereta de QMainWindow.\n    El QMainWindow \u00e9s un component pensat per ser\n    la finestra principal d'una aplicaci\u00f3.\n    '''\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"finestra\")\nself.boton1 = QPushButton(\"Fes clic!\", self)\n# Configurem el bot\u00f3 com a element principal de la finestra.\n# Aix\u00f2 \u00e9s perqu\u00e8 estem usant un QMainWindow. No calia\n# passar-li el parent en la seua creaci\u00f3.\nself.setCentralWidget(self.boton1)\n# Connectem l'esdeveniment clic del bot\u00f3 a la ranura clic_de_boton\nself.boton1.clicked.connect(self.clic_de_bot\u00f3)\n# Definim la ranura que s'executar\u00e0 amb el clic del bot\u00f3\ndef clic_de_bot\u00f3(self):\nprint(\"Senyal de clic rebut -&gt; Execuci\u00f3 de la ranura\")\nif __name__ == \"__main__\":\napp = QApplication([])\nfinestra1 = FinestraPrincipal()\nfinestra1.show()\napp.exec()\n</code></pre> <p>Ara, l'aspecte de l'aplicaci\u00f3 ser\u00e0 el mateix, per\u00f2 en fer clic sobre el bot\u00f3, la consola des de la qual hem llan\u00e7at l'aplicaci\u00f3 mostrar\u00e0 el text \u201cSenyal de clic rebut -&gt; Execuci\u00f3 de la ranura\u201d.</p> <p></p> <p>Slots predefinits</p> <p>Alguns components tenen ranures predefinides que podem fer servir directament. Farem \u00fas d'aquesta caracter\u00edstica en el cas pr\u00e0ctic d'aquest apartat.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#24-principals-components-en-formularis","title":"2.4 Principals components en formularis","text":"<p>A la primera unitat vam veure un llistat de components habituals juntament amb el seu \u00fas habitual. Farem un llistat amb els components m\u00e9s habituals de PySide6 usats en formularis, juntament amb algun dels seus senyals i funcions m\u00e9s \u00fatils. Pel nom de les funcions se'n pot deduir l'\u00fas i el comportament. Veurem i practicarem amb exemples de molts en altres apartats de la unitat. Per obtenir una llista completa i m\u00e9s informaci\u00f3 de cadascun, cal consultar la documentaci\u00f3 de Qt, disponible als enlla\u00e7os.</p> <p>Widgets</p> QCheckBoxQLabelQComboBoxQRadioButtonQPushButtonQTabWidgetQTableWidgetQLineEditQTextEditQProgressBarQDateTimeEditQSliderQDial <p>Senyals:</p> <ul> <li>stateChanged()</li> </ul> <p>Funcions:</p> <ul> <li>isChecked()</li> <li>setCheckState()</li> </ul> <p>+info</p> <p>Funcions:</p> <ul> <li>setText()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>currentIndexChanged()</li> <li>currentTextChanged()</li> </ul> <p>Funcions:</p> <ul> <li>addItem()</li> <li>setCurrentIndex()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>toggled()</li> </ul> <p>Funcions:</p> <ul> <li>isChecked()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>clicked()</li> </ul> <p>Funcions:</p> <ul> <li>setCheckable()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>currentChanged ()</li> <li>tabBarClicked()</li> </ul> <p>Funcions:</p> <ul> <li>addTab(widget, label)</li> <li>setCurrentIndex()</li> <li>setCurrentWidget()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>cellChanged()</li> <li>currentCellChanged()</li> </ul> <p>Funcions:</p> <ul> <li>clear()</li> <li>insertColumn()</li> <li>insertRow()</li> <li>removeColumn()</li> <li>removeRow()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>textChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setText()</li> <li>clear()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>textChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setText()</li> <li>clear()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>valueChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setValue()</li> <li>setOrientation()</li> <li>setMaximum()</li> <li>setMinimum()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>dateChanged()</li> <li>dateTimeChanged()</li> <li>timeChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setDate()</li> <li>setDateTime()</li> <li>setTime()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>valueChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setValue()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>valueChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setValue()</li> </ul> <p>+info</p>"},{"location":"unitats/3-GUI-PySide6/teoria/3%20-%20Layouts/","title":"3. Contenidors de components. Disseny.","text":""},{"location":"unitats/3-GUI-PySide6/teoria/3%20-%20Layouts/#31-layouts","title":"3.1 Layouts","text":"<p>Fins ara hem vist finestres amb un sol component o components continguts dins d'un altre component, com \u00e9s el cas del seg\u00fcent exemple:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import QApplication, QLabel, QWidget\nclass Finestra(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nself.setWindowTitle(\"finestra\")\n# Creem dues etiquetes amb el component com a parent\nself.label1 = QLabel(\"Etiqueta 1\", self)\nself.label2 = QLabel(\"Etiqueta 2\", self)\n# Necessitem moure la segona perqu\u00e8 no es solapi amb la primera\nself.label2.move(0, 30)\nif __name__ == \"__main__\":\napp = QApplication([])\nfinestra = Finestra()\n# Mostrem la finestra\nfinestra.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s una finestra com la seg\u00fcent:</p> <p></p> <p>Per\u00f2 qu\u00e8 passa si volem afegir m\u00e9s components tant horitzontalment com verticalment? Qu\u00e8 passa si redimensionem la finestra? Haur\u00edem d'anar calculant el nombre de p\u00edxels a despla\u00e7ar-los i l'espai que ocupen a la interf\u00edcie no queda modificat. Aix\u00ed que estudiarem en aquest apartat una forma m\u00e9s eficient de gestionar tot aix\u00f2 a trav\u00e9s de layouts. S\u00f3n dissenys o disposicions que podem aplicar a una interf\u00edcie per ordenar-ne els components. Amb la combinaci\u00f3 d'aquests layouts \u00e9s possible definir el disseny de qualsevol interf\u00edcie gr\u00e0fica d'usuari.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/3%20-%20Layouts/#32-qvboxlayout","title":"3.2 QVBoxLayout","text":"<p>La primera disposici\u00f3 que estudiarem ser\u00e0 la disposici\u00f3 en vertical. Hi anir\u00e0 afegint els components al final d'una pila de components, un a sobre de l'altre.</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QWidget, QVBoxLayout, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout horizontal\")\n# Creamos un objeto layout horizontal\nlayout_horizontal = QVBoxLayout()\n# Creamos un componente principal para la ventana\ncomponente_principal = QWidget()\n# Le assignamos el layout vertical como disposici\u00f3n\ncomponente_principal.setLayout(layout_horizontal)\nself.setCentralWidget(componente_principal)\n# A\u00f1adimos cuatro botones al layout vertical\nlayout_horizontal.addWidget(QPushButton('Uno'))\nlayout_horizontal.addWidget(QPushButton('Dos'))\nlayout_horizontal.addWidget(QPushButton('Tres'))\nlayout_horizontal.addWidget(QPushButton('Cuatro'))\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p></p> <p>Hem definit un component principal de tipus QWidget al qual assignem un layout vertical. A aquest layout hi afegim els components que utilitzarem. </p> <p>Si ara provem de redimensionar la finestra, els components canvien autom\u00e0ticament de mida per ajustar-se a l'amplada de la finestra i repartir-se de forma equitativa verticalment.</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/3%20-%20Layouts/#33-qhboxlayout","title":"3.3 QHBoxLayout","text":"<p>En aquest apartat ens centrem en la disposici\u00f3 horitzontal dels components, fent \u00fas d'un layout horitzontal:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QWidget, QVBoxLayout, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout vertical\")\n# Creamos un objeto layout vertical\nlayout_vertical = QVBoxLayout()\n# A\u00f1adimos cuatro botones al layout vertical\nlayout_vertical.addWidget(QPushButton('Uno'))\nlayout_vertical.addWidget(QPushButton('Dos'))\nlayout_vertical.addWidget(QPushButton('Tres'))\nlayout_vertical.addWidget(QPushButton('Cuatro'))\n# Creamos un componente principal para la ventana\ncomponente_principal = QWidget()\n# Le assignamos el layout vertical como disposici\u00f3n\ncomponente_principal.setLayout(layout_vertical)\nself.setCentralWidget(componente_principal)\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p></p> <p>Si redimensionem la finestra, els botons no creixen verticalment, per\u00f2 si ho fan horitzontalment de forma proporcional.</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/3%20-%20Layouts/#34-qgridlayout","title":"3.4 QGridLayout","text":"<p>Tot i que amb l'\u00fas de layouts verticals i horitzontals podr\u00edem aconseguir gaireb\u00e9 qualsevol disposici\u00f3, pot no resultar c\u00f2mode de gestionar en algunes ocasions. En aquests casos, pot ser m\u00e9s \u00fatil fer servir el layout en forma de quadr\u00edcula.</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QWidget, QGridLayout, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout cuadr\u00edcula\")\n# Creamos un objeto layout cuadr\u00edcula\nlayout_cuadr\u00edcula = QGridLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_cuadr\u00edcula)\nself.setCentralWidget(componente_principal)\n# A\u00f1adimos cuatro botones a a la primera fila\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,0'), 0, 0)\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,1'), 0, 1)\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,2'), 0, 2)\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,3'), 0, 3)\n# A\u00f1adimos un bot\u00f3n a la seguna fila que ocupe cuatro columnas\nlayout_cuadr\u00edcula.addWidget(QPushButton('1,0-3'), 1, 0, 1, 4)\n# A\u00f1adimos dos botones a la tercera fila, que ocupen dos columnas cada uno\nlayout_cuadr\u00edcula.addWidget(QPushButton('2,0-1'), 2, 0, 1, 2)\nlayout_cuadr\u00edcula.addWidget(QPushButton('2,2-3'), 2, 2, 1, 2)\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s el seg\u00fcent:</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/3%20-%20Layouts/#35-qformlayout","title":"3.5 QFormLayout","text":"<p>En alguns casos pot resultar molt c\u00f2mode utilitzar el QFormLayout, que \u00e9s un disseny pensat per a l'elaboraci\u00f3 de formularis. Normalment es faran servir com a entrada d'informaci\u00f3, per\u00f2 tamb\u00e9 pot servir per visualitzar-la, deshabilitant l'entrada de dades als components. Vegem-ne un exemple simple:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQWidget,\nQFormLayout,\nQLabel,\nQLineEdit,\nQSpinBox,\nQDoubleSpinBox\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout formulario\")\n# Creamos un objeto layout formulario\nlayout_formulario = QFormLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_formulario)\nself.setCentralWidget(componente_principal)\n# Cada fila contendr\u00e1 una etiqueta y un componente de entrda\nlayout_formulario.addRow(QLabel(\"Texto: \"), QLineEdit())\nlayout_formulario.addRow(QLabel(\"Entero: \"), QSpinBox())\nlayout_formulario.addRow(QLabel(\"Decimal: \"), QDoubleSpinBox())\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s el seg\u00fcent:</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/3%20-%20Layouts/#36-qstackedlayout","title":"3.6 QStackedLayout","text":"<p>Finalment, vegem un layout que ens permet apilar components, per\u00f2 no de manera vertical de manera que tots s\u00f3n visibles, sin\u00f3 en profunditat, de manera que nom\u00e9s un dels elements ser\u00e0 visible, com si el port\u00e9ssim al capdavant. Per gestionar quin element \u00e9s visible utilitzem setCurrentIndex o setCurrentWidget. Vegem-ne un exemple:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQWidget,\nQPushButton,\nQStackedLayout,\nQLabel,\nQVBoxLayout,\nQHBoxLayout\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout apilado\")\nlayout_principal = QHBoxLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_principal)\nself.setCentralWidget(componente_principal)\n# Creamos un QStackedLayout y a\u00f1adimos cuatro \"capas\" al layout apilado\nself.pila = QStackedLayout()\nself.pila.addWidget(QLabel('Capa 1'))\nself.pila.addWidget(QLabel('Capa 2'))\nself.pila.addWidget(QLabel('Capa 3'))\n# Creamos un layout vertical con tres botones\n# Cada bot\u00f3n har\u00e1 visible una capa a trav\u00e9s de la ranura\nlayout_botones = QVBoxLayout()\nboton1 = QPushButton(\"Ver capa 1\")\nboton1.clicked.connect(self.activar_capa1)\nboton2 = QPushButton(\"Ver capa 2\")\nboton2.clicked.connect(self.activar_capa2)\nboton3 = QPushButton(\"Ver capa 3\") \nboton3.clicked.connect(self.activar_capa3)\nlayout_botones.addWidget(boton1)\nlayout_botones.addWidget(boton2)\nlayout_botones.addWidget(boton3)\n# A\u00f1adimos los layouts al layout principal\nlayout_principal.addLayout(self.pila)\nlayout_principal.addLayout(layout_botones)\ndef activar_capa1(self):\nself.pila.setCurrentIndex(0)\ndef activar_capa2(self):\nself.pila.setCurrentIndex(1)\ndef activar_capa3(self):\nself.pila.setCurrentIndex(2)\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s una interf\u00edcie semblant a l'\u00fas de pestanyes, per\u00f2 amb botons:</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/4%20-%20Menus/","title":"4. Men\u00fas, barres d'eines, barres d'estat i components flotants.","text":"<p>Si ens fixem a la finestra principal de qualsevol aplicaci\u00f3, la seva estructura b\u00e0sica sol seguir un esquema semblant al seg\u00fcent:</p> <ul> <li>Un men\u00fa, normalment en forma de desplegable, per\u00f2 pot ser en forma de pestanyes, com en aquest cas.</li> <li>Barres d'eines, amb funcionalitat habitual en un sol clic, a les quals accedir mitjan\u00e7ant men\u00fa seria m\u00e9s tedi\u00f3s.</li> <li>Component principal, que ocupa la part central de l'aplicaci\u00f3.</li> <li>Barra d'estat, que indica l'estat o la configuraci\u00f3 activa de l'aplicaci\u00f3.</li> </ul> <p></p> <p>En aquest apartat afegirem aquestes parts a la nostra finestra principal, fent \u00fas, com en apartats anteriors, de QMainWindow.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/4%20-%20Menus/#41-qactions","title":"4.1 QActions","text":"<p>Abans de comen\u00e7ar a abordar els men\u00fas i les barres d'eines, conv\u00e9 estudiar les QActions de Qt. A les aplicacions es pot executar una mateixa funcionalitat interaccionant amb diferents interf\u00edcies d'usuari, ja sigui a trav\u00e9s de men\u00fas, botons de la barra d'eines o dreceres de teclat. Aqu\u00ed \u00e9s on entren en joc les QAction de Qt. A m\u00e9s, se us pot assignar un text d'estat, que s'utilitzar\u00e0 a la barra d'estats.</p> <p>Exemple</p> <p>En un processador de textos, en utilitzar el men\u00fa \u201cFitxer -&gt; Guardar\u201d, el bot\u00f3 \u201cGuardar\u201d de la barra d'eines o utilitzar la drecera de teclat, Ctrl + s normalment, el fitxer que estem editant es guardar\u00e0 a disc. La funcionalitat \u00e9s la mateixa en els tres casos, per\u00f2 la interf\u00edcie utilitzada \u00e9s diferent. A la barra d'estats sol ser visible si el document en q\u00fcesti\u00f3 est\u00e0 desat o ha estat modificat.</p> <p>Un objecte QAction pot contenir una icona, un text de men\u00fa, una drecera de teclat, un text d'estat i un text d'ajuda. Alguns d'aquests elements es poden establir al constructor, per\u00f2 tamb\u00e9 es poden configurar de manera independent amb setIcon(), setText(), setIconText(), setShortcut(), setStatusTip(), setWhatsThis() i setToolTip(). Es pot canviar la font del men\u00fa amb setFont().</p> <p>Quan s'ha creat una QAction, l'afegim al men\u00fa i a la barra d'eines que volem utilitzar i despr\u00e9s el connectem a la ranura que executar\u00e0 la seua funcionalitat.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/4%20-%20Menus/#42-barra-de-menus","title":"4.2 Barra de men\u00fas","text":"<p>Per afegir men\u00fas a QMainWindow, utilitzarem el m\u00e8tode .addMenu() de la barra de men\u00fas menuBar(). A aquest nou men\u00fa podem afegir nous submen\u00fas amb addMenu() i separadors, per organitzar de forma m\u00e9s coherent les opcions, amb addSeparator().</p> <p>Per afegir una opci\u00f3 de men\u00fa que responga a una funcionalitat, utilitzarem els QAction. </p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import QApplication, QMainWindow\nfrom PySide6.QtGui import QAction, QKeySequence\n# Nuestra ventana principal hereda de QMainWindow\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Ventana principal con men\u00fa\")\n# Obtenemos la referencia a la barra de men\u00fa\nbarra_menus = self.menuBar()\n# A\u00f1adimos la opci\u00f3n \"Menu\" al men\u00fa principal\nmenu = barra_menus.addMenu(\"&amp;Menu\")\n# Definimos el QAction con el texto \"Imprimir por consola\"\naccion = QAction(\"&amp;Imprimir por consola\", self)\n# Asignamos un atajo de teclado a la acci\u00f3n\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\n# Connectamos la accion con la ranura \"imprimir_por_consola\"\naccion.triggered.connect(self.imprimir_por_consola)\n# A\u00f1adimos la acci\u00f3n al men\u00fa\nmenu.addAction(accion)\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa o del atajo\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre> <p>El s\u00edmbol \u201c&amp;\u201d al text del Men\u00fa, ens facilita obrir el men\u00fa desplegable corresponent amb la combinaci\u00f3 de tecles Alt + car\u00e0cter. Fixa't que el car\u00e0cter en q\u00fcesti\u00f3 apareix subratllat al text del men\u00fa.</p> <p>Aix\u00ed, en el nostre exemple, en pr\u00e9mer Alt+M obrirem el desplegable d'aquest men\u00fa. Si tornem a pr\u00e9mer la tecla \u201ci\u201d, que apareix subratllada al desplegable, ens llan\u00e7ar\u00e0 l'acci\u00f3 definida al QAction, imprimir per consola. Fixa't que al codi hem assignat una combinaci\u00f3 de tecles a l'acci\u00f3, \u00e9s a dir una drecera de teclat per llan\u00e7ar-la. Aix\u00ed doncs, aquesta drecera ve indicada a l'opci\u00f3 del men\u00fa. Aix\u00f2 ens permet, sense desplegar el men\u00fa, llan\u00e7ar aquesta acci\u00f3.</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/4%20-%20Menus/#43-barra-deines","title":"4.3 Barra d'eines","text":"<p>Ampliarem l'exemple anterior afegint l'acci\u00f3 a una barra d'eines. Els passos a seguir serien els seg\u00fcents:</p> <ol> <li>Creem una barra d'eines instant la classe QToolBar</li> <li>Afegim l'acci\u00f3 a la barra d'eines amb el m\u00e8tode addAction</li> <li>Afegim la barra d'eines a la finestra principal amb addToolBar</li> </ol> <p>Per defecte, els botons a les barres d'eines segueixen el mateix estil que tinguem configurat al sistema, per\u00f2 si volem canviar aquest comportament, podem fer-ho amb la funcio setToolButtonStyle. Les opcions disponibles, que es troben al m\u00f2dul Qt de Qt.Core, s\u00f3n:</p> Flag Resultat Qt.ToolButtonIconOnly Nom\u00e9s mostra la icona Qt.ToolButtonTextOnly Nom\u00e9s mostra el text Qt.ToolButtonTextBesideIcon Mostra el text al costat de la icona Qt.ToolButtonTextUnderIcon Mostra el text de la icona Qt.ToolButtonFollowStyle Opci\u00f3 per defecte. Segueix la configuraci\u00f3 del sistema <p>Afegim l'acci\u00f3 d'imprimir per consola a la barra d'eines 1.</p> Python<pre><code>import os\nfrom PySide6.QtGui import QAction, QIcon, QKeySequence\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QToolBar\n# Nuestra ventana principal hereda de QMainWindow\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\n\"Ventana principal con men\u00fa i barra de herramientas\")\nbarra_menus = self.menuBar()\nmenu = barra_menus.addMenu(\"&amp;Menu\")\nruta_a_icono = os.path.join(os.path.dirname(\n__file__), \"images/console.png\")\n# A\u00f1adimos a la acci\u00f3n, un icono\naccion = QAction(QIcon(ruta_a_icono), \"Imprimir por consola\", self)\naccion.setWhatsThis(\n\"Al pulsar sobre el bot\u00f3n se imprimir\u00e1 un texto por consola\")\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\naccion.triggered.connect(self.imprimir_por_consola)\nmenu.addAction(accion)\n# Creamos la barra de herramientas\nbarra_herramientas = QToolBar(\"Barra de herramientas 1\")\n# A\u00f1adimos el QAction a la barra de herramientas\nbarra_herramientas.addAction(accion)\n# A\u00f1adimos la barra de herramientas a la aplicaci\u00f3n\nself.addToolBar(barra_herramientas)\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa, del atajo\" +\n\" o de la barra de herramientas\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s la mateixa aplicaci\u00f3 per\u00f2 amb una barra d'eines, la qual podem situar a dalt o als laterals, punxant i arrossegant-la, i fer-la visible o invisible fent clic dret sobre ella i de nou clic sobre el bot\u00f3 de verificaci\u00f3.</p> <p></p> <p>Si us fixeu en el men\u00fa, amb la incorporaci\u00f3 de la icona a l'acci\u00f3, veureu que apareix la icona tamb\u00e9 al desplegable. Si no vols que apareguin, podem configurar l'aplicaci\u00f3 perqu\u00e8 no ho faci, fent \u00fas del m\u00e8tode setAttribute() i passant-li Qt.AA_DontShowIconsInMenus del m\u00f2dul Qt com a par\u00e0metre.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/4%20-%20Menus/#44-barra-destat","title":"4.4 Barra d'estat","text":"<p>En aquesta secci\u00f3 mostrarem com utilitzar la barra d'estat. El seu \u00fas principal ser\u00e0 mostrar informaci\u00f3 a l'usuari, i els m\u00e8todes m\u00e9s utilitzats addWidget, addPermanentWidget showMessage i clearMessage que ens serviran per afegir components i mostrar/ocultar missatges.</p> <p>Cada indicador d'estat pot ser d'una de les tres categories seg\u00fcents:</p> <ul> <li>Temporal: ocupa la barra d'estat mentre el punter est\u00e0 sobre una acci\u00f3 on s'ha configurat un statusTip. Tamb\u00e9 es pot mostrar utilitzant showMessage, en aquest cas s'oculta en v\u00e9ncer el timeout passat al constructor o en trucar al m\u00e8tode clearMessage. S'utilitza per donar informaci\u00f3 sobre eines o entrades de men\u00fa.</li> <li>Normal: mostra informaci\u00f3 a trav\u00e9s de components (QLabel, QProgressBar o fins i tot QToolButton) afegits a la barra d'eines. Un missatge temporal els pot ocultar i s'utilitza normalment per donar informaci\u00f3 a l'usuari sobre l'estat de la vostra aplicaci\u00f3, per exemple n\u00famero de p\u00e0gina en un document.</li> <li>Permanent: mai no s'amaga i s'utilitza cridant al m\u00e8tode addPermanentWidget. S'utilitza per a indicacions importants, per exemple, algunes aplicacions col\u00b7loquen un indicador de bloqueig de maj\u00fascules a la barra d'estat.</li> </ul> <p>Exemple</p> Python<pre><code>import os\nimport platform\nfrom PySide6.QtGui import QAction, QIcon, QKeySequence\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QToolBar, QLabel\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\n\"Ventana principal con men\u00fa, barra de herramientas \" +\n\" y barra de estado\")\nbarra_menus = self.menuBar()\nmenu = barra_menus.addMenu(\"&amp;Menu\")\nruta_a_icono = os.path.join(os.path.dirname(\n__file__), \"images/console.png\")\naccion = QAction(QIcon(ruta_a_icono), \"Imprimir por consola\", self)\naccion.setWhatsThis(\n\"Al pulsar sobre el bot\u00f3n se imprimir\u00e1 un texto por consola\")\naccion.setStatusTip(\"Imprimir por consola\")\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\naccion.triggered.connect(self.imprimir_por_consola)\nmenu.addAction(accion)\nbarra_herramientas = QToolBar(\"Barra de herramientas 1\")\nbarra_herramientas.addAction(accion)\nself.addToolBar(barra_herramientas)\n# Obtenemos la referencia a la barra de estado\nbarra_estado = self.statusBar()\n# Agregamos un componente permanente con la plataforma\nbarra_estado.addPermanentWidget(QLabel(platform.system()))\n# Mostramos un mensage durante 3 segundos\n# que se sobrescibir\u00e1 al pasar el puntero por una acci\u00f3n\nbarra_estado.showMessage(\"Listo. Esperando acci\u00f3n ...\", 3000)\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa, del atajo \" +\n\" o de la barra de herramientas\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre>"},{"location":"unitats/3-GUI-PySide6/teoria/4%20-%20Menus/#45-components-flotants","title":"4.5 Components flotants","text":"<p>Finalment, estudiarem els components flotants, que ens aporten gran versatilitat a les aplicacions. S\u00f3n components que poden canviar d'ubicaci\u00f3, desacoblar-se i fins i tot tancar-se.</p> <p>Exemple</p> Python<pre><code>import os\nimport platform\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QAction, QIcon, QKeySequence\nfrom PySide6.QtWidgets import (\nQApplication, QMainWindow, QToolBar, QLabel, QDockWidget, QTextEdit)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\n\"Ventana principal con men\u00fa, barra de herramientas \" +\n\" y barra de estado\")\nbarra_menus = self.menuBar()\nmenu = barra_menus.addMenu(\"&amp;Menu\")\nruta_a_icono = os.path.join(os.path.dirname(\n__file__), \"images/console.png\")\naccion = QAction(QIcon(ruta_a_icono), \"Imprimir por consola\", self)\naccion.setWhatsThis(\n\"Al pulsar sobre el bot\u00f3n se imprimir\u00e1 un texto por consola\")\naccion.setStatusTip(\"Imprimir por consola\")\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\naccion.triggered.connect(self.imprimir_por_consola)\nmenu.addAction(accion)\nbarra_herramientas = QToolBar(\"Barra de herramientas 1\")\nbarra_herramientas.addAction(accion)\nself.addToolBar(barra_herramientas)\nbarra_estado = self.statusBar()\nbarra_estado.addPermanentWidget(QLabel(platform.system()))\nbarra_estado.showMessage(\"Listo. Esperando acci\u00f3n ...\", 3000)\n# Creamos un componente flotante\ndock1 = QDockWidget()\n# Agregamos t\u00edtulo a este componente\ndock1.setWindowTitle(\"Componente base 1\")\n# Asignamos el componente que contendr\u00e0\ndock1.setWidget(QTextEdit(\"\"))\n# Le asignamos una anchura m\u00ednima de 50\ndock1.setMinimumWidth(50)\n# Lo posicionamos a la derecha de la ventana principal\nself.addDockWidget(Qt.RightDockWidgetArea, dock1)\nself.setCentralWidget(QLabel(\"Componente principal\"))\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa, del atajo \" +\n\" o de la barra de herramientas\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre> <p>El nou component Dock, pot ser resituat punxant i arrossegant sobre la barra de t\u00edtol cap a un dels cantons de la finestra principal. Podem tamb\u00e9 desacoblar-ho per mostrar-ho furea de la finestra i mostrar-ho o amagar-ho, igual que les barres d'eines. </p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/5%20-%20Dialegs/","title":"5. Di\u00e0legs i altres finestres.","text":"<p>Fins ara hem utilitzat el component QMainWindow per treballar amb les nostres aplicacions. En aquest apartat estudiarem com mostrar o demanar informaci\u00f3 a l'usuari a trav\u00e9s de diversos tipus de finestres.</p>"},{"location":"unitats/3-GUI-PySide6/teoria/5%20-%20Dialegs/#51-dialegs","title":"5.1 Di\u00e0legs","text":""},{"location":"unitats/3-GUI-PySide6/teoria/5%20-%20Dialegs/#511-qdialog","title":"5.1.1 QDialog","text":"<p>Tal com el seu nom indica, els di\u00e0legs s\u00f3n finestres emergents temporals que ens permeten comunicar-nos amb l'usuari de l'aplicaci\u00f3 i que apareixen a causa de la producci\u00f3 d'un esdeveniment. S\u00f3n finestres modals, \u00e9s a dir, bloquegen la interacci\u00f3 amb la resta de l'aplicaci\u00f3 fins que se n'acabe l'execuci\u00f3, siga tancant-los o introduint la informaci\u00f3 que es demana. </p> <p>Per aquest motiu, necessiten el seu propi bucle d'esdeveniments. Es pot evitar el bloqueig de l'execuci\u00f3 amb l'\u00fas de fils d'execuci\u00f3, per\u00f2 queda fora de l'abast d'aquest m\u00f2dul. S'hi hauria d'aplicar els coneixements adquirits al m\u00f2dul de Programaci\u00f3 de Serveis i Processos als desenvolupaments en Qt.</p> <p>A Qt els di\u00e0legs s'implementen com a classes de QDialog o les seves derivades. </p> <p>Exemple</p> Python<pre><code>    from PySide6.QtWidgets import QApplication, QDialog, QMainWindow, QPushButton\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Aplicaci\u00f3n con di\u00e1logos\")\nboton = QPushButton(\"Haz clic para que el dialogo aparezca\")\nboton.clicked.connect(self.mostrar_dialogo)\nself.setCentralWidget(boton)\ndef mostrar_dialogo(self):\nprint(\"Clic recibido, se mostrar\u00e1 el dialogo.\")\n# Creamos un objeto de la clase dialogo\nventana_dialogo = QDialog(self)\nventana_dialogo.setWindowTitle(\"Ventana de dialogo\")\n# Lanzamos su bucle de eventos\nventana_dialogo.exec()\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre>"},{"location":"unitats/3-GUI-PySide6/teoria/5%20-%20Dialegs/#512-dialegs-personalitzats","title":"5.1.2 Di\u00e0legs personalitzats","text":"<p>Un cop sabem crear un di\u00e0leg, anem a personalitzar-lo. Podem fer servir els QPushButton estudiats anteriorment, per\u00f2 a Qt hi ha una s\u00e8rie de botons predefinits dissenyats segons les guies d'estil de les diferents plataformes. Es recomana consultar aquestes guies perqu\u00e8 les nostres aplicacions siguen el m\u00e9s naturals a l'usuari.</p> <p>Els botons predefinits a Qt es troben al m\u00f2dul QDialogButtonBox com a propietats. A continuaci\u00f3 mostrem la llista completa d'estos, que deuria ser suficient per a qualsevol aplicaci\u00f3:</p> <ul> <li>QDialogButtonBox.Ok</li> <li>QDialogButtonBox.Open</li> <li>QDialogButtonBox.Save</li> <li>QDialogButtonBox.Cancel</li> <li>QDialogButtonBox.Close</li> <li>QDialogButtonBox.Discard</li> <li>QDialogButtonBox.Apply</li> <li>QDialogButtonBox.Reset</li> <li>QDialogButtonBox.RestoreDefaults</li> <li>QDialogButtonBox.Help</li> <li>QDialogButtonBox.SaveAll</li> <li>QDialogButtonBox.Yes</li> <li>QDialogButtonBox.YesToAll</li> <li>QDialogButtonBox.No</li> <li>QDialogButtonBox.Abort</li> <li>QDialogButtonBox.Retry</li> <li>QDialogButtonBox.Ignore</li> <li>QDialogButtonBox.NoButton</li> </ul> <p>Al seg\u00fcent exemple afegirem diversos botons a la nostra finestra. Per fer-ho:</p> <ol> <li>Crearem una variable amb els nostres botons separats per l'operador l\u00f2gic or \u201c|\u201d, ja que realment, els botons s\u00f3n variables bin\u00e0ries.</li> <li>Passarem aquesta variable com a primer par\u00e0metre a QDialogButtonBox, que contindr\u00e0 tots els nostres botons.</li> <li>Connectem els senyals dels botons a la ranura que desitgem. El m\u00e9s normal \u00e9s utilitzar com a ranura les ja predefinides.</li> </ol> <p>Consulteu https://doc.qt.io/qt-6/qdialogbuttonbox.html per a m\u00e9s informaci\u00f3 sobre els senyals QDialogButtonBox.</p> <p>Consulteu https://doc.qt.io/qt-6/qdialog.html per a m\u00e9s informaci\u00f3 sobre les ranures de QDialog.</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQMainWindow, QApplication, QDialog, QDialogButtonBox, QVBoxLayout, QLabel,\nQPushButton\n)\nclass DialogoPersonalizado(QDialog):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"Dialogo personalizado\")\n# Definimos los botones Ok i Cancel en nuestra variable\nbotones = QDialogButtonBox.Ok | QDialogButtonBox.Cancel\n# Pasamos la variable de botones al constructor de QDialogButtonBox\nself.caja_botones = QDialogButtonBox(botones)\n# Conectamos las se\u00f1ales de los botones con las ranuras de QDialog\nself.caja_botones.accepted.connect(self.accept)\nself.caja_botones.rejected.connect(self.reject)\n# A\u00f1adimos un QLabel y el QDialogButtonBox en un layout vertical\nself.layout_dialogo = QVBoxLayout()\nself.layout_dialogo.addWidget(\nQLabel(\"Est\u00e1s seguro de querer realizar esta acci\u00f3n?\"))\nself.layout_dialogo.addWidget(self.caja_botones)\nself.setLayout(self.layout_dialogo)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Aplicaci\u00f3n con di\u00e1logo personalizado\")\nboton = QPushButton(\"Haz clic para que el dialogo aparezca\")\nboton.clicked.connect(self.mostrar_dialogo)\nself.setCentralWidget(boton)\ndef mostrar_dialogo(self):\nprint(\"Clic recibido, se mostrar\u00e1 el dialogo.\")\nventana_dialogo = DialogoPersonalizado(self)\nventana_dialogo.setWindowTitle(\"Ventana de dialogo personalizado\")\n# Nos guardamos el resultado de la ejecuci\u00f3n del dialogo:\n# 1 si se ejecuta la ranura accept\n# 0 si se ejecuta reject\nresultado = ventana_dialogo.exec()\nif resultado:\nprint(\"Aceptada\")\nelse:\nprint(\"Cancelada\")\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre> <p>Traducci\u00f3 de di\u00e0legs</p> <p>Si executem el codi, observem que els botons mostren el text en angl\u00e8s. Podem utilitzar el seg\u00fcent m\u00e8tode per traduir els controls predefinits: Python<pre><code>def carregar_traductor(self, app):\ntranslator = QTranslator(app)\ntranslations = QLibraryInfo.location(QLibraryInfo.TranslationsPath)\ntranslator.load(\"qt_ca\", translations)\napp.installTranslator(translator)\n...\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.carregar_traductor(app)\n</code></pre></p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/5%20-%20Dialegs/#52-qmessagebox","title":"5.2 QMessageBox","text":"<p>A l'apartat anterior, hem personalitzat un QDialog, per\u00f2 hi ha quadres de di\u00e0leg ja predissenyats a Qt. Es troben disponibles al m\u00f2dul QMessageBox i hi ha quatre tipus segons el nivell de severitat de la informaci\u00f3 (question, information, warning i critical). Realment, l\u00fanica difer\u00e8ncia entre ells \u00e9s la icona que mostren. A la taula seg\u00fcent es mostren els nivells:</p> Icona Tipus de QMessageBox \u00das Question Preguntes a l'usuari en accions normals. Information nformaci\u00f3 a l'usuari en accions normals. Warning Informaci\u00f3 per a errors no cr\u00edtics. Critical Informaci\u00f3 per a errors cr\u00edtics. <p>Igual que en els QDialog, hi ha botons predefinits que podem utilitzar a les nostres QMessageBox. Aquesta \u00e9s la llista d'ells:</p> <ul> <li>QMessageBox.Ok</li> <li>QMessageBox.Open</li> <li>QMessageBox.Save</li> <li>QMessageBox.Cancel</li> <li>QMessageBox.Close</li> <li>QMessageBox.Discard</li> <li>QMessageBox.Apply</li> <li>QMessageBox.Reset</li> <li>QMessageBox.RestoreDefaults</li> <li>QMessageBox.Help</li> <li>QMessageBox.SaveAll</li> <li>QMessageBox.Yes</li> <li>QMessageBox.YesToAll</li> <li>QMessageBox.No</li> <li>QMessageBox .NoToAll</li> <li>QMessageBox.Abort</li> <li>QMessageBox.Retry</li> <li>QMessageBox.Ignore</li> <li>QMessageBox.NoButton</li> </ul> <p>Missatge cr\u00edtic t\u00edpic d'algunes aplicacions</p> Python<pre><code>from PySide6.QtCore import QLibraryInfo, QTranslator\nfrom PySide6.QtWidgets import (\nQApplication, QMessageBox, QMainWindow, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Aplicaci\u00f3n con mesaje cr\u00edtico\")\nboton = QPushButton(\"Haz clic para ver el mensaje cr\u00edtico\")\nboton.clicked.connect(self.mostrar_dialogo)\nself.setCentralWidget(boton)\ndef mostrar_dialogo(self):\n# Creamos un QMessageBox cr\u00edtico. Recibe como argumentos\n# El titulo, el mensaje, los botones y  el bot\u00f3n por defecto\nboton_pulsado = QMessageBox.critical(\nself,\n\"Ejemplo de cuadro de mensaje cr\u00edtico\",\n\"Ha hab\u00eddo algun problema al realizar la acci\u00f3n\",\nbuttons=QMessageBox.Discard | QMessageBox.NoToAll |\nQMessageBox.Ignore,\ndefaultButton=QMessageBox.Discard\n)\n# Comparamos el bot\u00f3n pulsado con cada tipo que les hemos pasado\nif boton_pulsado == QMessageBox.Discard:\nprint(\"Descartado!\")\nelif boton_pulsado == QMessageBox.NoToAll:\nprint(\"No a todo!\")\nelse:\nprint(\"Ignorado!\")\ndef cargar_traductor(app):\ntranslator = QTranslator(app)\ntranslations = QLibraryInfo.location(QLibraryInfo.TranslationsPath)\ntranslator.load(\"qt_ca\", translations)\napp.installTranslator(translator)\napp = QApplication([])\ncargar_traductor(app)\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s el seg\u00fcent:</p> <p></p>"},{"location":"unitats/3-GUI-PySide6/teoria/5%20-%20Dialegs/#53-altres-dialegs","title":"5.3 Altres di\u00e0legs","text":"<p>Hi ha altres tipus de di\u00e0legs que podeu trobar al m\u00f2dul QtWidgets. Aquests s\u00f3n m\u00e9s espec\u00edfics:</p> <ul> <li>QColorDialog: per especificar colors</li> <li>QFileDialog: per especificar fitxers o carpetes</li> <li>QFontDialog: per seleccionar les fonts</li> <li>QInputDialog: per demanar dades a l'usuari</li> <li>QProgressDialog: per informar del progr\u00e9s d'una operaci\u00f3 lenta</li> </ul> <p>Vegem uns simples exemples que poden resultar \u00fatils (ometem la part general de l'aplicaci\u00f3 per mostrar nom\u00e9s la part que ens interessa):</p> <p>Exemple d'altres di\u00e0legs</p> Obrir arxiuGuardar arxiuObtenir un colorObtenir una fontInformaci\u00f3 de l'usuariBarra de progr\u00e9s Python<pre><code>def mostrar_dialeg(self):\nfinestra_dialeg = QFileDialog.getOpenFileName(\nself, caption=\"Obrir fitxer...\", dir=\".\",\nfilter=\"Documents de text (*.txt);;Documents PDF (*.pdf)\",\nselectedFilter=\"Documents de text (*.txt)\")\nfitxer = finestra_dialeg[0]\n</code></pre> <p>NOTA: Si el fitxer ja existeix ens demana confirmaci\u00f3 de sobreescriptura Python<pre><code>def mostrar_dialeg(self):\nfinestra_dialeg = QFileDialog.getSaveFileName(\nself, caption=\"Desa fitxer ...\", dir=\".\",\nfilter=\"Documents de text (*.txt);;Documents PDF (*.pdf)\",\nselectedFilter=\"Documents de text (*.txt)\")\nfitxer = finestra_dialeg[0]\nprint(arxiu)\n</code></pre> </p> <p>Python<pre><code>def mostrar_dialeg(self):\ncolor = QColorDialog.getColor()\nif color.isValid():\n# Amb la seg\u00fcent l\u00ednia assignem el color seleccionat\n# com a color de fons del bot\u00f3 a trav\u00e9s de CSS\nself.boton.setStyleSheet(f\"background-color: {color.name()}\")\n</code></pre> </p> <p>Python<pre><code>def mostrar_dialeg(self):\nseleccionada, font = QFontDialog.getFont(self)\nif seleccionada:\n# Assignem la font seleccionada al bot\u00f3\nself.boton.setFont(font)\n</code></pre> </p> <p>Amb QInputDialog podem obtenir valors de l'usuari. Text amb getText, sencers amb getInt, ... </p> <p>A l'exemple obtenim el mes de naixement d'una llista de mesos i l'imprimim per consola:</p> <p>Python<pre><code>def mostrar_dialeg(self):\nmes, seleccionat = QInputDialog.getItem(\nself, \"Mes de naixement\",  \"Messos\",\n[\"Gener\", \"Febrer\", \"Mar\u00e7\", \"Abril\", \"Maig\",\n\"Juny\", \"Juliol\", \"Agost\", \"Setembre\",\n\"Octubre\", \"Novembre\", \"Desembre\"]\n)\nif seleccionat:\nprint(mes)\n</code></pre> </p> <p>Amb QProgressDialog podem mostrar la informaci\u00f3 de com avan\u00e7a un proc\u00e9s lent. Aquest tipus de processos s'haurien de llan\u00e7ar en un fil d'execuci\u00f3 perqu\u00e8 la interf\u00edcie no quede bloquejada en espera que el proc\u00e9s s'acabe. Simularem una c\u00f2pia de fitxers llan\u00e7ada amb un fil d'execuci\u00f3. El codi seg\u00fcent engloba conceptes del m\u00f2dul de Programaci\u00f3 de Serveis i Processos.</p> <p></p> Python<pre><code>import time\nfrom PySide6.QtCore import QThread, Signal\nfrom PySide6.QtWidgets import (\nQMainWindow, QPushButton, QProgressDialog, QApplication\n)\n# Classe Fil que simula un proc\u00e9s lent\nclass Hilo(QThread):\n# Senyal que transmet un nombre sencer al seu escoltador o ranura\nsenyal = Signal(int)\ndef __init__(self):\nsuper(Hilo, self).__init__()\nself.cancel\u00b7lat = False\ndef __del__(self):\nself.wait()\n# M\u00e8tode que s'executa en llan\u00e7ar el fil\n# Mentre no es cancel\u00b7li, el fil emetr\u00e0 un senyal amb un\n# sencer entre 0 i 10 cada 0,3 segons\ndef run(self):\nfor i in range(11):\nif not self.cancel\u00b7lat:\nself.senyal.emit(i)\ntime.sleep(0.5)\nelse:\nbreak\nclass FinestraPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle('Aplicaci\u00f3 amb QProgressDialog')\nself.boton = QPushButton('Clic per iniciar la c\u00f2pia de fitxers')\nself.boton.clicked.connect(self.mostrar_dialeg_progr\u00e9s)\nself.setCentralWidget(self.boton)\ndef mostrar_dialeg_progr\u00e9s(self):\n# Deshabilitem el bot\u00f3 per evitar que es llanci un altre fil\nself.boton.setEnabled(False)\n# Creem un QProgessDialog entre 0 i 10 i un bot\u00f3 Cancel\u00b7la\nself.barra_progr\u00e9s = QProgressDialog(\n\"Copiant fitxers ...\", \"Cancel\u00b7lar\", 0, 10, self)\nself.barra_progreso.setWindowTitle(\"Di\u00e0leg de progr\u00e9s\")\n# Connectem el senyal cancel\u00b7lat del QProgressDialog a la ranura\nself.barra_progreso.canceled.connect(self.cancelar)\n# Creem un fil d'execuci\u00f3\nself.fil = Fil()\n# Connectem el senyal del fil a la ranura\nself.fil.senyal.connect(self.senyal_rebuda)\n# Llancem l'execuci\u00f3 del fil\nself.fil.start()\n# Mostrem la barra de progr\u00e9s\nself.barra_progreso.show()\ndef senyal_rebuda(self, progr\u00e9s):\n# Quan rebem el senyal del fil, incrementem\n# el progr\u00e9s amb el valor rebut\nself.barra_progreso.setValue(int(progr\u00e9s))\n# Quan arribi al 100% esperem 0.5si tanquem el di\u00e0leg\nif int(progr\u00e9s) == 10:\ntime.sleep(0.5)\nself.barra_progreso.close()\n# En donar-li al bot\u00f3 cancel\u00b7lar del di\u00e0leg, aturem l'enviament de senyals.\n# El di\u00e0leg es tancar\u00e0 i el bot\u00f3 el tornem a habilitar\ndef cancel\u00b7lar(self):\nself.fil.cancel\u00b7lat = True\nself.boton.setEnabled(True)\nif __name__ == \"__main__\":\napp = QApplication([])\nfinestra_principal = FinestraPrincipal()\nfinestra_principal.show()\napp.exec()\n</code></pre>"},{"location":"unitats/3-GUI-PySide6/teoria/5%20-%20Dialegs/#54-altres-finestres","title":"5.4 Altres finestres","text":"<p>Fins ara hem vist diferents di\u00e0legs modals que executen al seu propi bucle d'esdeveniments i bloquegen la resta de l'aplicaci\u00f3. Per\u00f2 de vegades ens pot interessar obrir una altra finestra sense bloquejar la finestra principal.</p> <p>Finestres</p> <p>A Qt, qualsevol widget sense parent \u00e9s una finestra. Aix\u00f2, a efectes pr\u00e0ctics, vol dir que per mostrar una finestra nova, nom\u00e9s hem de crear un Widget i cridar al seu m\u00e8tode show(). Fixa't que fins i tot podr\u00edem crear una aplicaci\u00f3 amb diversos QMainWindows.</p> <p>Dues finestres en una mateixa aplicaci\u00f3</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget\n)\n# Clase que hereda de QLabel. Si no tiene parent,\n# se mostrar\u00e1 en una ventana flotante\nclass OtraVentana(QLabel):\ndef __init__(self):\nsuper().__init__()\nself.setText(\"La otra ventana\")\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\n# Necesitamos que la nueva ventana sea una propiedad de la clase,\n# de lo contrario se destruir\u00e1 al salir del m\u00e9todo donde se crea.\nself.otra_ventana = None  # Referencia nula\nself.setWindowTitle(\"Aplicaci\u00f3n con dos ventanas\")\nself.boton = QPushButton(\"Mostrar/ocultar otra ventana\")\nself.boton.clicked.connect(self.mostrar_otra_ventana)\nself.setCentralWidget(self.boton)\ndef mostrar_otra_ventana(self):\n# Si no est\u00e1 creada,la creamos una sola vez.\n# La desplazamos a la posici\u00f3n de la ventana principal y la mostramos.\nif self.otra_ventana is None:\nself.otra_ventana = OtraVentana()\nself.otra_ventana.move(self.pos())\nself.otra_ventana.show()\nelse:\n# Si est\u00e1 oculta la mostramos y si est\u00e1 visible la ocultamos.\nif self.otra_ventana.isHidden():\nself.otra_ventana.move(self.pos())\nself.otra_ventana.show()\nelse:\nself.otra_ventana.hide()\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre>"},{"location":"unitats/4-ModelView/enlla%C3%A7os/enlla%C3%A7os/","title":"Unitat 5 - Arquitectura Model-Vista","text":""},{"location":"unitats/4-ModelView/enlla%C3%A7os/enlla%C3%A7os/#enllacos-dinteres","title":"Enlla\u00e7os d'inter\u00e9s","text":"<ol> <li>Tutorial de l'arquitectura Model-View de la documentaci\u00f3 oficial de PySide6</li> </ol>"},{"location":"unitats/4-ModelView/tasques/1%20-%20Pr%C3%A0ctiques/","title":"Pr\u00e0ctiques","text":""},{"location":"unitats/4-ModelView/tasques/1%20-%20Pr%C3%A0ctiques/#aplicacio-de-llista-de-tasques-per-modul","title":"Aplicaci\u00f3 de llista de tasques per m\u00f2dul","text":"<p>Es pret\u00e9n desenvolupar una aplicaci\u00f3 que ens permeta gestionar les tasques per cadascun dels m\u00f2duls que estem cursant. A la finestra principal tindrem:</p> <ul> <li>A la part esquerra una llista de m\u00f2duls.</li> <li>A la part dreta una llista de tasques.</li> <li>Al fer clic sobre qualsevol dels m\u00f2duls es carregaran les tasques corresponents a eixe m\u00f2dul.</li> <li>L\u2019aplicaci\u00f3 ens permetr\u00e0 insertar, eliminar i editar tant els m\u00f2duls com les tasques.</li> <li>Abans d\u2019eliminar es demanar\u00e0 confirmaci\u00f3.</li> <li>La informaci\u00f3 estar\u00e0 guardada en una base de dades amb dos taules relacionades.</li> </ul> <p>Compte</p> <p>Hem d'aplicar el qu\u00e8 hem vist en la teoria d'aquesta unitat per millorar el codi de l'aplicaci\u00f3 que estavem desenvolupant, tant la part d'acc\u00e9s a les dades com el patr\u00f3 Model/View.</p> <p>Alguns m\u00e8todes \u00fatils per a realitzar la tasca seran model.setFilter, view.hideColumn, model.removeColumn...</p> <p>Com sempre, consulteu la documentaci\u00f3 de QSqlTableModel i QTableView per a m\u00e9s informaci\u00f3.</p>"},{"location":"unitats/4-ModelView/teoria/1-Introduccio/","title":"1 - Introducci\u00f3","text":""},{"location":"unitats/4-ModelView/teoria/1-Introduccio/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>Qualsevol aplicaci\u00f3 necessita dades per al seu funcionament. La gran majoria de vegades, estes dades residixen en una base de dades, per tant, necessitem la creaci\u00f3 d'aplicacions que les utilitzen.</p> <p>PySide t\u00e9 les seues pr\u00f2pies classes per ajudar-nos a crear, connectar-nos i gestionar les nostres bases de dades de manera coherent. </p> <p>En esta unitat aprendrem a:</p> <ul> <li>Utilitzar el suport SQL de PySide per connectar-nos a una base de dades.</li> <li>Executar consultes SQL en una base de dades mitjan\u00e7ant PySide.</li> <li>Utilitzar l'arquitectura Model-View de PySide en aplicacions de bases de dades.</li> <li>Mostrar i editar dades amb diferents widgets de PySide.</li> </ul> <p>Atenci\u00f3</p> <p>Aquesta unitat requereix un coneixement b\u00e0sic del llenguatge SQL.</p>"},{"location":"unitats/4-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/","title":"2 - Connexi\u00f3 a base de dades","text":""},{"location":"unitats/4-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#connexio-a-una-base-de-dades-sql-des-de-python","title":"Connexi\u00f3 a una base de dades SQL des de Python","text":"<p>\u00das de llibreries per a gestionar bases de dades</p> <p>Podr\u00edem utilitzar llibreries espec\u00edfiques de python3 per gestionar bases de dades, per\u00f2 en esta unitat utilitzarem la tecnologia pr\u00f2pia de Qt. A\u00e7\u00f2 ens ajudar\u00e0 a aprofitar la integraci\u00f3 entre les classes SQL de PySide i l'arquitectura Model-View. A m\u00e9s, no afegirem depend\u00e8ncies addicionals a la nostra aplicaci\u00f3. Per exemple, no utilitzarem el m\u00f2dul sqlite3 per gestionar una base de dades SQLite3, sin\u00f3 que utilitzarem les classes que ens proporciona PySide6.</p>"},{"location":"unitats/4-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#creacio-duna-connexio-de-base-de-dades","title":"Creaci\u00f3 d'una connexi\u00f3 de base de dades","text":"<p>Per connectar a base de dades necessiten informaci\u00f3 general sobre la seua configuraci\u00f3:</p> <ul> <li>El sistema de gesti\u00f3 de bases de dades (SGBD)</li> <li>El nom d'usuari</li> <li>La contrasenya</li> <li>El host on est\u00e0 allotjada</li> </ul> <p>Nosaltres utilitzarem SQLite 3 per la seua baixa configuraci\u00f3 requerida, ja que ens permet llegir i escriure directament a les bases de dades allotjades al disc dur, sense necessitat d'un proc\u00e9s de servidor separat. </p> <p>Un altre avantatge \u00e9s que la seua llibreria est\u00e0 inclosa a les llibreries est\u00e0ndars de Python3 i tamb\u00e9 a PySide, de manera que no cal que instal\u00b7leu res m\u00e9s per comen\u00e7ar a treballar amb elles.</p>"},{"location":"unitats/4-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#la-classe-qsqldatabase","title":"La classe QSqlDatabase","text":"<p>A PySide, podeu crear una connexi\u00f3 de base de dades mitjan\u00e7ant la classe QSqlDatabase. Aquesta classe representa una connexi\u00f3 i proporciona una interf\u00edcie per accedir a la base de dades. </p> <p>Per crear una connexi\u00f3, utilitzarem el m\u00e8tode .addDatabase() que rep com a arguments:</p> <ul> <li>Un driver SQL, string amb el nom del controlador compatible amb PySide</li> <li>Un nom de connexi\u00f3 (opcional). En cas de no passar-lo, s'assinar\u00e0 el nom per defecte qt_sql_default_connection.</li> </ul> Python<pre><code>QSqlDatabase.addDatabase(\ndriver, connectionName=QSqlDatabase.defaultConnection\n)\n</code></pre> <p>Els drivers d'SQL disponibles a PySide6 s\u00f3n els seg\u00fcents:</p> Nom del driver Sistema de gesti\u00f3 de bases de dades QDB2 IBM Db2 (versi\u00f3 7.1 i posterior) QIBASE Borland InterBase QMYSQL/M ARIADB   MySQL o MariaDB (versi\u00f3 5.0 i superior) QOCI Interf\u00edcie de crides d'Oracle QODBC Connectivitat de base de dades oberta (ODBC) QPSQL PostgreSQL (versions 7.3 i posteriors) QSQLITE2 SQLite 2 (obsolet des de Qt 5.14) QSQLITE SQLite 3 QTDS Sybase Adaptive Server (obsolet des de Qt 4.7) <p>Si ja teniu una connexi\u00f3 amb el mateix nom, se sobreescriur\u00e0.</p> <p>El m\u00e8tode .addDatabase() afig una connexi\u00f3 de base de dades a una llista de connexions disponibles. Aquesta llista \u00e9s un registre global que PySide mant\u00e9 amb les connexions disponibles en una aplicaci\u00f3.</p> <p>Un vegada creada una connexi\u00f3, podem d'establir diversos atributs que dependran del controlador que utilitzem. En general, haurem d'establir el host, el nom de la base de dades, el nom d'usuari i la contrasenya per accedir a la base de dades. Per fer-ho utilitzarem els m\u00e8todes .setHostName(host), .setDatabaseName(name), .setUserName(username) i .setPassword(password) respectivament.</p> <p>Contrasenya de connexi\u00f3</p> <p>La contrasenya qu\u00e8 passeu com a argument a .setPassword() s'emmagatzema en text sense format i es pot recuperar m\u00e9s tard amb el m\u00e8tode .password(). Aquest \u00e9s un risc de seguretat greu que haur\u00edeu d'evitar introduir a les vostres aplicacions de base de dades. Aprendrem a fer-ho m\u00e9s segur m\u00e9s endavant.</p> <p>En el cas de les bases de dades SQLite, el nom de la base de dades \u00e9s normalment un nom de fitxer o una ruta que inclou el nom del fitxer de la base de dades. Tamb\u00e9 podem utilitzar el nom especial :memory: per a una base de dades allotjada en mem\u00f2ria, de forma que evitem accessos a disc que s\u00f3n molt m\u00e9s lents.</p> Python<pre><code>from PySide6.QtSql import QSqlDatabase\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\"contacts.sqlite\")\ndatabase_name = connection.databaseName()\nconnection_name = connection.connectionName()\n</code></pre>"},{"location":"unitats/4-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#gestio-de-multiples-connexions","title":"Gesti\u00f3 de m\u00faltiples connexions","text":"<p>Potser necessitem utilitzar diverses connexions. Per exemple, \u00e9s possible que vulgam registrar les interaccions dels usuaris amb la base de dades mitjan\u00e7ant una connexi\u00f3 espec\u00edfica per a cada usuari o que la nostra aplicaci\u00f3 haja de connectar a diverses bases de dades per recollir informaci\u00f3 i actualitzar les dades locals.</p> <p>Per gestionar aquestes situacions, podem proporcionar noms espec\u00edfics per a les nostres connexions i fer refer\u00e8ncia a cada connexi\u00f3 pel seu nom.</p> Python<pre><code>from PySide6.QtSql import QSqlDatabase\nconnection1 = QSqlDatabase.addDatabase(\"QSQLITE\", \"connection1\")\nconnection1.setDatabaseName(\"contacts.sqlite\")\nconnection2 = QSqlDatabase.addDatabase(\"QSQLITE\", \"connection2\")\nconnection2.setDatabaseName(\"contacts.sqlite\")\ndatabase_name1 = connection1.databaseName()\nconnection_name1 = connection1.connectionName()\ndatabase_name2 = connection2.databaseName()\nconnection_name2 = connection2.connectionName()\n</code></pre>"},{"location":"unitats/4-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#obertura-duna-connexio-de-base-de-dades","title":"Obertura d'una connexi\u00f3 de base de dades","text":"<p>Una vegada establida la connexi\u00f3, hem d'obrir aquesta connexi\u00f3 per poder interactuar amb la nostra base de dades. Per fer-ho, utilitzem el m\u00e8tode .open() de la connexi\u00f3. Es pot utilitzar de dues formes:</p> <ul> <li>.open() obre una connexi\u00f3 de base de dades utilitzant els valors de connexi\u00f3 actuals.</li> <li>.open(username, password) obre una connexi\u00f3 a la base de dades mitjan\u00e7ant el fitxer username i password.</li> </ul> <p>El m\u00e8tode torna  True si la connexi\u00f3 t\u00e9 \u00e8xit. En cas contrari, torna False. En cas de no poder establir la connexi\u00f3, podeu utilitzar .lastError() per obtenir informaci\u00f3 sobre el que ha passat.</p> <p>Note</p> <p>.setPassword(password) emmagatzema les contrasenyes com a text sense format, la qual cosa suposa un risc de seguretat. D'altra banda, .open() no emmagatzema mai les contrasenyes, sin\u00f3 que la passa directament al controlador en obrir la connexi\u00f3. Despr\u00e9s d'aix\u00f2, descarta la contrasenya. Per tant, utilitzar .open() per gestionar les nostres contrasenyes \u00e9s el cam\u00ed a seguir si voleu evitar problemes de seguretat.</p> <p>Note</p> <p>En utilitzar .open() amb una connexi\u00f3 que utilitza el controlador SQLite, si el fitxer de base de dades no existeix, es crear\u00e0 autom\u00e0ticament un fitxer de base de dades nou i buit.</p> <p>Hauriem d'assegurar-nos que tenim una connexi\u00f3 v\u00e0lida abans d'intentar fer qualsevol operaci\u00f3 amb les nostres dades. En cas contrari, la nostra aplicaci\u00f3 pot fallar. </p> <p>Per exemple, qu\u00e8 passa si no tenim permisos d'escriptura per al directori en qu\u00e8 estem intentant crear aquest fitxer de base de dades? Hem d'assegurar-nos que estem gestionant qualsevol error que es puga produir en obrir una connexi\u00f3.</p> <p>Una manera habitual d'utilitzar .open() \u00e9s la seg\u00fcent:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase\nfrom PySide6.QtWidgets import QApplication, QMessageBox, QLabel\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\")\n)\n# connection.setDatabaseName(\"/contacts.sqlite\")\napplication = QApplication(sys.argv)\nif not connection.open():\nQMessageBox.critical(\nNone,\n\"Error connectant a la base de dades!\",\n\"Database Error: %s\" % connection.lastError().databaseText(),\n)\nsys.exit(1)\nwindow = QLabel(\"Connectat a la base de dades!\")\nwindow.setWindowTitle(\"Database open\")\nwindow.resize(200, 100)\nwindow.show()\nsys.exit(application.exec_())\n</code></pre>"},{"location":"unitats/4-ModelView/teoria/3-Execucio%20de%20consultes/","title":"Execucio de consultes SQL amb PySide","text":"<p>Amb una connexi\u00f3 de base de dades ja podem comen\u00e7ar a treballar amb la nostra base de dades. </p> <p>Per fer-ho, podem utilitzar consultes i objectes QSqlQuery basats en strings. QSqlQuery ens permet executar qualsevol classe de consulta SQL a la nostra base de dades, ja siguen sent\u00e8ncies de llenguatge de manipulaci\u00f3 de dades (DML), com ara SELECT, INSERT, UPDATE i DELETE, o sent\u00e8ncies de llenguatge de definici\u00f3 de dades (DDL), com ara CREATE TABLE, etc.</p> <p>QSqlQuery t\u00e9 diversos constructors:</p> <ul> <li>QSqlQuery(query, connection) construeix un objecte de consulta mitjan\u00e7ant una cadena SQL query i una connexi\u00f3 a base de dades connection. Si no especifiqueu una connexi\u00f3, o si la connexi\u00f3 especificada no \u00e9s v\u00e0lida, s'utilitzar\u00e0 la connexi\u00f3 de base de dades per defecte. Si query no \u00e9s una cadena buida, s'executar\u00e0 immediatament.</li> <li>QSqlQuery(connection) construeix un objecte de consulta utilitzant connection.</li> <li>QSqlQuery() la consulta utilitzar\u00e0 la connexi\u00f3 de base de dades predeterminada, si n'hi ha.</li> </ul> <p>Per executar una consulta, utilitzem .exec() de l'objecte de consulta. Torna True si la consulta ha tingut \u00e8xit i, en cas contrari, torna False. Podem utilitzar .exec() de dues maneres diferents:</p> <ul> <li>.exec(query) executa la consulta SQL basada en cadenes continguda a query. </li> <li>.exec() executa una consulta SQL preparada pr\u00e8viament.</li> </ul>"},{"location":"unitats/4-ModelView/teoria/3-Execucio%20de%20consultes/#consultes-estatiques","title":"Consultes est\u00e0tiques","text":"<p>Una consulta est\u00e0tica \u00e9s aquella que no obt\u00e9 ningun argument de fora de la consulta.</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\n# Create the connection\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\n# Open the connection\nif not con.open():\nprint(\"Database Error: %s\" % con.lastError().databaseText())\nsys.exit(1)\n# Create a query and execute it right away using .exec()\ncreateTableQuery = QSqlQuery()\ncreateTableQuery.exec(\n\"\"\"\n    CREATE TABLE contacts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\n        name VARCHAR(40) NOT NULL,\n        job VARCHAR(50),\n        email VARCHAR(40) NOT NULL\n    )\n    \"\"\"\n)\nprint(con.tables())\n</code></pre>"},{"location":"unitats/4-ModelView/teoria/3-Execucio%20de%20consultes/#consultes-dinamiques-formatacio-de-cadena","title":"Consultes din\u00e0miques: formataci\u00f3 de cadena","text":"<p>Les consultes que accepten par\u00e0metres en el moment de l'execuci\u00f3 es coneixen com a consultes din\u00e0miques. L'\u00fas de par\u00e0metres ens permet ajustar la consulta i recuperar dades en resposta a valors de par\u00e0metres determinats. Valors diferents produiran resultats diferents. </p> <p>Hi ha dues formes de construir la consulta utilitzant els valors dels par\u00e0metres d'entrada:</p> <ul> <li>Crear la consulta de manera din\u00e0mica, utilitzant el format de cadena per interpolar els valors dels par\u00e0metres.</li> <li>Preparar la consulta utilitzant par\u00e0metres de marcador de posici\u00f3 i, a continuaci\u00f3, enlla\u00e7ar els valors espec\u00edfics als par\u00e0metres.</li> </ul> <p>Vulnerabilitat de les consultes construides mitjan\u00e7ant cadenes</p> <p>El primer enfocament ens permet crear consultes din\u00e0miques r\u00e0pidament. Per\u00f2 la nostra base de dades quedar\u00e0 exposada a atacs d'injecci\u00f3 SQL, podent aix\u00ed quedar la informaci\u00f3 compromesa.</p> <p>Ac\u00ed tenim un exemple de construcci\u00f3 de la consulta utilitzant la formataci\u00f3 de cadenes de text:</p> Python<pre><code>name = \"Ferran\"\njob = \"Professor\"\nemail = \"ferran@example.com\"\nquery = QSqlQuery()\nquery.exec(\nf\"\"\"INSERT INTO contacts (name, job, email)\n    VALUES ('{name}', '{job}', '{email}')\"\"\"\n)\n</code></pre> <p>\u00das de cometes simples en la construcci\u00f3 de la consulta</p> <p>Perqu\u00e8 aquest tipus de consulta din\u00e0mica funcione, hem d'assegurar-nos que els valors que s'han d'inserir tinguen el tipus de dades adequat. Per tant, utilitzem cometes simples al voltant del marcador de posici\u00f3 de la cadena f perqu\u00e8 aquests valors han de ser cadenes.</p>"},{"location":"unitats/4-ModelView/teoria/3-Execucio%20de%20consultes/#consultes-dinamiques-parametres-de-marcador-de-posicio","title":"Consultes din\u00e0miques: par\u00e0metres de marcador de posici\u00f3","text":"<p>El segon enfocament per executar consultes din\u00e0miques requereix que preparem les consultes pr\u00e8viament utilitzant una plantilla amb marcadors de posici\u00f3 per als par\u00e0metres. PySide admet dos estils de marcador de posici\u00f3 de par\u00e0metres:</p> <ul> <li>L'estil Oracle, que utilitza marcadors de posici\u00f3 amb nom com ara :name o :email.</li> <li>L'estil ODBC, utilitza un signe d'interrogaci\u00f3 (?) com a marcador de posici\u00f3.</li> </ul> <p>Per crear aquest tipus de consulta din\u00e0mica, primer creem una plantilla amb un marcador de posici\u00f3 per a cada par\u00e0metre de consulta i despr\u00e9s passem aquesta plantilla com a argument al m\u00e8tode .prepare(), que analitza, compila i prepara la plantilla de consulta per a l'execuci\u00f3. Si la plantilla t\u00e9 problemes, com ara un error de sintaxi SQL, no es pot compilar la plantilla i retorna False.</p> <p>Si el proc\u00e9s de preparaci\u00f3 t\u00e9 \u00e8xit, .prepare() torna True. Despr\u00e9s d'aquest pas, estem en situaci\u00f3 de poder passar un valor espec\u00edfic a cada par\u00e0metre amb:</p> <ul> <li>.bindValue() amb nom o posicionals o </li> <li>.addBindValue() amb par\u00e0metres posicionals. </li> </ul> <p>.bindValue() t\u00e9 les dues variants seg\u00fcents:</p> <ul> <li>.bindValue(placeholder, val)</li> <li>.bindValue(pos, val)</li> </ul> <p>A la primera variaci\u00f3, placeholder representa un marcador de posici\u00f3 d'estil Oracle. En la segona variaci\u00f3, pos representa un nombre enter amb la posici\u00f3 d'un par\u00e0metre a la consulta, comen\u00e7ant pel 0. En ambdues variacions, val mant\u00e9 el valor que s'ha d'enlla\u00e7ar a un par\u00e0metre espec\u00edfic.</p> <p>.addBindValue() afegeix un valor a la llista de marcadors de posici\u00f3 mitjan\u00e7ant l'enlla\u00e7 posicional. Aix\u00f2 vol dir que l'ordre de les crides a .addBindValue() determina quin valor s'associar\u00e0 a cada par\u00e0metre de marcador de posici\u00f3 a la consulta preparada.</p> <p>Per comen\u00e7ar a utilitzar consultes preparades, podeu preparar un INSERT INTO per omplir la vostra base de dades amb algunes dades de mostra. Ampliem l'exemple anterior:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\n# Create the connection\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\n# Open the connection\nif not con.open():\nprint(\"Database Error: %s\" % con.lastError().databaseText())\nsys.exit(1)\n# Create a query and execute it right away using .exec()\ncreateTableQuery = QSqlQuery()\ncreateTableQuery.exec(\n\"\"\"\n    CREATE TABLE contacts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\n        name VARCHAR(40) NOT NULL,\n        job VARCHAR(50),\n        email VARCHAR(40) NOT NULL\n    )\n    \"\"\"\n)\ninsertDataQuery = QSqlQuery()\n# Estil OBDC\nprepared = insertDataQuery.prepare(\n\"\"\"\n    INSERT INTO contacts (\n        name,\n        job,\n        email\n    )\n    VALUES (?, ?, ?)\n    \"\"\"\n)\nif prepared:\ndata = [\n(\"Lara\", \"Senior Web Developer\", \"lara@example.com\"),\n(\"David\", \"Project Manager\", \"david@example.com\")\n]\n# Inserci\u00f3 amb addBindValue\nfor name, job, email in data:\ninsertDataQuery.addBindValue(name)\ninsertDataQuery.addBindValue(job)\ninsertDataQuery.addBindValue(email)\ninsertDataQuery.exec()\ninsertDataQuery = QSqlQuery()\n# Estil Oracle\nprepared = insertDataQuery.prepare(\n\"\"\"\n    INSERT INTO contacts (\n        name,\n        job,\n        email\n    )\n    VALUES (:name, :job, :email)\n    \"\"\"\n)\nif prepared:\ndata = [\n(\"Davinia\", \"Data Analyst\", \"davinia@example.com\"),\n(\"Juli\", \"Senior Python Developer\", \"juli@example.com\")\n]\nfor name, job, email in data:\ninsertDataQuery.bindValue(2, email)  # Inserci\u00f3 per posici\u00f3\ninsertDataQuery.bindValue(\":job\", job)  # Inserci\u00f3 amb placeholder\ninsertDataQuery.bindValue(\":name\", name)\ninsertDataQuery.exec()\n</code></pre> <p>Nota</p> <p>Fixeu-se a les l\u00ednies 32 i 68, on s'han utilitzat els dos estils de preparaci\u00f3 de sent\u00e8ncia SQL. Fixeu-se tamb\u00e9 a les l\u00ednies 50-53, on s'est\u00e0 utilitzant la posici\u00f3 per a inserir amb addBindValue. Mentre que a les l\u00ednies 75-78, s'est\u00e0 utilitzant els placeholders i la posici\u00f3 per a fer binding.</p> <p>Aquest enfocament per crear consultes din\u00e0miques \u00e9s \u00fatil quan voleu personalitzar les vostres consultes utilitzant valors que provenen de l'entrada de l'usuari.</p> <p>Injecci\u00f3 d'SQL</p> <p>Recordeu que cada vegada que utilitzeu l'entrada de l'usuari per completar una consulta en una base de dades, us enfronteu al risc de seguretat de la injecci\u00f3 SQL.</p> <p>A PySide, la combinaci\u00f3 de .prepare(), .bindValue(), i .addBindValue() us protegeix completament dels atacs d'injecci\u00f3 SQL, de manera que aquesta \u00e9s la manera correcta d'utilitzar entrades no fiables per completar les vostres consultes.</p>"},{"location":"unitats/4-ModelView/teoria/3-Execucio%20de%20consultes/#navegacio-pels-registres-en-una-consulta","title":"Navegaci\u00f3 pels registres en una consulta","text":"<p>Si executem una SELECT, el nostre objecte QSqlQuery mantindr\u00e0 registres que complisquen amb els criteris de la consulta. Si cap dada coincideix amb els criteris, la nostra consulta estar\u00e0 buida.</p> <p>QSqlQuery proporciona un conjunt de m\u00e8todes que ens permeten navegar a trav\u00e9s dels registres, o files, resultat d'una consulta:</p> M\u00e8tode Navega a ... .next() El seg\u00fcent registre .previous() El registre anterior .first() El primer registre .last() L'\u00faltim registre .seek(index, relative=False) El registre en la posici\u00f3 index <p>Per a accedir als valors dels registres o columnes, els seg\u00fcents m\u00e8todes tamb\u00e9 ens poden ser \u00fatils:</p> M\u00e8tode Recupera .value(index) El valor de la columna index .record() El registre actual .indexOf(column) L'\u00edndex de la columna column. -1 si no existeix <p>Tots els m\u00e8todes tornen True o False, i ens permeten navegar a trav\u00e9s del resultat d'una consulta sense haver de consultar de nou la base de dades. Els podem utilitzar en bucles per rec\u00f3rrer tots els registres.</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\")\n)\nif not connection.open():\nprint(\"Error connectant a la base de dades!\",\nf\"Database Error: {connection.lastError().databaseText()}\")\nsys.exit(1)\nelse:  # Connected\nquery = QSqlQuery()\nif query.exec(\"SELECT name, job, email FROM contacts\"):\nwhile query.next():\nprint(\nf\"Nom: {query.value('name')} \\tTreball: {query.value('job')} \\tCorreu: {query.value('email')}\")\nquery.finish()\n</code></pre> <p>Tancament de la consulta</p> <p>Tingau en compte que mentre tenim una consulta activa, l'acc\u00e9s a la base de dades estar\u00e0 bloquejat i des d'una aplicaci\u00f3 externa no es podran modificar els seus registres fins que la desactivem. Per fer-ho, i a m\u00e9s alliberar la mem\u00f2ria que t\u00e9 associada, utilitzem el m\u00e8tode .finish(). </p> <p>Pots fer la prova posant un punt d'interrupci\u00f3 al while i amb una altra aplicaci\u00f3 intentar modificar els registres. Et donar\u00e0 un error:</p> <p>SQL Error [5]: [SQLITE_BUSY] The database file is locked (database is locked).</p>"},{"location":"unitats/4-ModelView/teoria/3-Execucio%20de%20consultes/#tancament-i-eliminacio-de-connexions-de-base-de-dades","title":"Tancament i eliminaci\u00f3 de connexions de base de dades","text":"<p>Per tancar una connexi\u00f3 a PySide, utilitzem el m\u00e8tode .close() de la connexi\u00f3. Aquest m\u00e8tode tanca la connexi\u00f3 i allibera els recursos adquirits. Tamb\u00e9 invalida els objectes QSqlQuery associats perqu\u00e8 no poden funcionar correctament sense una connexi\u00f3 activa. Amb el m\u00e8tode .isOpen() podem comprovar si la connexi\u00f3 est\u00e0 oberta o no.</p> <p>Tancament de connexions</p> <p>Tingueu en compte que els objectes QSqlQuery queden a la mem\u00f2ria despr\u00e9s de tancar la seua connexi\u00f3 associada, de manera que hem d'inactivar les consultes amb .finish() o .clear(), o suprimir l'objecte QSqlQuery abans de tancar la connexi\u00f3.</p> <p>Reutilitzaci\u00f3 de connexions</p> <p>Podem reobrir i reutilitzar qualsevol connexi\u00f3 pr\u00e8viament tancada ja que .close() no elimina les connexions de la llista de connexions disponibles.</p> <p>Tamb\u00e9 podem eliminar completament les connexions de la nostra base de dades mitjan\u00e7ant .removeDatabase().</p> <p>En definitiva, primer tanquem les consultes amb .finish(), despr\u00e9s tanqueu la base de dades amb .close(), i finalment eliminem la connexi\u00f3 amb .removeDatabase().</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\")\n)\nif not connection.open():\nprint(\"Error connectant a la base de dades!\",\nf\"Database Error: {connection.lastError().databaseText()}\")\nsys.exit(1)\nelse:  # Connected\nquery = QSqlQuery()\nif query.exec(\"SELECT name, job, email FROM contacts\"):\nwhile query.next():\nprint(\nf\"Nom: {query.value('name')} \\tTreball: {query.value('job')} \\tCorreu: {query.value('email')}\")\nquery.finish()\nconnection.close()\nprint(\"Connexions disponibles: {}\".format(QSqlDatabase.connectionNames()))\nQSqlDatabase.removeDatabase(QSqlDatabase.database().connectionName())\nprint(\"Connexions disponibles: {}\".format(QSqlDatabase.connectionNames()))\n</code></pre>"},{"location":"unitats/4-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/","title":"Visualitzaci\u00f3 i edici\u00f3 de dades amb PySide","text":"<p>Un requisit com\u00fa a les aplicacions GUI que utilitzen bases de dades \u00e9s la capacitat de carregar, mostrar i editar dades de la base de dades mitjan\u00e7ant diferents Widgets.Els que se solen utilitzar s\u00f3n les taules, les llistes, els arbres i les llistes desplegables.</p> <p>PySide ofereix dos tipus diferents de Widgets per gestionar dades:</p> <ul> <li>Els Widgets est\u00e0ndard inclouen contenidors interns per emmagatzemar dades.</li> <li>Els widgets de visualitzaci\u00f3 no mantenen contenidors de dades interns, sin\u00f3 que utilitzen models per accedir a les dades.</li> </ul> <p>El segon enfocament aprofita la programaci\u00f3 Model-View de PySide. Amb aquest enfocament, tenim Widgets que representen vistes com ara taules, llistes i arbres i classes model que es comuniquen amb les vostres dades.</p>"},{"location":"unitats/4-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#arquitectura-model-view-de-pyside","title":"Arquitectura Model-View de PySide","text":"<p>El patr\u00f3 de disseny Model-View-Controller (MVC) \u00e9s un patr\u00f3 destinat a dividir el codi d'una aplicaci\u00f3 en tres capes generals, cadascuna amb una funci\u00f3 diferent.</p> <p>El model s'ocupa de la l\u00f2gica de l'aplicaci\u00f3, la vista proporciona representacions en pantalla i el controlador connecta el model i la vista per fer que l'aplicaci\u00f3 funcione correctament, mantenint la persist\u00e8ncia de les dades.</p> <p>Qt proporciona una variaci\u00f3 personalitzada de MVC. L'anomenen arquitectura Model-View i tamb\u00e9 est\u00e0 disponible per a PySide. El patr\u00f3 tamb\u00e9 separa la l\u00f2gica en tres components:</p> <ul> <li> <p>Els models es comuniquen amb les dades i accedeixen a elles. Tamb\u00e9 defineixen una interf\u00edcie que utilitzen les vistes i els delegats per accedir a les dades. Tots els models es basen en QAbstractItemModel. Alguns models que s'utilitzen habitualment inclouen QStandardItemModel, QFileSystemModel, i models relacionats amb SQL.</p> </li> <li> <p>Les vistes s\u00f3n les responsables de mostrar les dades a l'usuari. Tamb\u00e9 tenen una funcionalitat similar al controlador en el patr\u00f3 MVC. Totes les vistes es basen en QAbstractItemView. Algunes vistes d'\u00fas habitual s\u00f3n QListView, QTableView i QTreeView.</p> </li> <li> <p>Els Delegats presenten els elements a les vistes i proporcionen widgets per poder modificar-los. Tamb\u00e9 es comuniquen amb el model si s'ha modificat un element. La classe base \u00e9s QAbstractItemDelegate.</p> </li> </ul> <p>La separaci\u00f3 de classes en aquests tres components implica que els canvis en els models es reflectiran autom\u00e0ticament en les vistes, i els canvis en les vistes o a trav\u00e9s dels delegats actualitzaran el model autom\u00e0ticament.</p> <p>A m\u00e9s, podem mostrar les mateixes dades en diferents vistes amb un \u00fanic model.</p>"},{"location":"unitats/4-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-components-estandard","title":"\u00das de components est\u00e0ndard","text":"<p>PySide ofereix diversos components est\u00e0ndard per mostrar i editar dades a les vostres aplicacions. Aquests proporcionen vistes com ara taules, arbres i llistes. Tamb\u00e9 proporcionen un contenidor intern per emmagatzemar dades i delegats convenients per editar-les. Totes aquestes caracter\u00edstiques s'agrupen en una sola classe.</p> <p>Hi ha tres d'aquestes classes est\u00e0ndards:</p> <ul> <li>QListWidget -&gt; llista d'elements</li> <li>QTreeWidget -&gt; arbre jer\u00e0rquic d'elements</li> <li>QTableWidget -&gt; taula d'elements</li> <li>QTableWidget \u00e9s el m\u00e9s \u00fatil quan es tracta de mostrar i editar dades. Crea una matriu 2D d'objectes  QTableWidgetItem. Cada element t\u00e9 un valor individual en forma d'string i aquests valors es mostren en cel\u00b7les que s'organitzen en una taula de files i columnes.</li> </ul> <p>Les operacions m\u00e9s importants que podem realitzar sobre ells s\u00f3n:</p> <ul> <li>Edici\u00f3 del contingut dels seus elements mitjan\u00e7ant objectes delegats</li> <li>Afegir nous elements utilitzant .setItem()</li> <li>Configurar el nombre de files i columnes mitjan\u00e7ant .setRowCount() i.setColumnCount()</li> <li>Afegir etiquetes de cap\u00e7alera verticals i horitzontals amb setHorizontalHeaderLabels() i .setVerticalHeaderLabels</li> </ul> <p></p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\nfrom PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQMessageBox,\nQTableWidget,\nQTableWidgetItem,\n)\nclass Contacts(QMainWindow):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"QTableView Example\")\nself.resize(450, 250)\n# Set up the view and load the data\nself.view = QTableWidget()\nself.view.setColumnCount(4)\nself.view.setHorizontalHeaderLabels([\"ID\", \"Name\", \"Job\", \"Email\"])\nquery = QSqlQuery(\"SELECT id, name, job, email FROM contacts\")\nwhile query.next():\nrows = self.view.rowCount()\nself.view.setRowCount(rows + 1)\nself.view.setItem(rows, 0, QTableWidgetItem(str(query.value(0))))\nself.view.setItem(rows, 1, QTableWidgetItem(query.value(1)))\nself.view.setItem(rows, 2, QTableWidgetItem(query.value(2)))\nself.view.setItem(rows, 3, QTableWidgetItem(query.value(3)))\nself.view.resizeColumnsToContents()\nself.setCentralWidget(self.view)\nquery.finish()\nQSqlDatabase.removeDatabase(QSqlDatabase.database().connectionName())\ndef createConnection():\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(os.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\nif not con.open():\nQMessageBox.critical(\nNone,\n\"QTableView Example - Error!\",\n\"Database Error: %s\" % con.lastError().databaseText(),\n)\nreturn con\napp = QApplication(sys.argv)\nconnection = createConnection()\nif not connection.isOpen():\nsys.exit(1)\nwin = Contacts()\nwin.show()\nQSqlDatabase.removeDatabase(QSqlDatabase.database().connectionName())\nsys.exit(app.exec())\n</code></pre> <p>Mostrar i editar taules de bases de dades amb Widgets est\u00e0ndard \u00e9s una tasca dif\u00edcil, ja que tindrem dues c\u00f2pies de les mateixes dades que haurem de sincronitzar per mantindre la coher\u00e8ncia entre les dades i les visualitzacions:</p> <ul> <li>A la nostra base de dades</li> <li>Al widget, als contenidors interns, normalment propietats d'aquest</li> </ul> <p>Si seguim aquet patr\u00f3, som responsables de sincronitzar les dues c\u00f2pies de les nostres dades manualment, cosa que pot ser una operaci\u00f3 molesta i propensa a errors. Afortunadament, podem utilitzar l'arquitectura Model-View de PySide per evitar la majoria d'aquests problemes.</p>"},{"location":"unitats/4-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-components-amb-patro-model-view","title":"\u00das de components amb patr\u00f3 Model-View","text":"<p>Les classes que seguixen el patr\u00f3 Model-View de PySide eliminen els problemes de duplicaci\u00f3 i sincronitzaci\u00f3 de dades que es poden produir quan s'utilitzen classes est\u00e0ndard per crear aplicacions de bases de dades. L'arquitectura Model-View ens permet utilitzar diverses vistes per mostrar les mateixes dades perqu\u00e8 podem passar un model a moltes vistes.</p> <ul> <li>Les classes model proporcionen una interf\u00edcie de programaci\u00f3 d'aplicacions (API) que podem utilitzar per manipular dades. </li> <li>Les classes de visualitzaci\u00f3 proporcionen objectes delegats convenients que podem utilitzar per editar dades a la vista directament. </li> </ul> <p>Definim el model</p> <p>Per connectar una vista amb un m\u00f2dul determinat, heu de fer una crida .setModel() de l'objecte de vista.</p> <p>PySide ofereix un conjunt de classes de vista que admeten l'arquitectura Model-View:</p> <ul> <li>QListView -&gt; llista d'elements que prenen valors directament d'una classe model</li> <li>QTreeView -&gt; arbre jer\u00e0rquic d'elements que prenen valors directament d'una classe model</li> <li>QTableView -&gt; taula d'elements que prenen valors directament d'una classe model</li> </ul> <p>Podem utilitzar aquestes classes de vista juntament amb classes de model per crear les nostres aplicacions de base de dades. Aix\u00f2 far\u00e0 que siguen m\u00e9s robustes, m\u00e9s r\u00e0pides de codificar i menys propenses a errors.</p> <p>Aquestes s\u00f3n algunes de les classes models que proporciona PySide per treballar amb bases de dades SQL:</p> <ul> <li>QSqlQueryModel -&gt; model de dades de nom\u00e9s lectura per a consultes SQL</li> <li>QSqlTableModel -&gt; model de dades editable per llegir i escriure registres en una \u00fanica taula</li> <li>QSqlRelationalTableModel -&gt; model de dades editable per llegir i escriure registres en una taula relacional</li> </ul> <p>Una vegada connectat un d'aquests models a una taula o consulta de base de dades, podem utilitzar-los per omplir les nostres visualitzacions. Les vistes proporcionen objectes delegats que ens permeten modificar les dades directament a la vista. El model connectat a la vista actualitzar\u00e0 les dades de la vostra base de dades per reflectir qualsevol canvi a la vista. Tingueu en compte que no cal que actualitzem les dades de la base de dades manualment. El model ho far\u00e0 per nosaltres.</p> <p>Aqu\u00ed hi ha un exemple que mostra els conceptes b\u00e0sics de com utilitzar un QTableView i un QSqlTableModel junts per crear una aplicaci\u00f3 de base de dades mitjan\u00e7ant l'arquitectura Model-View de PySide:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtSql import QSqlDatabase, QSqlTableModel\nfrom PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQMessageBox,\nQTableView,\n)\nclass Contacts(QMainWindow):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"QTableView Example\")\nself.resize(415, 200)\n# Set up the model\nself.model = QSqlTableModel(self)\nself.model.setTable(\"contacts\")\nself.model.setEditStrategy(QSqlTableModel.OnFieldChange)\nself.model.setHeaderData(0, Qt.Horizontal, \"ID\")\nself.model.setHeaderData(1, Qt.Horizontal, \"Name\")\nself.model.setHeaderData(2, Qt.Horizontal, \"Job\")\nself.model.setHeaderData(3, Qt.Horizontal, \"Email\")\nself.model.select()\n# Set up the view\nself.view = QTableView()\nself.view.setModel(self.model)\nself.view.resizeColumnsToContents()\nself.setCentralWidget(self.view)\ndef createConnection():\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(os.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\nif not con.open():\nQMessageBox.critical(\nNone,\n\"QTableView Example - Error!\",\n\"Database Error: %s\" % con.lastError().databaseText(),\n)\nreturn False\nreturn True\napp = QApplication(sys.argv)\nif not createConnection():\nsys.exit(1)\nwin = Contacts()\nwin.show()\nsys.exit(app.exec_())\n</code></pre> <p>Per editar les dades d'una cel\u00b7la de la taula, podeu fer doble clic a la cel\u00b7la. A la cel\u00b7la es mostrar\u00e0 un component de delegat convenient, que us permetr\u00e0 editar el contingut. A continuaci\u00f3, podeu pr\u00e9mer Enter per guardar els canvis.</p> <p>\u00das de Model-View</p> <p>La capacitat de gestionar i guardar autom\u00e0ticament els canvis a les dades \u00e9s un dels avantatges m\u00e9s importants de l'\u00fas de les classes Model-View de PySide. L'arquitectura Model-View millorar\u00e0 la nostra productivitat i reduir\u00e0 els errors que poden apar\u00e8ixer quan hem d'escriure el codi de manipulaci\u00f3 de dades per nosaltres mateixos.</p>"},{"location":"unitats/4-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-components-amb-models-predefinits","title":"\u00das de components amb models predefinits","text":"<p>\u00c9s molt senzill utilitzar un model predefinit per a mostrar i editar informaci\u00f3. Els models predefinits que podem utilitzar a Qt s\u00f3n:</p> <ul> <li>QSqlTableModel (el que hem utilitzat a l'exemple)</li> <li>QStringListModel</li> <li>QStandardItemModel</li> <li>QFileSystemModel</li> <li>QSqlQueryModel</li> <li>QSqlRelationalTableModel</li> <li>QSortFilterProxyModel</li> </ul> <p>Veiem un exemple amb QSqlTableModel, que \u00e9s dels m\u00e9s utilitzats en aplicacions:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtSql import QSqlDatabase, QSqlTableModel\nfrom PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQMessageBox,\nQTableView,\n)\nclass Contacts(QMainWindow):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"QTableView Example\")\nself.resize(415, 200)\n# Set up the model\nself.model = QSqlTableModel(self)\nself.model.setTable(\"contacts\")\nself.model.setEditStrategy(QSqlTableModel.OnFieldChange)\nself.model.setHeaderData(0, Qt.Horizontal, \"ID\")\nself.model.setHeaderData(1, Qt.Horizontal, \"Nom\")\nself.model.setHeaderData(2, Qt.Horizontal, \"Treball\")\nself.model.setHeaderData(3, Qt.Horizontal, \"Correu\")\nself.model.select()\n# Set up the view\nself.view = QTableView()\nself.view.setModel(self.model)\nself.view.resizeColumnsToContents()\nself.setCentralWidget(self.view)\ndef createConnection():\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(os.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\nif not con.open():\nQMessageBox.critical(\nNone,\n\"QTableView Example - Error!\",\n\"Database Error: %s\" % con.lastError().databaseText(),\n)\nreturn False\nreturn True\napp = QApplication(sys.argv)\nif not createConnection():\nsys.exit(1)\nwin = Contacts()\nwin.show()\nsys.exit(app.exec_())\n</code></pre> <p>Models predefinits</p> <p>Sempre que siga possible, utilitzarem models predefinits, ja que ens estalviaran molta feina i ens evitaran errors de programaci\u00f3. Sols si amb la funcionalitat d'aquests no \u00e9s suficient, implementarem models abstractes.</p> <p>Models abstractes</p> <p>L'\u00fas de models abstractes queda fora de l'abasts d'este curs, per\u00f2 podeu trobar exemples al seg\u00fcent enlla\u00e7</p>"},{"location":"unitats/4-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-delegats","title":"\u00das de delegats","text":"<p>Quan la informaci\u00f3 que volem editar no \u00e9s un text, podem fer \u00fas de delegats per modificar-la. Per exemple, un SpinBox per a editar un enter, un ComboBox per a limitar les opcions d'un text, un DateEdit per a editar un data...</p> <p>Al seg\u00fcent exemple mostrem com utilitzar un SpinBox com a delegat en totes les cel\u00b7les:</p> Python<pre><code>import sys\nfrom PySide6.QtWidgets import (QApplication, QStyledItemDelegate, QSpinBox,\nQTableView)\nfrom PySide6.QtGui import QStandardItemModel, Qt\nfrom PySide6.QtCore import QModelIndex\nclass SpinBoxDelegate(QStyledItemDelegate):\n\"\"\"A delegate that allows the user to change integer values from the model\n       using a spin box widget. \"\"\"\ndef __init__(self, parent=None):\nsuper().__init__(parent)\ndef createEditor(self, parent, option, index):\neditor = QSpinBox(parent)\neditor.setFrame(False)\neditor.setMinimum(0)\neditor.setMaximum(100)\nreturn editor\ndef setEditorData(self, editor, index):\nvalue = index.model().data(index, Qt.EditRole)\neditor.setValue(value)\ndef setModelData(self, editor, model, index):\neditor.interpretText()\nvalue = editor.value()\nmodel.setData(index, value, Qt.EditRole)\ndef updateEditorGeometry(self, editor, option, index):\neditor.setGeometry(option.rect)\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nmodel = QStandardItemModel(4, 2)\ntableView = QTableView()\ntableView.setModel(model)\ndelegate = SpinBoxDelegate()\ntableView.setItemDelegate(delegate)\ntableView.horizontalHeader().setStretchLastSection(True)\nfor row in range(4):\nfor column in range(2):\nindex = model.index(row, column, QModelIndex())\nvalue = (row + 1) * (column + 1)\nmodel.setData(index, value)\ntableView.setWindowTitle(\"Spin Box Delegate\")\ntableView.show()\nsys.exit(app.exec())\n</code></pre> <p>Delegats per a una sola columna</p> <p>Per assignar delegat a una sola columna podem utilitzar el m\u00e8tode setDelegateForColumn().</p>"},{"location":"unitats/5-Interficies-LM/enlla%C3%A7os/enlla%C3%A7os/","title":"Unitat 5 - Generaci\u00f3 d'interf\u00edcies a partir de llenguatges de marques","text":""},{"location":"unitats/5-Interficies-LM/enlla%C3%A7os/enlla%C3%A7os/#enllacos-dinteres","title":"Enlla\u00e7os d'inter\u00e9s","text":"<ol> <li>Format de fitxcer UI de Qt Designer</li> <li>Icon Gallery</li> </ol>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/","title":"A2 - Eines de disseny d'interf\u00edcies basades en llenguatges de marques","text":""},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#formulari","title":"Formulari","text":"<p>Hem vist durant la teoria de l'apartat que Qt Designer ofereix diverses plantilles a l'hora de crear un nou formulari. En total s\u00f3n cinc plantilles diferents: una per a una finestra principal, tres relacionades amb di\u00e0legs i una per crear un nou components (widget). En aquesta activitat, cal crear un nou formulari amb cada una de les plantilles disponibles, i analitzar a l'Inspector d'objectes de Qt Designer els objectes que per defecte s'han introdu\u00eft per a cada una de les plantilles.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#editor-de-texto-i","title":"Editor de texto I","text":"<p>Utilitzant Qt Designer, dissenyant una aplicaci\u00f3 per a l'edici\u00f3 de text, prenent com a base la captura seg\u00fcent:</p> <p></p> <p>Tin en compte que els botons han de realitzar la funcionalitat esperada per a cada un d'ells, i que en redimensionar la finestra els diferents components han de canviar el seu tamany de forma l\u00f2gica. L'etiqueta que apareix a la part superior s'ha configurat amb un tamany de font de 11, i en negreta.</p> <p>Ajuda</p> <p>Quan dissenyem layouts complexos en Qt Designer (que inclouen layouts niuats a altres layouts) sol ser m\u00e9s pr\u00e0ctic aplicar un enfocament de baix cap a dalt, creant primer els layouts interiors, i progressivament creant els layouts de nivells superiors fins arribar al layout principal.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#a3-us-de-la-interficie-en-una-aplicacio","title":"A3 - \u00das de la interf\u00edcie en una aplicaci\u00f3","text":""},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#formulari_1","title":"Formulari","text":"<p>En aquesta activitat haur\u00e0s de fer algunes modificacions a l'arxiu formulari.ui de la teoria utilitzant un editor de text en lloc de Qt Designer. Els canvis que has de fer s\u00f3n:</p> <ul> <li>Canvia el t\u00edtol de la finestra per \"Activitat 3\u201d.</li> <li>Modificar el bot\u00f3 de tancar per qu\u00e8 en lloc de tancar la finestra, la maximitze (haur\u00e0s de modificar tant el bot\u00f3, com la connexi\u00f3 de la senyal a la ranura).</li> </ul> <p>Una vegada realitzats els canvis, podeu executar l'arxiu que carrega el formulari i comprovar que els canvis funcionen correctament.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#editor-de-text-ii","title":"Editor de text II","text":"<p>Partint de l'editor de text dissenyat a l'apartat anterior, haur\u00e0s de crear el programa principal que utilitze el fitxer de disseny UI generat, utilitzant les dues alternatives vistes als continguts te\u00f2rics (generaci\u00f3 del codi Python associat, i c\u00e0rrega directa del fitxer UI). A m\u00e9s, al programa principal, caldr\u00e0 establir el seg\u00fcent text d'ajuda a l'usuari al quadre de text: \u201cEscriu el teu text aqu\u00ed\u2026\u201d.</p> <p>Ajuda</p> <p>Haur\u00e0s de crear dos programes principals, un per a cada alternativa d'\u00fas del fitxer UI. Et pots basar en els exemples inclosos a la unitat.</p> <p>La propietat del control QTextEdit que permet establir el text d'ajuda s'anomena placeholderText.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#a4-funcionalitats-avancades-de-leina-de-disseny","title":"A4 - Funcionalitats avan\u00e7ades de l'eina de disseny","text":""},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#plantilla","title":"Plantilla","text":"<p>En aquesta activitat hem de crear una plantilla per a la creaci\u00f3 de nous formularis, amb les seg\u00fcents caracter\u00edstiques:</p> <ul> <li>El layout principal ser\u00e0 un layout vertical.</li> <li>A la part superior de la finestra tindrem una etiqueta amb alt fixe, destinada al t\u00edtol del formulari. El text estar\u00e0 centrat horitzontalment, en negreta i amb una mida de font d'11.</li> <li>A la part inferior hi haur\u00e0 una altra etiqueta, tamb\u00e9 amb alt fixe, destinada a mostrar la versi\u00f3 del formulari. El text estar\u00e0 alineat a la dreta.</li> </ul> <p>A la part central, i ocupant tot l'espai disponible, tindrem un layout de formulari.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#formulari_2","title":"Formulari","text":"<p>Dades personals</p> <p>Dissenya un nou formulari basant-te en la captura de pantalla seg\u00fcent, associant a les etiquetes els corresponents companys. A m\u00e9s, defineix el seg\u00fcent ordre de tabulaci\u00f3:</p> <p></p> <ol> <li>Nom</li> <li>DNI</li> <li>Cognoms</li> <li>Tel\u00e8fon</li> <li>Direcci\u00f3</li> <li>Correu</li> <li>Bot\u00f3 Acceptar</li> <li>Bot\u00f3 Cancel\u00b7lar</li> </ol> <p>Ajuda</p> <p>Recorda que perqu\u00e8 la funcionalitat de controls companys funcioni correctament les etiquetes han de tenir assignat un car\u00e0cter d'acc\u00e9s r\u00e0pid a la seva propietat text, anteposant un ampersand (&amp;) abans del car\u00e0cter triat. Tingues en compte a m\u00e9s que el mateix car\u00e0cter no es pot utilitzar en dues etiquetes diferents.</p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/","title":"Pr\u00e0ctiques","text":""},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#practica-1-politica-de-mida-politica-de-mida","title":"Pr\u00e0ctica 1: Pol\u00edtica de mida (Pol\u00edtica de mida)","text":"<p>Com hem vist en els continguts te\u00f2rics, l'\u00fas dels diferents tipus de layout i el seu nedament no sempre \u00e9s suficient per aconseguir el comportament desitjat de la interf\u00edcie quan la finestra es redimensiona. Per aix\u00f2 Qt incorpora altres mecanismes, com els espaiadors o les pol\u00edtiques de mida.</p> <p>La pol\u00edtica de mida d'un control est\u00e0 formada per dos grups de valors: la configuraci\u00f3 (horitzontal i vertical) i la pol\u00edtica que s'aplicar\u00e0 al component quan es redimensione la finestra (i tamb\u00e9 es distingeix entre pol\u00edtica horitzontal i vertical).</p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#ajust-horitzontal-i-vertical","title":"Ajust horitzontal i vertical","text":"<p>El factor d\u02bbajust (estirar) \u00e9s un nombre que per defecte t\u00e9 el valor 0. S'utilitza per alterar la proporcionalitat del repartiment de l'espai que el layout fa entre els membres, que per defecte \u00e9s equitativa (\u00e9s a dir, reparteix l'espai a tots per igual). En cas que especifiqueu un valor a l'ajust, el layout repartir\u00e0 l'espai proporcionalment segons aquests valors.</p> <p>EXEMPLE</p> <p>Si en un formulari amb un layout vertical situem tres controls d'edici\u00f3 de text (QTextEdit) sabem que, en redimensionar la finestra, es repartir\u00e0 l'alt disponible a parts iguals entre els tres controls. Per\u00f2 si canviem el factor d\u02bbajust vertical als tres controls amb els valors 1, 2 i 3 respectivament, comprovarem que el repartiment \u00e9s diferent. Lespai assignat al segon control ser\u00e0 el doble que el del primer, i el tercer control disposar\u00e0 del triple despai respecte al primer.</p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#politica-horitzontal-i-vertical","title":"Pol\u00edtica horitzontal i vertical","text":"<p>La pol\u00edtica determina com es canviar\u00e0 la mida del component quan es redimensioni la finestra, i estar\u00e0 condicionada per la mida ideal del component (conegut comconsell de mida). Aquesta mida ideal la determina internament Qt per a cada component en funci\u00f3 del tipus de component i del seu contingut.</p> <p>Els diferents valors que pot prendre la pol\u00edtica sorgeixen per la combinaci\u00f3 de quatre indicadors obanderes:</p> <ul> <li>GrowFlag: el component podr\u00e0 cr\u00e9ixer per sobre de la seva mida ideal si cal.</li> <li>Expandir bandera: el component ha de cr\u00e9ixer tot el que sigui possible.</li> <li>ShrinkFlag: el component pot encongir per sota de la seva mida ideal si cal.</li> <li>Ignora la bandera: s'ignora la mida ideal, i el component tindr\u00e0 tot l'espai possible.</li> </ul> <p>Les diferents combinacions d'aquests flags donen lloc als possibles valors que podem donar a la pol\u00edtica horitzontal i vertical:</p> <ul> <li>Fixed: No se aplica ning\u00fan flag, por lo que la \u00fanica alternativa es el tama\u00f1o ideal.</li> <li>Minimum: GrowFlag</li> <li>Maximum: ShrinkFlag</li> <li>Preferred: GrowFlag | ShrinkFlag</li> <li>Expanding: GrowFlag | ShrinkFlag | ExpandFlag</li> <li>MinimumExpanding: GrowFlag | ExpandFlag</li> <li>Ignored: ShrinkFlag | GrowFlag | IgnoreFlag</li> </ul> <p>Exemple</p> <p>Els botons (QPushButton) tenen per defecte una pol\u00edtica vertical Fixed i horitzontal Minimum. Per aix\u00f2, la seva al\u00e7ada sempre s'estableix segons la mida ideal, i no canvia en redimensionar la finestra. No obstant aix\u00f2, la seva amplada pot cr\u00e9ixer per sobre del que indica la mida ideal, per\u00f2 no es pot reduir per sota d'aquest valor.</p> <p>En aquest cas pr\u00e0ctic haur\u00e0s de dissenyar amb Qt Designer la interf\u00edcie d'una aplicaci\u00f3, configurant adequadament la pol\u00edtica de mida d'alguns components perqu\u00e8 es comportin correctament en redimensionar la finestra. Tingues en compte les seg\u00fcents indicacions:</p> <ul> <li>El t\u00edtol de l'aplicaci\u00f3 se centrar\u00e0 en la finestra.</li> <li>El quadre de text tindr\u00e0 un alt fix (que ser\u00e0 lalt recomanat).</li> <li>El bot\u00f3Acceptartindr\u00e0 el doble dample que els botonsCancel \u00b7 lariAplicar.</li> </ul> <p>Els fitxers DI_U03_CPE_1_E_01.png i DI_U03_CPE_1_E_02.png contenen captures de pantalla de l'aplicaci\u00f3 amb diferents mides de finestra.</p> <p></p> <p></p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#practica-2-el-sistema-de-recursos-de-qt","title":"Pr\u00e0ctica 2: El sistema de recursos de Qt","text":"<p>El sistema de recursos de Qt \u00e9s un mecanisme independent de la plataforma per incorporar recursos a la nostra aplicaci\u00f3 (com a icones o imatges), evitant les refer\u00e8ncies a fitxers amb la sintaxi espec\u00edfica de cada sistema operatiu.</p> <p>La utilitzaci\u00f3 del sistema de recursos implica dues accions:</p> <p>Crear un fitxer de col\u00b7lecci\u00f3 de recursos: aquests fitxers basats en XML contenen una llista dels recursos necessaris per a l'aplicaci\u00f3. Tenen extensi\u00f3.qrc. Processar el fitxer de recursos: el compilador de recursos de Qt (incl\u00f2s a les eines est\u00e0ndard de Qt) orcc, realitza un processament del fitxer de recursos, generant un fitxer de codi Python que pot ser importat per l'aplicaci\u00f3 per disposar dels recursos. La sintaxi de l'ordre \u00e9s molt senzilla.</p> Bash<pre><code>rcc -g python fichero_recursos.qrc -o salida.py\n</code></pre> <p>Qt Designer ens ajuda en la creaci\u00f3 dels fitxers de recursos i en la seva utilitzaci\u00f3 en els components de la nostra interf\u00edcie. Per aix\u00f2, tenim disponible el navegador de recursos, situat a la part inferior dreta de la finestra, al costat delEditor de senyals/slots. Des d'aqu\u00ed, fent servir el bot\u00f3Editar recursos (la icona de la qual \u00e9s un llapis), s'obrir\u00e0 l'editor de recursos.</p> <p>Amb els botons situats a la part inferior esquerra podrem gestionar els fitxers de recursos (permetent-nos crear-ne un de nou, obrir-ne un existent o eliminar un fitxer). Amb els botons de la dreta gestionarem els recursos del fitxer seleccionat (podent crear un nou prefix, afegir un recurs al prefix seleccionat o eliminar prefixos o recursos).</p> <p>Els prefixos es fan servir per organitzar els recursos dins del fitxer de recursos en diferents categories.</p> <p>Per utilitzar el recurs des de Qt Designer, elEditor de propietats ens oferir\u00e0 l'opci\u00f3 d'escollir un recurs a les propietats el tipus de les quals ho permeti (per exemple, la propietaticona d'unQToolButton).</p> <p>En aquesta pr\u00e0ctica haur\u00e0s d'utilitzar el sistema de recursos Qt per afegir una icona a la finestra d'alguna de les aplicacions que hem dissenyat durant aquesta unitat. Els passos a seguir seran:</p> <ol> <li>Necessites un fitxer d'icona per a la teva aplicaci\u00f3. Als enlla\u00e7os de la unitat tens la refer\u00e8ncia aGaleria d'icones, una completa galeria d'icones, la majoria amb llic\u00e8ncia Creative Commons.</li> <li>Afegeix la icona als recursos del formulari utilitzant el navegador de recursos de Qt Designer.</li> <li>Modifica la propietat windowIcon de la finestra del formulari, associant el recurs afegit.</li> <li>Utilitza rcc per convertir el fitxer de recursos a codi Python.</li> <li>Importa el fitxer Python generat perrcc al teu programa principal.</li> </ol>"},{"location":"unitats/5-Interficies-LM/teoria/1-Llenguatges%20de%20marques%20per%20a%20la%20generaci%C3%B3%20d%27interf%C3%ADcies/","title":"Llenguatges de marques per a la generaci\u00f3 d'interf\u00edcies d'usuari","text":"<p>La majoria de les tecnologies d'interf\u00edcie d'usuari actuals ofereixen la possibilitat d'utilitzar un llenguatge de marques per a la generaci\u00f3 de la interf\u00edcie d'una aplicaci\u00f3, com a alternativa a la creaci\u00f3 d'interf\u00edcies per mitj\u00e0 de codi. Quasi tots aquests llenguatges es basen en XML, utilitzant la sintaxi d'elements i atributs per definir l'estructura i els components de la interf\u00edcie.  </p>"},{"location":"unitats/5-Interficies-LM/teoria/1-Llenguatges%20de%20marques%20per%20a%20la%20generaci%C3%B3%20d%27interf%C3%ADcies/#avantatges-dels-llenguatges-de-marques-per-a-la-generacio-dinterficies","title":"Avantatges dels llenguatges de marques per a la generaci\u00f3 d'interf\u00edcies","text":"<p>La utilitzaci\u00f3 d'aquest tipus de llenguatges ofereix els avantatges seg\u00fcents sobre la creaci\u00f3 utilitzant un llenguatge de programaci\u00f3:</p> <ul> <li>Millora la separaci\u00f3 de responsabilitats en l'aplicaci\u00f3, diferenciant clarament la interf\u00edcie d'usuari de la resta de capes.</li> <li>S\u00f3n llenguatges f\u00e0cilment entendibles, tant per les persones com per les m\u00e0quines.</li> <li>La seva estructura jer\u00e0rquica en forma d'arbre \u00e9s semblant a l'estructura visual establerta entre els components de la interf\u00edcie.</li> <li>Permeten reutilitzar el mateix disseny d'interf\u00edcie a diferents plataformes o amb diferents llenguatges de programaci\u00f3.</li> </ul>"},{"location":"unitats/5-Interficies-LM/teoria/1-Llenguatges%20de%20marques%20per%20a%20la%20generaci%C3%B3%20d%27interf%C3%ADcies/#llenguatges-de-marques-mes-utilitzats-per-a-la-generacio-dinterficies","title":"Llenguatges de marques m\u00e9s utilitzats per a la generaci\u00f3 d'interf\u00edcies","text":"<p>La taula seg\u00fcent recull alguns dels llenguatges de marques m\u00e9s populars per a la creaci\u00f3 d'interf\u00edcies gr\u00e0fiques d'usuari:</p> Llenguatge Descripci\u00f3 Qt UI Llenguatge associat al framework de desenvolupament d'interf\u00edcies Qt. \u00c9s el que veurem al llarg de la unitat. FXML Desenvolupat per Oracle per a la definici\u00f3 de la interf\u00edcie d'usuari a les aplicacions JavaFX. XAML Introdu\u00eft amb la tecnologia WPF, continua sent el llenguatge utilitzat per la majoria de tecnologies d'interf\u00edcie d'usuari de Microsoft (com UWP, WinUI o MAUI). Gtk UI Format utilitzat pel toolkit GTK, vinculat al projecte de programari lliure GNOME. Android XML Llenguatge utilitzat en el desenvolupament de la interf\u00edcie dusuari de les aplicacions m\u00f2bils Android. Storyboards Format desenvolupat per Apple per a la interf\u00edcie dusuari de les aplicacions m\u00f2bils iOS. <p>Exemples</p> Qt UIFXMLGtk UIXAML XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ui version=\"4.0\"&gt;\n&lt;class&gt;MainWindow&lt;/class&gt;\n&lt;widget class=\"QMainWindow\" name=\"MainWindow\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;435&lt;/width&gt;\n&lt;height&gt;267&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"windowTitle\"&gt;\n&lt;string&gt;MainWindow&lt;/string&gt;\n&lt;/property&gt;\n&lt;widget class=\"QWidget\" name=\"centralwidget\"&gt;\n&lt;widget class=\"QLabel\" name=\"label\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;73&lt;/width&gt;\n&lt;height&gt;16&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"text\"&gt;\n&lt;string&gt;Hola mundo&lt;/string&gt;\n&lt;/property&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;resources/&gt;\n&lt;connections/&gt;\n&lt;/ui&gt;\n</code></pre> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?import javafx.scene.layout.VBox?&gt;\n&lt;?import javafx.scene.control.Label?&gt;\n&lt;VBox&gt;\n&lt;children&gt;\n&lt;Label text=\"Hola mundo\"/&gt;\n&lt;/children&gt;\n&lt;/VBox&gt;\n</code></pre> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;interface&gt;\n&lt;requires lib=\"gtk+\" version=\"3.20\"/&gt;\n&lt;object class=\"GtkApplicationWindow\" id=\"window\"&gt;\n&lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n&lt;child&gt;\n&lt;placeholder/&gt;\n&lt;/child&gt;\n&lt;child&gt;\n&lt;object class=\"GtkLabel\"&gt;\n&lt;property name=\"visible\"&gt;True&lt;/property&gt;\n&lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n&lt;property name=\"label\" translatable=\"yes\"&gt;\nHola mundo\n            &lt;/property&gt;\n&lt;property name=\"use_markup\"&gt;True&lt;/property&gt;\n&lt;/object&gt;\n&lt;/child&gt;\n&lt;/object&gt;\n&lt;/interface&gt;\n</code></pre> XML<pre><code>&lt;Window x:Class=\"HolaMundo.MainWindow\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" Title=\"MainWindow\"&gt;\n&lt;Grid&gt;\n&lt;TextBlock&gt;Hola mundo&lt;/TextBlock&gt;\n&lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre> <p>IMPORTANT</p> <p>Tot i que la major part de tecnologies relacionades amb la interf\u00edcie d'usuari incorporen llenguatges de marques per a la definici\u00f3 d'interf\u00edcies, no sempre \u00e9s aix\u00ed. En el cas de Flutter, el framework multiplataforma de Google, la interf\u00edcie nom\u00e9s es pot crear mitjan\u00e7ant el llenguatge de programaci\u00f3 declarativa Dart.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/","title":"Eines de disseny d'interf\u00edcies basades en llenguatges de marques","text":"<p>A l'hora d'utilitzar un llenguatge de marques per a la generaci\u00f3 de la interf\u00edcie d'usuari d'una aplicaci\u00f3, normalment se'ns presenten dues opcions:</p> <ul> <li>Utilitzar directament el llenguatge de marques per definir els diferents elements que formaran la interf\u00edcie i les seves propietats, ajudant-nos d'algun editor de text o codi (com ara Visual Studio Code).</li> <li>Fer \u00fas d'una eina de disseny tipus WYSIWYG (what you see is what you get), que ens permetr\u00e0 definir la interf\u00edcie d'usuari en un entorn visual. L'eina generar\u00e0 autom\u00e0ticament el codi corresponent en el llenguatge de marques.</li> </ul> <p>Tot i que alguns llenguatges de marques per generar interf\u00edcies estan m\u00e9s orientats a ser utilitzats directament pels desenvolupadors, tots disposen d'una eina de disseny visual. La taula seg\u00fcent mostra les eines associades als llenguatges que vam veure a l'apartat anterior.</p> Llenguatge Descripci\u00f3 Qt UI Qt Designer (independent o integrada a l'IDE Qt Creator). FXML JavaFX SceneBuilder (independent o integrada als IDEs NetBeans, Eclipse o IntelliJ). XAML Dissenyador XAML de l'IDE Visual Studio o Blend per a Visual Studio. Gtk UI Glade (independent o integrat en algun IDE com Anjuta DevStudio). Android XML Editor de disseny (Layout Editor) de l'IDE Android Studio. Storyboards Interface Builder de l'IDE Xcode. <p>En aquest apartat ens centrarem en les funcionalitats d'una d'aquestes eines, Qt Designer, inclosa al framework Qt.</p> <p>Important</p> <p>Encara que a partir d\u00b4ara ens dedicarem a l\u00b4eina Qt Designer, la majoria de les eines de disseny visual d\u00b4interf\u00edcies d\u00b4usuari ofereixen funcionalitats molt similars a les que veurem en aquest apartat.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#primers-passos-amb-qt-designer","title":"Primers passos amb Qt Designer","text":"<p>El proc\u00e9s de disseny d'un formulari amb Qt Designer sol compondre's de les etapes seg\u00fcents:</p> <ol> <li>Crear un nou formulari.</li> <li>Situar-hi els controls que necessitem, configurant-ne les propietats.</li> <li>Organitzar els controls amb el layout desitjat.</li> <li>Connectar senyals a ranures.</li> <li>Previsualitzar-ne el resultat.</li> </ol> <p>En obrir l'eina apareixer\u00e0 el di\u00e0leg per crear un formulari nou.</p> <p></p> <p>Des d'aqu\u00ed podrem crear un nou formulari escollint una de les plantilles disponibles:</p> <ul> <li>Main Window, per crear una finestra principal.</li> <li>Dialog, per crear un nou di\u00e0leg, podent triar entre diferents configuracions de botons.</li> <li>Widget, per crear un nou component, que podr\u00e0 ser utilitzat de manera independent, o integrat en una finestra o di\u00e0leg.</li> </ul> <p>Una vegada triat el tipus de formulari, apareixer\u00e0 la finestra principal de Qt Designer (a la imatge, per a un formulari de tipus finestra principal).</p> <p></p> <p>Podem distingir les seg\u00fcents zones a la finestra principal:</p> <ol> <li>Zona de disseny, on apareix la nostra finestra i podem arrossegar els components que formaran la interf\u00edcie d'usuari.</li> <li>Caixa de widgets, amb tots els components disponibles a Qt organitzats per categories. Des d\u00b4aqu\u00ed podrem arrossegar directament un component a la finestra.</li> <li>Inspector d'objectes, que mostra l'estructura jer\u00e0rquica dels components de la nostra interf\u00edcie, indicant la classe de cadascun d'aquests components. Tamb\u00e9 ens permet seleccionar un component concret de la interf\u00edcie per modificar-ne les propietats.</li> <li>Editor de propietats, que ens ajuda a modificar el valor de les diferents propietats del component seleccionat. Per defecte, les propietats apareixen agrupades per la classe a qu\u00e8 pertanyen dins la cadena d'her\u00e8ncia del component.</li> <li>Editor de senyals/ranures, des d'on podrem associar els senyals emesos pels components amb les ranures predeterminades que ofereixen alguns components. L'Editor d'accions i el Navegador de recursos tamb\u00e9 s\u00f3n accessibles per mitj\u00e0 de pestanyes en aquesta zona.</li> </ol> <p>Important</p> <p>Podem personalitzar la disposici\u00f3 de les diferents zones comentades arrossegant-les a la part de la finestra on ens resulti m\u00e9s c\u00f2mode tenir-les. Tamb\u00e9 podem fer servir el men\u00fa Vista de l'aplicaci\u00f3 per decidir quines eines tenir visibles.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#distribucio-dels-components-layout","title":"Distribuci\u00f3 dels components (layout)","text":"<p>Qt Designer ens permet definir de forma c\u00f2moda i r\u00e0pida la disposici\u00f3 dels nostres components, podent aplicar les diferents opcions de layout de Qt vistes a la unitat anterior. </p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#layout-principal","title":"Layout principal","text":"<p>\u00c9s important que definim un layout principal per al nostre formulari, que estableixi la manera com s'organitzen els components de la interf\u00edcie en el nivell m\u00e9s alt.</p> <p>Important</p> <p>Abans de poder configurar el layout principal del nostre formulari haurem d'haver incl\u00f2s almenys un control. Si no ho fem, les opcions de layout estaran deshabilitades.</p> <p>Per assignar un layout a la finestra principal, seleccionarem la finestra (fent clic a una \u00e0rea sense ocupar del nostre formulari, o seleccionant l'objecte arrel a l'Inspector d'objectes), i aplicarem el layout desitjat utilitzant les opcions del men\u00fa Formulari o la barra d'eines associada. </p> <p></p> <p>Un dels grans avantatges d'una eina visual com Qt Designer \u00e9s que podrem veure a la pr\u00f2pia eina el resultat d'aplicar el layout, permetent fins i tot redimensionar la finestra per comprovar si el comportament de la interf\u00edcie s'ajusta al que desitja. A m\u00e9s, ens resultar\u00e0 molt senzill afegir nous controls al layout, ja que en arrossegar-los des de la Caixa de widgets apareixer\u00e0 una l\u00ednia de guia blava al formulari que ens ajudar\u00e0 a posicionar el component dins del layout.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#layouts-niuats-anidados","title":"Layouts niuats (anidados)","text":"<p>A m\u00e9s de definir un layout per a la nostra finestra principal, \u00e9s molt probable que el disseny de la nostra interf\u00edcie necessiti niar al seu interior altres layouts per aconseguir el posicionament adequat dels components. </p> <p>Per crear un nou layout a Qt Designer simplement haurem d'arrossegar-lo des de la Caixa de widgets (a la secci\u00f3 Layouts) fins a la posici\u00f3 desitjada al formulari. Una vegada inserit, apareixer\u00e0 com un requadre vermell a la finestra, i s'haur\u00e0 afegit a l' Inspector d'objectes com a objecte independent. D'aquesta manera, podrem seleccionar-ho f\u00e0cilment per poder editar-ne les propietats. I ja podrem arrossegar altres components al seu interior.</p> <p>Tamb\u00e9 tenim l'opci\u00f3 de seleccionar diversos controls alhora (utilitzant la tecla Ctrl) i seleccionar per a ells un layout des del men\u00fa Formulari o utilitzant l'opci\u00f3 Distribuci\u00f3 del men\u00fa contextual. Aquesta alternativa la podrem fer servir sempre que els controls no estiguin pr\u00e8viament afegits en un layout.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#altres-opcions-per-a-la-distribucio-de-components","title":"Altres opcions per a la distribuci\u00f3 de components","text":"<p>Tot i que els diferents layouts disponibles a Qt i la possibilitat de combinar-los ens aporten gran flexibilitat, normalment no n'hi ha prou per aconseguir dissenys d'interf\u00edcie complexos. Qt inclou altres funcionalitats que complementen el sistema de layout, i que tamb\u00e9 tindrem disponibles a Qt Designer. </p> <p>Una daquestes possibilitats s\u00f3n els espaiadors, que permeten introduir un espai entre controls dins un layout. Per utilitzar-los, simplement els arrossegarem des de la Caixa de ginys (a la secci\u00f3 Spacers) podent triar entre un espaiador vertical o horitzontal.</p> <p>L'altra caracter\u00edstica clau de Qt a l'hora d'organitzar els components del formulari \u00e9s l'\u00fas de les propietats relacionades amb la mida del component i el seu comportament en redimensionar el formulari:</p> <ul> <li>Pol\u00edtica de mida (sizePolicy): permet configurar la manera com el component canviar\u00e0 la mida en redimensionar el formulari. Es compon de:<ul> <li>Pol\u00edtica (horitzontal i vertical): hi ha diferents tipus de pol\u00edtica, que es diferencien en la manera com el sistema de layout de Qt assigna l'amplada i l'alt al component en relaci\u00f3 a la seva mida ideal (conegut com sizeHint).</li> <li>Ajustament (horitzontal i vertical): representa un factor d'ajustament proporcional, que permet que el repartiment d'espai entre els controls no sigui equitatiu. </li> </ul> </li> <li>Mides m\u00ednim (minimunSize) i m\u00e0xim (maximumSize): per definir un l\u00edmit inferior i superior a l'alt i l'amplada del component. </li> </ul> <p>Totes aquestes propietats es poden modificar directament a Qt Designer utilitzant l'Editor de propietats.</p> <p></p> <p>Important</p> <p>Recordeu que el nostre objectiu sempre ha de ser aconseguir que la interf\u00edcie es comporti com necessitem, per\u00f2 amb la configuraci\u00f3 de layout m\u00e9s senzilla que sigui possible.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#connexio-de-senyals-a-ranures","title":"Connexi\u00f3 de senyals a ranures","text":"<p>Qt Designer tamb\u00e9 permet associar un senyal d'un component a alguna de les ranures d'un altre component. Per fer-ho, cal canviar al mode Edici\u00f3 de senyals/slots.</p> <p>Modes d'edici\u00f3</p> <p>Qt Designer disposa de quatre modes d'edici\u00f3 (widgets, senyals/slots, companys i ordre de pestanyes). El mode per defecte \u00e9s el mode Edici\u00f3 de widgets, que ens permet arrossegar components al formulari i configurar-los. Per canviar de manera podem utilitzar el men\u00fa Edita o les opcions associades de la barra d'eines.</p> <p>Una vegada en el mode Edici\u00f3 de senyals/slots, simplement polsarem el control que origina el senyal i arrossegarem la fletxa vermella fins al que cont\u00e9 la ranura. Aleshores apareixer\u00e0 la finestra de configuraci\u00f3 de la connexi\u00f3, on podrem associar el senyal origen amb l'slot dest\u00ed.</p> <p></p> <p>Una vegada creada la connexi\u00f3, es podr\u00e0 visualitzar i editar en qualsevol moment tornant al mode Edici\u00f3 senyals/slots, o mitjan\u00e7ant l' Editor de senyals/slots situat a la part inferior dreta de la finestra principal de Qt Designer. </p> <p>Important</p> <p>Si volem associar un senyal a una ranura definida per nosaltres, ho farem des del codi Python com vam veure a la unitat anterior. Per poder referenciar els controls des del codi, \u00e9s Important que us assignem un identificador a Qt Designer (propietat objectName).</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#previsualitzar-el-resultat","title":"Previsualitzar el resultat","text":"<p>Durant el proc\u00e9s de creaci\u00f3 del nostre formulari amb Qt Designer podem obtenir una vista pr\u00e8via del resultat, molt m\u00e9s propera a com es veur\u00e0 realment el nostre disseny quan s'executi l'aplicaci\u00f3. Per fer-ho, tenim l'opci\u00f3 Vista pr\u00e8via del men\u00fa Formulari. Tamb\u00e9 en aquest men\u00fa se'ns ofereix la possibilitat de previsualitzar el formulari amb estils diferents de l'establert per defecte.</p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/","title":"\u00das de la interf\u00edcie en una aplicaci\u00f3","text":"<p>Com ja hem vist, gran part de les tecnologies d'interf\u00edcie d'usuari actuals disposen d'un llenguatge de marques per definir el disseny de les finestres sense fer \u00fas d'un llenguatge de programaci\u00f3. I tamb\u00e9 solen disposar d'una eina visual de disseny que facilita la tasca de definici\u00f3 de la interf\u00edcie, i que genera autom\u00e0ticament un document en el llenguatge de marques corresponent. Tanmateix, Una vegada disposem del document caldr\u00e0 integrar-lo d'alguna manera amb la resta de la nostra aplicaci\u00f3.  </p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#format-qt-ui","title":"Format Qt UI","text":"<p>L'eina Qt Designer emmagatzema el disseny realitzat en un format conegut com a Qt UI, assignant als fitxers de disseny l'extensi\u00f3 *.ui. Aquest format est\u00e0 basat en XML i, encara que no est\u00e0 concebut per utilitzar-los pels desenvolupadors fora de l'eina de disseny, \u00e9s possible manipular-lo directament en algun editor de text. Tamb\u00e9 es podria generar o modificar des d'un programa, ja que la majoria de llenguatges de programaci\u00f3 disposen de llibreries per a la manipulaci\u00f3 d'XML.</p> <p>EXEMPLE</p> <p>Una possible situaci\u00f3 en qu\u00e8 seria \u00fatil l'edici\u00f3 directa del fitxer generat per Qt Designer \u00e9s la modificaci\u00f3 d'una propietat que es repeteix en diferents controls. Per exemple, si tots els nostres botons tenen establert la mateixa amplada m\u00ednima i volem modificar-ho, en lloc de fer-ho un per un a Qt Designer, podr\u00edem utilitzar la funci\u00f3 de reempla\u00e7ament d'algun editor de text directament sobre el fitxer UI.</p> <p>A continuaci\u00f3, es mostren alguns dels elements XML m\u00e9s importants que trobem en un fitxer de Qt Designer, i la seva estructura jer\u00e0rquica al document.</p> <p></p> Element Descripci\u00f3 ui \u00c9s l'element principal que engloba tot el document. widget S'utilitza per incloure un giny de Qt. A l'interior pot contenir elements property per definir les propietats, altres elements widget o un layout. layout Element associat als layouts de Qt. Al seu interior cont\u00e9 un o m\u00e9s elements item per a cadascun dels membres del dit layout. connection Cont\u00e9 les associacions de senyals amb ranures. Per a cada connexi\u00f3 hi haur\u00e0 un element connection, format per quatre elements que defineixen la connexi\u00f3 (sender, signal, receiver, slot). <p>Formulari</p> <p>Es pot analitzar amb m\u00e9s detall l'XML associat al seg\u00fcent formulari: </p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ui version=\"4.0\"&gt;\n&lt;class&gt;MainWindow&lt;/class&gt;\n&lt;widget class=\"QMainWindow\" name=\"MainWindow\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;529&lt;/width&gt;\n&lt;height&gt;390&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"windowTitle\"&gt;\n&lt;string&gt;Ejemplo de formulario&lt;/string&gt;\n&lt;/property&gt;\n&lt;widget class=\"QWidget\" name=\"centralwidget\"&gt;\n&lt;layout class=\"QVBoxLayout\" name=\"verticalLayout_2\"&gt;\n&lt;item&gt;\n&lt;widget class=\"QTextEdit\" name=\"textEdit\" /&gt;\n&lt;/item&gt;\n&lt;item&gt;\n&lt;layout class=\"QHBoxLayout\" name=\"horizontalLayout\"&gt;\n&lt;item&gt;\n&lt;widget class=\"QPushButton\" name=\"limpiar_boton\"&gt;\n&lt;property name=\"text\"&gt;\n&lt;string&gt;Limpiar&lt;/string&gt;\n&lt;/property&gt;\n&lt;/widget&gt;\n&lt;/item&gt;\n&lt;item&gt;\n&lt;widget class=\"QPushButton\" name=\"cerrar_boton\"&gt;\n&lt;property name=\"text\"&gt;\n&lt;string&gt;Cerrar&lt;/string&gt;\n&lt;/property&gt;\n&lt;/widget&gt;\n&lt;/item&gt;\n&lt;/layout&gt;\n&lt;/item&gt;\n&lt;/layout&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;tabstops&gt;\n&lt;tabstop&gt;textEdit&lt;/tabstop&gt;\n&lt;tabstop&gt;limpiar_boton&lt;/tabstop&gt;\n&lt;tabstop&gt;cerrar_boton&lt;/tabstop&gt;\n&lt;/tabstops&gt;\n&lt;resources /&gt;\n&lt;connections&gt;\n&lt;connection&gt;\n&lt;sender&gt;limpiar_boton&lt;/sender&gt;\n&lt;signal&gt;clicked()&lt;/signal&gt;\n&lt;receiver&gt;textEdit&lt;/receiver&gt;\n&lt;slot&gt;clear()&lt;/slot&gt;\n&lt;hints&gt;\n&lt;hint type=\"sourcelabel\"&gt;\n&lt;x&gt;119&lt;/x&gt;\n&lt;y&gt;364&lt;/y&gt;\n&lt;/hint&gt;\n&lt;hint type=\"destinationlabel\"&gt;\n&lt;x&gt;139&lt;/x&gt;\n&lt;y&gt;266&lt;/y&gt;\n&lt;/hint&gt;\n&lt;/hints&gt;\n&lt;/connection&gt;\n&lt;connection&gt;\n&lt;sender&gt;cerrar_boton&lt;/sender&gt;\n&lt;signal&gt;clicked()&lt;/signal&gt;\n&lt;receiver&gt;MainWindow&lt;/receiver&gt;\n&lt;slot&gt;close()&lt;/slot&gt;\n&lt;hints&gt;\n&lt;hint type=\"sourcelabel\"&gt;\n&lt;x&gt;411&lt;/x&gt;\n&lt;y&gt;370&lt;/y&gt;\n&lt;/hint&gt;\n&lt;hint type=\"destinationlabel\"&gt;\n&lt;x&gt;522&lt;/x&gt;\n&lt;y&gt;368&lt;/y&gt;\n&lt;/hint&gt;\n&lt;/hints&gt;\n&lt;/connection&gt;\n&lt;/connections&gt;\n&lt;slots&gt;\n&lt;slot&gt;mostrar_mensaje()&lt;/slot&gt;\n&lt;/slots&gt;\n&lt;/ui&gt;\n</code></pre> <p>Als enlla\u00e7os de la unitat s'inclou la refer\u00e8ncia a la p\u00e0gina de la documentaci\u00f3 de Qt on es defineix l'esquema XML complet dels documents Qt UI.</p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#incloure-la-interficie-en-una-aplicacio","title":"Incloure la interf\u00edcie en una aplicaci\u00f3","text":"<p>A l'hora d'utilitzar el nostre fitxer de disseny de la interf\u00edcie des d'una aplicaci\u00f3, se'ns presenten dues opcions diferents:</p> <ul> <li>Utilitzar una eina de generaci\u00f3 de codi que, a partir del fitxer de descripci\u00f3 de la interf\u00edcie, generi el codi corresponent al llenguatge de programaci\u00f3 adequat. Aquest codi s'haur\u00e0 d'integrar durant la compilaci\u00f3 amb la resta de l'aplicaci\u00f3, ia m\u00e9s haur\u00e0 de ser regenerat cada cop que realitzem canvis en el disseny.</li> <li>Carregar directament des del codi de la nostra aplicaci\u00f3 el fitxer de descripci\u00f3 de la interf\u00edcie, generant-se en temps d'execuci\u00f3 el codi corresponent. Aquesta alternativa permet modificar el disseny al fitxer UI sense necessitat de recompilar l'aplicaci\u00f3, encara que per altra banda ralentitzar\u00e0 l'execuci\u00f3 en haver de generar el codi. </li> </ul>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#generar-codi-python-a-partir-del-fitxer-ui","title":"Generar codi Python a partir del fitxer UI","text":"<p>Per generar el codi Python corresponent a un fitxer de disseny de Qt Designer s'utilitza l'eina User Interface Compiler (uic), inclosa a la instal\u00b7laci\u00f3 de Qt. L'ordre seg\u00fcent generar\u00e0 el fitxer de codi Python finestra.py a partir del fitxer de disseny d'interf\u00edcie finestra.ui.</p> Text Only<pre><code>uic -g python finestra.ui -o finestra.py\n</code></pre> <p>Per als que utilitzeu linux:</p> Bash<pre><code>pyside6-uic finestrs.ui -o finestra.py\n</code></pre> <p>Podeu veure a continuaci\u00f3 el codi generat a partir de formulari.ui.</p> Python<pre><code># -*- coding: utf-8 -*-\n################################################################################\n## Form generated from reading UI file 'formulari.ui'\n##\n## Created by: Qt User Interface Compiler version 6.4.0\n##\n## WARNING! All changes made in this file will be lost when recompiling UI file!\n################################################################################\nfrom PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,\nQMetaObject, QObject, QPoint, QRect,\nQSize, QTime, QUrl, Qt)\nfrom PySide6.QtGui import (QBrush, QColor, QConicalGradient, QCursor,\nQFont, QFontDatabase, QGradient, QIcon,\nQImage, QKeySequence, QLinearGradient, QPainter,\nQPalette, QPixmap, QRadialGradient, QTransform)\nfrom PySide6.QtWidgets import (QApplication, QHBoxLayout, QMainWindow, QPushButton,\nQSizePolicy, QTextEdit, QVBoxLayout, QWidget)\nclass Ui_MainWindow(object):\ndef setupUi(self, MainWindow):\nif not MainWindow.objectName():\nMainWindow.setObjectName(u\"MainWindow\")\nMainWindow.resize(529, 390)\nself.centralwidget = QWidget(MainWindow)\nself.centralwidget.setObjectName(u\"centralwidget\")\nself.verticalLayout_2 = QVBoxLayout(self.centralwidget)\nself.verticalLayout_2.setObjectName(u\"verticalLayout_2\")\nself.textEdit = QTextEdit(self.centralwidget)\nself.textEdit.setObjectName(u\"textEdit\")\nself.verticalLayout_2.addWidget(self.textEdit)\nself.horizontalLayout = QHBoxLayout()\nself.horizontalLayout.setObjectName(u\"horizontalLayout\")\nself.limpiar_boton = QPushButton(self.centralwidget)\nself.limpiar_boton.setObjectName(u\"limpiar_boton\")\nself.horizontalLayout.addWidget(self.limpiar_boton)\nself.cerrar_boton = QPushButton(self.centralwidget)\nself.cerrar_boton.setObjectName(u\"cerrar_boton\")\nself.horizontalLayout.addWidget(self.cerrar_boton)\nself.verticalLayout_2.addLayout(self.horizontalLayout)\nMainWindow.setCentralWidget(self.centralwidget)\nself.retranslateUi(MainWindow)\nself.limpiar_boton.clicked.connect(self.textEdit.clear)\nself.cerrar_boton.clicked.connect(MainWindow.close)\nQMetaObject.connectSlotsByName(MainWindow)\n# setupUi\ndef retranslateUi(self, MainWindow):\nMainWindow.setWindowTitle(QCoreApplication.translate(\"MainWindow\", u\"Ejemplo de formulario\", None))\nself.limpiar_boton.setText(QCoreApplication.translate(\"MainWindow\", u\"Limpiar\", None))\nself.cerrar_boton.setText(QCoreApplication.translate(\"MainWindow\", u\"Cerrar\", None))\n# retranslateUi\n</code></pre> <p>Compte</p> <p>Al comentari inicial que s'inclou al codi generat se'ns avisa que qualsevol canvi manual que fem al codi Python d'aquest fitxer es perdr\u00e0 si es torna a generar des del fitxer UI.</p> <p>Quan tenim el codi Python, cal integrar-lo en la nostra aplicaci\u00f3. Si observem el codi generat, veurem que cont\u00e9 la definici\u00f3 d'una classe nova, el nom de la qual es forma afegint el prefix Ui_ al nom del nostre objecte principal en el disseny. En el nostre exemple, la classe es diu Ui_MainWindow. Aquesta classe cont\u00e9 la definici\u00f3 d'un m\u00e8tode anomenat setupUi que \u00e9s l'encarregat de crear i configurar tots els objectes associats al nostre disseny.</p> <p>Per poder utilitzar aquesta classe al nostre programa principal, el primer que hem de fer \u00e9s realitzar la importaci\u00f3 corresponent.</p> <p>A continuaci\u00f3, haurem de crear una classe nova que hereta tant de la classe generada, com de la classe de l'objecte principal del nostre disseny (en l'exemple, QMainWindow). Al constructor d'aquesta nova classe (a la qual hem anomenat MainWindow) es cridar\u00e0 al m\u00e8tode setupUi perqu\u00e8 es generen tots els objectes de la interf\u00edcie.</p> Python<pre><code>import sys\nfrom PySide6 import QtWidgets\nfrom formulari import Ui_MainWindow\nclass MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setupUi(self)\napp = QtWidgets.QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\napp.exec()\n</code></pre> <p>Una vegada creada aquesta classe, al nostre programa principal simplement haurem de crear una nova inst\u00e0ncia, i mostrar la finestra com ho fem habitualment (amb el m\u00e8tode Show).</p> <p></p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#carregar-el-fitxer-ui-des-de-python","title":"Carregar el fitxer UI des de Python","text":"<p>Com hem comentat anteriorment, tenim una altra alternativa per utilitzar el disseny realitzat a Qt Designer, que consisteix a carregar directament el fitxer UI des de l'aplicaci\u00f3 Python. Per fer-ho, utilitzarem la classe QUiLoader inclosa al m\u00f2dul QtUiTools. </p> <p>Aquesta classe ofereix el m\u00e8tode load, que rebr\u00e0 com a par\u00e0metre el fitxer UI i generar\u00e0 la finestra. </p> Python<pre><code>import sys, os\nfrom PySide6 import QtWidgets\nfrom PySide6.QtUiTools import QUiLoader\nloader = QUiLoader()\napp = QtWidgets.QApplication(sys.argv)\nui_path = os.path.join(os.path.dirname(__file__), \"formulari.ui\")\nwindow = loader.load(ui_path, None)\nwindow.show()\napp.exec()\n</code></pre>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#manipulacio-dels-objectes-generats","title":"Manipulaci\u00f3 dels objectes generats","text":"<p>Una vegada hem generat la nostra finestra (amb qualsevol dels dos m\u00e8todes descrits) podem accedir a qualsevol dels objectes generats per, per exemple, modificar-ne alguna de les propietats o associar una ranura a un dels seus senyals. Per a aix\u00f2, simplement utilitzarem el nom que h\u00e0gem donat a Qt Designer (mitjan\u00e7ant la propietat layoutName als layouts, i objectName a la resta de components) i la mateixa sintaxi que vam aprendre a la unitat anterior.</p> <p>EXEMPLE</p> <p>Si volem modificar el text dels botons i el t\u00edtol de la finestra, simplement hem d'accedir a estos ells amb el seu nou i canviar les seues propietats per codi: Podem agrupar tots els canvis en un m\u00e8tode com es veu al seg\u00fcent exemple:</p> <p>Python<pre><code>import sys, os\nfrom PySide6 import QtWidgets\nfrom PySide6.QtUiTools import QUiLoader\nloader = QUiLoader()\ndef mainwindow_setup(w):\nw.setWindowTitle(\"Simple text editor\")\nw.cerrar_boton.setText(\"Close\")\nw.limpiar_boton.setText(\"Clear\")\napp = QtWidgets.QApplication(sys.argv)\nui_path = os.path.join(os.path.dirname(__file__), \"formulari.ui\")\nwindow = loader.load(ui_path, None)\nmainwindow_setup(window)\nwindow.show()\napp.exec_() \n</code></pre> Ara la interf\u00edcie quedaria aix\u00ed:</p> <p></p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/","title":"Funcionalitats avan\u00e7ades de l'eina de disseny","text":"<p>La finalitat principal de les eines de disseny associades als llenguatges de marques \u00e9s permetre a l'usuari definir els components de la interf\u00edcie i la manera com s'organitzen aquests. Aix\u00ed i tot, solen incloure un altre tipus de funcionalitats que ajuden el desenvolupador a especificar tots els aspectes relacionats amb el disseny.</p> <p>A Qt Designer hem vist com a m\u00e9s de poder arrossegar i configurar els components podem, per exemple, definir l'associaci\u00f3 de senyals a ranures. En aquest apartat veurem altres funcionalitats que incorpora aquesta eina per completar el disseny d'un formulari.</p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/#definicio-de-companys-buddy-widgets","title":"Definici\u00f3 de companys (buddy widgets)","text":"<p>Quan dissenyem formularis d'entrada de dades, \u00e9s habitual utilitzar en el disseny una etiqueta (QLabel) per identificar cada camp del formulari, i un control d'entrada de dades (com QLineEdit, QTextEdit o QComboBox) per que l'usuari pugui proporcionar el valor. De fet, Qt ofereix el layout de formulari (QFormLayout) per ajudar-nos a organitzar etiquetes i controls d'entrada.</p> <p>Qt ens ofereix la possibilitat d'associar a cada etiqueta el control d'entrada de dades corresponent com un control company. D'aquesta manera, quan l'usuari utilitze l'acc\u00e9s r\u00e0pid associat a l'etiqueta (definit amb un car\u00e0cter '&amp;' abans de la lletra corresponent a la propietat text), el focus passar\u00e0 al company. Per utilitzar la drecera, l'usuari haur\u00e0 de combinar la tecla Alt amb la lletra definida.</p> <p>Podem associar companys a les etiquetes a Qt Designer canviant al mode Editar companys al men\u00fa Editar, o utilitzant la barra d'eines. El funcionament \u00e9s molt similar al que vam veure per a l'associaci\u00f3 de senyals a ranures, ja que simplement haurem de pr\u00e9mer l'etiqueta i arrossegar la fletxa vermella fins al company. A m\u00e9s, com hem comentat, l'etiqueta haur\u00e0 de tenir assignat un car\u00e0cter d'acc\u00e9s a la propietat text.</p> <p></p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/#ordre-de-tabulacio","title":"Ordre de tabulaci\u00f3","text":"<p>Molts usuaris d'aplicacions basades en formularis estan habituats a despla\u00e7ar-se pels diferents camps del formulari fent servir la tecla de tabulaci\u00f3 del teclat. Qt Designer ofereix la possibilitat de personalitzar visualment l'ordre en qu\u00e8 es despla\u00e7ar\u00e0 el focus d'un camp a un altre amb el tabulador utilitzant el mode Edita ordre de pestanyes.</p> <p>IMPORTANT</p> <p>El nom donat a l'edici\u00f3 de l'ordre de tabulacions a les traduccions de Qt Designer pot induir a error. En angl\u00e8s, es diu Tab Order Editing Mode. La paraula Tab fa refer\u00e8ncia en aquest context al tabulador, per\u00f2 ha estat tradu\u00efda com a pestanya.</p> <p>Una vegada en el mode d'edici\u00f3 de l'ordre de tabulaci\u00f3, se'ns mostrar\u00e0 un n\u00famero associat a cada control que podeu rebre el focus (com els controls d'entrada de dades o els botons). Aquest n\u00famero indica l'ordre de tabulaci\u00f3 actual. Si volem modificar-ho, simplement hem d'anar prement sobre aquests n\u00fameros a l'ordre desitjat. Segons anem prement els n\u00fameros canviar\u00e0 el color de la manera seg\u00fcent:</p> <ul> <li>Vermell: l'\u00faltim n\u00famero premut.</li> <li>Verd: n\u00fameros ja establerts.</li> <li>Blau: n\u00fameros per establir.</li> </ul> <p></p> <p>Aquest mode d'edici\u00f3 tamb\u00e9 compta amb un men\u00fa contextual amb les opcions seg\u00fcents:</p> <ul> <li>Comen\u00e7ar des d'aqu\u00ed: per comen\u00e7ar la configuraci\u00f3 en un punt intermedi de la seq\u00fc\u00e8ncia de tabulaci\u00f3 (que \u00e9s molt \u00fatil en formularis amb molts camps).</li> <li>Reinicia: per restablir l'ordre de tabulaci\u00f3.</li> <li>Ordre de llista de pestanyes: obrir\u00e0 un di\u00e0leg per configurar l'ordre de tabulaci\u00f3 amb una interf\u00edcie de llista. Els canvis realitzats es reflectiran en els n\u00fameros mostrats sobre els controls en acceptar el di\u00e0leg.</li> </ul> <p>IMPORTANT</p> <p>Tant la possibilitat de configurar l'ordre de tabulaci\u00f3 com l'associaci\u00f3 de companys s\u00f3n funcionalitats que ajuden a millorar la productivitat dels usuaris finals de la nostra aplicaci\u00f3, i s\u00f3n especialment rellevants en aplicacions destinades a l'\u00e0mbit empresarial. A m\u00e9s, aquestes opcions estan alineades amb l'heur\u00edstica d'usabilitat n\u00famero 7 de Nielsen, Flexibilitat i efici\u00e8ncia d'\u00fas.</p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/#plantilles","title":"Plantilles","text":"<p>Qt Designer ofereix la possibilitat de crear les nostres pr\u00f2pies plantilles de formulari, que ens permetran crear un nou formulari a partir d'una estructura b\u00e0sica definida per nosaltres. </p> <p>El seu \u00fas \u00e9s molt senzill. Simplement haurem de dissenyar la nostra plantilla com si fos un formulari corrent. Una vegada dissenyada, s'ha de desar utilitzant l'opci\u00f3 Desa com a plantilla del men\u00fa Fitxer. Al di\u00e0leg que apareix li donarem un nom a la plantilla i decidirem on emmagatzemar-la.</p> <p>Una vegada guardada la plantilla, quan crearem un nou formulari apareixer\u00e0 com a opci\u00f3, a m\u00e9s de les plantilles per defecte que ja coneixem.</p>"},{"location":"unitats/6-Distribucio/tasques/Practica1/","title":"Creaci\u00f3 d'executables amb pyinstaller","text":""},{"location":"unitats/6-Distribucio/tasques/Practica1/#hola-mon","title":"Hola m\u00f3n!","text":"<p>En esta pr\u00e0ctica aprendrem a construir executables per als diferents sistemes operatius fent \u00fas de pyinstaller.</p> <p>Per a instal\u00b7lar pyinstaller executem la seg\u00fcent ordre:</p> Bash<pre><code>pip install pyinstaller\n</code></pre> <p>Partirem del seg\u00fcent codi font:</p> Python<pre><code>import sys\nfrom PySide6.QtWidgets import (QApplication, QMainWindow, \nQWidget, QVBoxLayout, QLabel, QPushButton)\nfrom PySide6.QtCore import Qt\nclass MainWindow(QMainWindow):\ndef __init__(self):\nsuper(MainWindow, self).__init__()\nself.setFixedSize(400, 200)\nself.setWindowTitle(\"Hola m\u00f3n! amb PySide6\")\nlayout = QVBoxLayout()\nlabel = QLabel(\"Hola m\u00f3n!\")\nlabel.setAlignment(Qt.AlignCenter)\nlayout.addWidget(label)\nbutton = QPushButton(\"Tancar\")\nbutton.pressed.connect(self.close)\nlayout.addWidget(button)\nwidget = QWidget()\nwidget.setLayout(layout)\nself.setCentralWidget(widget)\nif __name__ == '__main__':    \napp = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\napp.exec()\n</code></pre> <p>\u00c9s l'Hola m\u00f3n! amb un bot\u00f3 per tancar.</p> <p></p> <p>Ara executem a un terminal:</p> Bash<pre><code>pyinstaller.exe -n \"Hola m\u00f3n!\" -w --onefile .\\holamon_pyside6.py\n</code></pre> <p>On les opcions utilitzades s\u00f3n:</p> <ul> <li>-n per a donar-li nom a l'executable</li> <li>-w per a indicar que \u00e9s un programa amb GUI i no de consola, de forma que no apareixer\u00e0 la shell durant la seua execuci\u00f3</li> <li>--onefile que empaquete tots els arxius en un \u00fanic arxiu executable</li> </ul>"},{"location":"unitats/7-Components-Designer/enlla%C3%A7os/enlla%C3%A7os/","title":"Unitat 4 - Components d'usuari","text":""},{"location":"unitats/7-Components-Designer/enlla%C3%A7os/enlla%C3%A7os/#enllacos-dinteres","title":"Enlla\u00e7os d'inter\u00e9s","text":"<ol> <li>Repositori de llibreries Qt Inqlude</li> <li>Col\u00b7lecci\u00f3 de widgets de Qt Marketplace</li> <li>Col\u00b7lecci\u00f3 de widgets Qt a la KDE Store</li> <li>Documentaci\u00f3 de PySide6 amb exemples de com personalitzar Widgets mitjan\u00e7ant fulls d'estil</li> <li>Documentaci\u00f3 PySide6 - QElapsedTimer Class</li> <li>Documentaci\u00f3 PySide6 - QTimer Class</li> <li>Documentaci\u00f3n PySide6 - QTime Class</li> <li>Article de com gestionar les variables d'entorn en Windows i Linux</li> <li>Variables de entorno en Mac OS X</li> <li>PySide6 - Exemples de widgets</li> </ol>"},{"location":"unitats/7-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/","title":"1 Alternatives en la creaci\u00f3 de components","text":""},{"location":"unitats/7-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#1-alternatives-en-la-creacio-de-nous-components","title":"1. Alternatives en la creaci\u00f3 de nous components","text":"<p>Totes les tecnologies destinades a la creaci\u00f3 d'interf\u00edcies d'usuari inclouen un conjunt de components per utilitzar als formularis dissenyats, format pels controls m\u00e9s habituals a les aplicacions GUI. Tot i aix\u00f2, en algunes ocasions la funcionalitat de la nostra aplicaci\u00f3 pot requerir l'\u00fas d'un component que la nostra tecnologia d'interf\u00edcie no inclou.</p> <p>Per incorporar nous components a les nostres aplicacions tenim dues alternatives:</p> <ul> <li> <p>Utilitzar components desenvolupats per tercers (empreses o desenvolupadors independents). \u00c9s important con\u00e8ixer la llic\u00e8ncia que s'aplica al component, sobretot si es tracta d'una llic\u00e8ncia comercial o lliure.</p> </li> <li> <p>Desenvolupar el component que necessitem per utilitzar-lo a la nostra aplicaci\u00f3. La majoria de les tecnologies d'interf\u00edcie d'usuari incorporen mecanismes que permeten als desenvolupadors crear components nous, com veurem al llarg d'aquesta unitat. </p> </li> </ul> <p>!!!warning 'IMPORTANT'     En el cas particular del framework Qt, la varietat de components inclosos \u00e9s molt \u00e0mplia, i \u00e9s una de les raons per les quals l'oferta de controls desenvolupats per tercers no \u00e9s tan abundant com en altres tecnologies. Als enlla\u00e7os de la unitat s'inclouen alguns llocs web on aconseguir controls de tercers per Qt.</p>"},{"location":"unitats/7-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#11-personalitzar-laparenca-del-component","title":"1.1 Personalitzar l'aparen\u00e7a del component","text":"<p>De vegades, la funcionalitat del nou component que necessitem coincideix completament amb la d'un control existent, i simplement un canvi en la seva aparen\u00e7a visual pot ser suficient. Moltes de les tecnologies d'interf\u00edcie existents permeten modificar completament l'aparen\u00e7a visual d'un component, de manera que, encara que no canvia la l\u00f2gica, l'usuari el percebr\u00e0 com un control diferent.</p> <p>EXEMPLE</p> <p>Avui dia \u00e9s habitual trobar a les interf\u00edcies que utilitzem (sobretot a les destinades a dispositius m\u00f2bils) un control de tipus interruptor o switch, que ens permet alternar entre dos estats. La funcionalitat d'aquest control \u00e9s realment la mateixa que una casella de verificaci\u00f3, per la qual cosa podr\u00edem canviar la seva aparen\u00e7a perqu\u00e8 es comporti visualment com un interruptor.</p> <p></p>"},{"location":"unitats/7-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#12-derivar-dun-component-existent","title":"1.2 Derivar d'un component existent","text":"<p>Moltes vegades, la funcionalitat del nou component que volem crear no coincideix exactament amb la de cap component existent, per\u00f2 \u00e9s molt similar. En aquests casos, la soluci\u00f3 sol consistir a crear un component derivat del que ja n'hi ha, realitzant les modificacions pertinents (que normalment consistiran a afegir propietats, senyals i ranures).</p> <p>No sempre necessitarem derivar directament d'un component existent, sin\u00f3 que de vegades ser\u00e0 m\u00e9s convenient basar-se en alguna classe superior a la cadena d'her\u00e8ncia del component, que aporti la funcionalitat base que necessitem per al nostre nou control.</p> <p>EXEMPLE</p> <p>Qt disposa d'algunes classes abstractes que serveixen de base per crear alguns components. Per exemple, de la classe QAbstractButton deriven els diferents tipus de botons (QCheckBox, QPushButton, QRadioButton i QToolButton). Si ens plantegem dissenyar un bot\u00f3 personalitzat, podr\u00edem optar per partir directament de la classe abstracta, o d'alguna de les classes derivades. </p>"},{"location":"unitats/7-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#13-crear-un-component-completament-nou","title":"1.3 Crear un component completament nou","text":"<p>Si la funcionalitat del nostre nou component no est\u00e0 relacionada amb la de cap altre component existent, haurem de crear-lo des de zero. En la majoria dels casos, aix\u00f2 implica heretar una classe base antecessora de tots els components (en el cas de Qt, seria la classe QWidget). </p> <p>En el cas de crear un component totalment nou, haurem d'alguna manera definir-ne la geometria i l'aparen\u00e7a visual. A Qt disposem per a aix\u00f2 de la classe QPainter, amb una gran quantitat de m\u00e8todes per poder dibuixar el nostre control.  </p>"},{"location":"unitats/7-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#14-afegir-diversos-components-existents","title":"1.4 Afegir diversos components existents","text":"<p>\u00c9s habitual trobar una \u00faltima opci\u00f3 per crear nous components, consistent a afegir diversos components existents (o fins i tot combinar components inclosos al framework amb altres creats per nosaltres o per tercers). </p> <p>EXEMPLE</p> <p>Un possible exemple de component agregat seria un quadre de text amb indicador del nombre de car\u00e0cters escrits. En aquest cas, haur\u00edem d'afegir un quadre de text on l'usuari escriuria i una etiqueta per indicar el nombre de car\u00e0cters.</p>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/","title":"2 Nous components","text":""},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#2-creacio-de-nous-components-per-codi","title":"2. Creaci\u00f3 de nous components per codi.","text":"<p>Els components s\u00f3n utilitzats, entre altres coses, per amagar la complexitat del programari en parts m\u00e9s manejables. Cada component amaga la seva complexitat darrere d'una interf\u00edcie formada per les seves propietats i m\u00e8todes a qu\u00e8 es t\u00e9 acc\u00e9s. Poden introduir-se i eliminar-se, fins i tot ser intercanviats com a part dun tot. </p> <p>Aix\u00f2 redueix la complexitat del desenvolupament programari i millora el seu manteniment, permetent que el mateix codi pugui ser reutilitzat a diferents llocs. El resultat \u00e9s un bloc de codi encapsulat en una classe independent que passa a formar part del banc de peces disponibles per formar part de desenvolupaments m\u00e9s complexos.</p>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#21-components-definits-per-lusuari","title":"2.1 Components definits per l'usuari","text":"<p>Per comen\u00e7ar a desenvolupar un component propi, el m\u00e9s f\u00e0cil \u00e9s buscar un component des del qual partir, de manera que se n'hereten les propietats i m\u00e8todes i aix\u00ed poder utilitzar-los en el component que volem crear. Per exemple, si voleu un di\u00e0leg customitzat, podem heretar de QDialog, si volem un component bot\u00f3 amb alguna funcionalitat customitzada, podem heretar de QButton. En cas que el nostre component no guardi relaci\u00f3 estreta amb altres components, el m\u00e9s adequat ser\u00e0 heretar de QWidget directament, que \u00e9s la classe base des de la qual hereta la resta de Widgtes.</p> <p>A m\u00e9s, podem utilitzar classes privades als nostres components que ens ajudin a produir un codi m\u00e9s organitzat i mantenible.</p>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#22-exemple-component-cronometre","title":"2.2 Exemple: component cron\u00f2metre","text":"<p>Il\u00b7lustrarem tot aix\u00f2 amb un exemple que anirem construint pas a pas.</p> <p>En alguna de les nostres aplicacions ens pot fer falta un component visual que serveixi per mesurar el temps transcorregut, per exemple podria servir per mesurar el temps que portem per fer una tasca de classe, per mesurar el transcurs d'una activitat esportiva, etc. Crearem un component que posteriorment podem afegir a diferents aplicacions amb interf\u00edcie gr\u00e0fica d'usuari, sense necessitat de tornar-lo a crear a cadascuna, sin\u00f3 que reutilitzarem el codi generat per a la seva creaci\u00f3.</p>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#221-eleccio-de-lobjecte-base","title":"2.2.1 Elecci\u00f3 de l'objecte base","text":"<p>Si pensem en quin component utilitzar com a base, veiem que no hi ha cap component al qual puguem afegir funcionalitat de forma r\u00e0pida i que ens serveixi per a la nostra finalitat, aix\u00ed que partim de la classe base QWidget i en farem servir d'altres ginys per construir el nostre component.</p>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#221-classe-cronometre-sense-interficie","title":"2.2.1 Classe cron\u00f2metre (sense interf\u00edcie)","text":"<p>Comencem definint una classe que ens servir\u00e0 per controlar de manera interna el temps transcorregut i el temps transcorregut entre pauses, ja que construirem un cron\u00f2metre amb la possibilitat de pausa. D'aquesta classe obtindrem, de tant en tant, el temps transcorregut des que vam posar en marxa el cron\u00f2metre i la difer\u00e8ncia entre el transcorregut i el pausat en cas d'haver utilitzat alguna pausa. </p> <p>La classe utilitzada a Qt per controlar el temps transcorregut \u00e9s QElapsedTimer. La idea \u00e9s fer servir el comptador de temps transcorregut (__temps_transcorregut) en posar en marxa el comptador. Si mentre estigueu en marxa, volem pausar el compte, fem \u00fas d'un altre comptador (__temps_pausat) per mesurar el temps que el comptador ha estat pausat, aix\u00ed, mostrarem la difer\u00e8ncia entre tots dos per mostrar el temps correcte del cron\u00f2metre. Per controlar tot aix\u00f2 definirem la seva interf\u00edcie a la secci\u00f3 seg\u00fcent.</p> Python<pre><code>from PySide6.QtCore import QTime, QElapsedTimer\nclass Cronometre():\ndef __init__(self):\nself.__temps_transcorregut = QElapsedTimer()\nself.__temps_pausa = QElapsedTimer()\nself.__acumulador = 0\ndef reiniciar(self):\nself.__temps_transcorregut.restart()\nself.__acumulador = 0\ndef getTime(self):\nreturn QTime(0, 0).addMSecs(self.__temps_transcorregut.elapsed() - self.__acumulador)\ndef pausar(self):\nself.__temps_pausa.restart()\ndef continuar(self):\nself.__acumulador = self.__acumulador + self.__tiempo_pausa.elapsed()\n</code></pre> <p>Fixa't que hem definit totes les propietats de l'anterior classe com a privades, ja que van precedides de doble gui\u00f3 baix. De manera que des de fora de la classe no s'hi pot accedir, nom\u00e9s podem interactuar amb el control del temps a trav\u00e9s dels seus m\u00e8todes reiniciar, pausar i continuar. Amb obtenirTemps, obtindr\u00edem el temps de marxa del cron\u00f2metre, independentment de si ha estat pausat o no.</p>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#222-definicio-de-la-interficie-del-component","title":"2.2.2 Definici\u00f3 de la interf\u00edcie del component","text":"<p>Un cop tenim definida la classe que controla el nostre temps, \u00e9s moment de definir la interf\u00edcie del nostre component que en far\u00e0 \u00fas. Per mostrar el temps transcorregut podem fer \u00fas d\u201funa etiqueta (QLabel) amb el format hhss, on hh s\u00f3n les hores transcorregudes, mm els minuts i ss els segons. Es podria reescriure el codi perqu\u00e8 el cron\u00f2metre tingu\u00e9s la possibilitat d'explicar els mil\u00b7lisegons, per\u00f2 per a l'exemple que estem desenvolupant el deixarem en segons.</p> <p>Definirem tamb\u00e9 un parell de botons (QPushButton), un per iniciar/parar i reiniciar el compte i un altre per pausar/continuar. A m\u00e9s, el nostre cron\u00f2metre tindr\u00e0 la possibilitat d'avisar mitjan\u00e7ant l'emissi\u00f3 d'un senyal definit per codi que s'ha arribat al temps marcat a l'av\u00eds. Aquest senyal ser\u00e0 em\u00e8s quan el temps d'av\u00eds i el temps del cron\u00f2metre coincideixin, sempre que el checkbox estigui activat. Per introduir el temps fem \u00fas d'un QTimeEdit. La interf\u00edcie quedaria de la manera seg\u00fcent:</p> <p></p> <p>El codi complet del component \u00e9s el seg\u00fcent. </p> Python<pre><code>from PySide6.QtWidgets import (\nQLabel, QWidget, QPushButton, QVBoxLayout, QCheckBox,\nQTimeEdit, QHBoxLayout\n)\nfrom PySide6.QtCore import (\nQTime, QTimer, Slot, QElapsedTimer, QSize, Qt, Signal\n)\nfrom PySide6.QtGui import QIcon\nimport recursos_cronometre\nclass Cronometro():\ndef __init__(self):\nself.__tiempo_transcurrido = QElapsedTimer()\nself.__tiempo_pausa = QElapsedTimer()\nself.__acumulador = 0\ndef iniciar(self):\nself.__tiempo_transcurrido.restart()\nself.__acumulador = 0\ndef obtenerTiempo(self):\nreturn QTime(0, 0).addMSecs(\nself.__tiempo_transcurrido.elapsed() - self.__acumulador)\ndef pausar(self):\nself.__tiempo_pausa.restart()\ndef continuar(self):\nself.__acumulador = self.__acumulador + self.__tiempo_pausa.elapsed()\nclass CronometroUI(QWidget):\nmensaje = Signal(str)\nCRONOMETRO_RESET = 0\nCRONOMETRO_INICIADO = 1\nCRONOMETRO_PAUSADO = 2\nCRONOMETRO_PARADO = 3\nLISTA_ICONOS = {\n'play': ':/icons/play.png',\n'pause': ':/icons/pause.png',\n'stop': ':/icons/stop.png',\n'resume': ':/icons/resume.png',\n'restart': ':/icons/restart.png'\n}\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nlayout = QVBoxLayout()\nself.__estado = self.CRONOMETRO_RESET\nself.setLayout(layout)\nself.__cronometro = Cronometro()\nself.__tiempo = QTimer(self)\nself.__tiempo_aviso = QTime(0, 0, 0, 0)\nself.etiqueta = QLabel(QTime(0, 0).toString(\"hh:mm:ss\"), self)\nself.etiqueta.setMinimumHeight(50)\nself.etiqueta.setAlignment(Qt.AlignCenter)\nself.etiqueta.setStyleSheet(\n\"background-color: white;\"\n\"border: 2px solid black;\"\n\"font-size: 25px\"\n)\nself.boton_inicio = QPushButton(\nQIcon(self.LISTA_ICONOS['play']), \"\", self)\nself.boton_inicio.setIconSize(QSize(50, 50))\n# self.boton_inicio.setCheckable(True)\nself.boton_pausa = QPushButton(\nQIcon(self.LISTA_ICONOS['pause']), \"\", self)\nself.boton_pausa.setIconSize(QSize(50, 50))\n# self.boton_inicio.setCheckable(True)\nself.boton_pausa.setDisabled(True)\nself.aviso = QCheckBox(\"Avisar cuando llegue a ...\", self)\nself.editor_tiempo_aviso = QTimeEdit(QTime(0, 0), self)\nself.editor_tiempo_aviso.setDisplayFormat(\"hh:mm:ss\")\nlayout_horizontal = QHBoxLayout()\nlayout_horizontal.addWidget(self.aviso)\nlayout_horizontal.addWidget(self.editor_tiempo_aviso)\nlayout.addLayout(layout_horizontal)\nlayout.addWidget(self.etiqueta)\nlayout.addWidget(self.boton_inicio)\nlayout.addWidget(self.boton_pausa)\nself.__tiempo.timeout.connect(self.actualizar_tiempo)\nself.boton_inicio.clicked.connect(self.iniciar_parar)\nself.boton_pausa.clicked.connect(self.pausar_continuar)\nself.editor_tiempo_aviso.timeChanged.connect(\nself.actualizar_tiempo_aviso)\n@Slot()\ndef actualizar_tiempo(self):\ncrono_actual = self.__cronometro.obtenerTiempo()\nself.etiqueta.setText(\ncrono_actual.toString(\"hh:mm:ss\"))\nself.etiqueta.repaint()  # Actualiza el valor antes de lanzar aviso\nif self.aviso.isChecked():\nif -200 &lt; self.__tiempo_aviso.msecsTo(crono_actual) &lt; 200:\nself.mensaje.emit(\"Tiempo l\u00edmite alcanzado\")\n@Slot()\ndef iniciar_parar(self):\nif self.__estado == self.CRONOMETRO_RESET:  # Iniciar\nself.__cronometro.iniciar()\nself.__tiempo.start(1000)\nself.__estado = self.CRONOMETRO_INICIADO\nself.boton_pausa.setDisabled(False)\nself.boton_inicio.setIcon(QIcon(self.LISTA_ICONOS['stop']))\nelif self.__estado == self.CRONOMETRO_PARADO:  # Reiniciar\nself.__estado = self.CRONOMETRO_RESET\nself.etiqueta.setText(\nQTime(0, 0).toString(\"hh:mm:ss\"))\nself.boton_inicio.setIcon(QIcon(self.LISTA_ICONOS['play']))\nelse:  # Parar\nself.__tiempo.stop()\nself.__estado = self.CRONOMETRO_PARADO\nself.boton_inicio.setIcon(QIcon(self.LISTA_ICONOS['restart']))\nself.boton_pausa.setDisabled(True)\n@Slot()\ndef pausar_continuar(self):\nif self.__estado == self.CRONOMETRO_INICIADO:  # Pausar\nself.__cronometro.pausar()\nself.__tiempo.stop()\nself.__estado = self.CRONOMETRO_PAUSADO\nself.boton_pausa.setIcon(QIcon(self.LISTA_ICONOS['resume']))\nself.boton_inicio.setDisabled(True)\nelse:  # Continuar\nself.__cronometro.continuar()\nself.__tiempo.start()\nself.__estado = self.CRONOMETRO_INICIADO\nself.boton_pausa.setIcon(QIcon(self.LISTA_ICONOS['pause']))\nself.boton_inicio.setDisabled(False)\n@Slot()\ndef actualizar_tiempo_aviso(self):\nself.__tiempo_aviso = self.editor_tiempo_aviso.time()\nif __name__ == \"__main__\":\nfrom PySide6.QtWidgets import QApplication\napp = QApplication([])\ncrono = CronometroUI()\ncrono.show()\napp.exec()\n</code></pre> <p>\u00das de recursos</p> <p>Si et fixes, a la l\u00ednia 42, s'ha definit un diccionari amb les rutes a les icones. Per a definir les rutes s'ha utilitzat els dos punt \":\" per a fer refer\u00e8ncia als recursos. No es tracta d'una ruta al disc dur, sin\u00f3 que s'indica la ruta al recurs. Aquesta s'indica a un arxiu de recursos \".qrc\"</p> <p>Mira la relaci\u00f3 entre ':/icons/play.png' i el seg\u00fcent arxiu .qrc XML<pre><code>&lt;!DOCTYPE RCC&gt;\n&lt;RCC version=\"1.0\"&gt;\n&lt;qresource prefix=\"icons\"&gt;\n&lt;file alias=\"play.png\"&gt;images/play.png&lt;/file&gt;\n&lt;file alias=\"pause.png\"&gt;images/pause.png&lt;/file&gt;\n&lt;file alias=\"resume.png\"&gt;images/resume.png&lt;/file&gt;\n&lt;file alias=\"stop.png\"&gt;images/stop.png&lt;/file&gt;\n&lt;file alias=\"restart.png\"&gt;images/restart.png&lt;/file&gt;\n&lt;/qresource&gt;\n&lt;/RCC&gt;\n</code></pre></p> <p>Per a indicar la ruta al recurs hem utilitzat el prefix i l'alias, mentre que el contingut de l'etiqueta xml indica la ruta on es troba la imatge al disc dur.</p> <p>Per a produir un arxiu .py de recursos, utilitzarem pyside6-rcc. Aix\u00ed, generarem l'arxiu recursos_cronometre.py amb la seg\u00fcent ordre:</p> Bash<pre><code>pyside6-rcc recursos_cronometre.qrc -o recursos_cronometre.py\n</code></pre>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#223-senyals-definits-per-lusuari","title":"2.2.3 Senyals definits per l'usuari","text":"<p>Com hem comentat anteriorment, farem servir l'emissi\u00f3 d'un senyal per avisar que el temps s'ha complert. Per aix\u00f2, nom\u00e9s cal definir un senyal en el nostre component i emetre'l per codi quan es donen les condicions que desitgem, ja sigui un esdeveniment de l'usuari o unes condicions que es compleixin.</p> <p>A la definici\u00f3 del senyal, es rep com a par\u00e0metre el tipus d'informaci\u00f3 que l'acompanyar\u00e0 quan s'emeti. En el punt en qu\u00e8 emetem el senyal, donarem valor a aquesta informaci\u00f3, definint-ne ja el valor. En aquest cas emetrem al costat del senyal, un missatge indicant que s'ha complert el temps, aix\u00ed que en la seva definici\u00f3 li passarem com a argument un str. Aquest senyal definit mitjan\u00e7ant codi, s'utilitzar\u00e0 igual que qualsevol altre senyal, \u00e9s a dir, el connectarem a un slot per executar la funcionalitat desitjada quan s'emeti. Mostrem aqu\u00ed els fragments que afecten la definici\u00f3 i emissi\u00f3 del senyal:</p> <p>Senyal mensaje</p> <p>De moment sols emetem el senyal, per\u00f2 s'executar\u00e0 res en emetre aquesta, ja que no li hem assignat un slot. Si incorporem este component a una aplicaci\u00f3, en podr\u00edem fer \u00fas.</p> Python<pre><code>from PySide6.QtCore import Signal\n...\nself.mensaje = Signal(str)\n...\nself.mensaje.emit(\u200b\u200b\"Temps l\u00edmit assolit\")\n</code></pre>"},{"location":"unitats/7-Components-Designer/teoria/2-Nous%20components/#224-logica-interna-del-component","title":"2.2.4 L\u00f2gica interna del component","text":"<p>Nom\u00e9s cal definir la l\u00f2gica interna del component. La idea b\u00e0sica \u00e9s, definim un QTimer, que \u00e9s la classe Qt utilitzada per implementar temporitzadors. S'usa connectant una ranura al seu senyal timeout, que ser\u00e0 emesa a intervals regulars cada x mil\u00b7lisegons. El nombre de mil\u00b7lisegons es rep com a argument a la seva funci\u00f3 start().  Veiem aqu\u00ed la part que fa refer\u00e8ncia al temporitzador en el nostre component:</p> Python<pre><code>from PySide6.QtCore import QTimer\n...\nself.__temps = QTimer(self)\nself.__tiempo.timeout.connect(self.actualitzar_temps)\n...\nself.__tiempo.start (1000)\n...\nself.__tiempo.stop()\n...\n</code></pre> <p>Al nostre component definim un QTimer privat, que no podr\u00e0 ser modificat des de fora del nostre component. Cada segon actualitzar\u00e0 el temps mostrat al display del component, ja que hem llan\u00e7at el QTimer amb el par\u00e0metre 1000.  En actualitzar el cron\u00f2metre tamb\u00e9 comprovar\u00e0 si heu d'emetre el senyal d'av\u00eds. En cas que la difer\u00e8ncia entre el temps del cron\u00f2metre i de l'av\u00eds sigui menor de 200 mil\u00b7lisegons, es llan\u00e7ar\u00e0 l'av\u00eds. S'ha de deixar un petit marge perqu\u00e8 es poden produir retards en els processos que s'estan executant a l'ordinador, i de no deixar aquest marge, la comparaci\u00f3 entre el temps actual i el del timeout pot ser massa gran i no llan\u00e7ar l'av\u00eds, sobretot en ordinadors lents o amb molts processos en execuci\u00f3.</p> Python<pre><code>self.__temps = QTimer(self)\nself.__tiempo.timeout.connect(self.actualitzar_temps)\n@Slot()\ndef actualitzar_temps(self):\ncrono_actual = self.__cronometro.obtenerTemps()\nself.etiqueta.setText(\ncrono_actual.toString(\"hh:mm:ss\"))\nself.etiqueta.repaint() \n# Perqu\u00e8 actualitzeu el valor abans de llan\u00e7ar l'av\u00eds\nif self.aviso.isChecked():\nif -200 &lt; self.__temps_aviso.msecsTo(crono_actual) &lt; 200:\nself.mensaje.emit(\u200b\u200b\"Temps l\u00edmit assolit\")\n</code></pre> <p>Finalment, necessitem representar l'estat intern del cron\u00f2metre per implementar les funcionalitats de parar/iniciar i reiniciar per una banda i les de pausar/continuar per una altra. Per aix\u00f2 definim quatre estats:</p> Text Only<pre><code>    CRONOMETRO_RESET = 0 # Estat inicial\n    CRONOMETRO_INICIADO = 1\n    CRONOMETRO_PAUSADO = 2\n    CRONOMETRO_PARADO = 3\n</code></pre> <p>De l'estat inicial passar\u00e0 a iniciat prement en iniciar (play). Des d'aquest es podr\u00e0 parar (stop) o pausar (pause), passant als estats aturat i pausat respectivament. En estat pausat podr\u00e0 iniciar-se novament amb el continuar (continue) i passar\u00e0 a iniciat. Des de l'estat aturat, si feu clic a reiniciar (restart) tornareu a l'estat inicial. En el diagrama d'estats seg\u00fcent queda reflectit l'anterior comportament.</p> <p></p> <p>Amb aix\u00f2 tenim complet el codi del nostre component, disponible a l'arxiu DI_U04_A02_01.py (recorda que fa \u00fas del fitxer de recursos DI_U04_A02_03.py). Per\u00f2 un component per si mateix no \u00e9s \u00fatil, ja que no podem executar-lo, ja que nom\u00e9s cont\u00e9 la definici\u00f3 i la implementaci\u00f3 d'una classe, per\u00f2 cap inst\u00e0ncia de la mateixa. Per aix\u00f2, veurem en el seg\u00fcent apartat, com integrar-lo en una aplicaci\u00f3.</p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/","title":"Utilitzaci\u00f3 dels nous components en aplicacions.","text":"<p>La creaci\u00f3 d'un nou component ens afegeix una nova possibilitat al nostre banc de peces utilitzables. Aquests nous components, ara, poden ser utilitzats en diferents aplicacions per crear desenvolupaments m\u00e9s complexos sense haver de reescriure el codi. Aix\u00ed tenim la possibilitat de reutilitzar codi escrit per nosaltres mateixos o per tercers i utilitzar-lo a les nostres aplicacions. </p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#importacio-de-components","title":"Importaci\u00f3 de components","text":"<p>Per fer servir els nostres components, el primer pas sempre ser\u00e0 incorporar el codi dels nostres components a una aplicaci\u00f3 amb la instrucci\u00f3 import de python. A partir d'aquest moment, les classes definides en aquests fitxers de codi passaran a estar disponibles a la nostra aplicaci\u00f3.</p> <p>Estudiem una mica el sistema d'importaci\u00f3 de m\u00f2duls i paquets de python abans de fer servir els nostres components.</p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#moduls","title":"M\u00f2duls","text":"<p>Un m\u00f2dul de python es defineix segons el glossari de python.org com:</p> <p>Objecte de python</p> <p>Un objecte serveix com a unitat organitzativa del codi de Python. Tenen un espai de noms que cont\u00e9 objectes Python arbitraris. Es carreguen mitjan\u00e7ant el proc\u00e9s d'importaci\u00f3.</p> <p>A la pr\u00e0ctica, un m\u00f2dul python \u00e9s un fitxer .py amb codi.</p> <p>Per exemple, imaginem que tenim un fitxer constants.py amb el codi PI=3.14159 al seu interior. Aleshores usar\u00edem el codi seg\u00fcent, situat a la mateixa ruta que el fitxer de constants, per imprimir el valor de la constant per consola:</p> Python<pre><code>import constants\nprint(constants.PI)\n</code></pre>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#paquets","title":"Paquets","text":"<p>Un paquet de python es defineix segons el glossari de python .org com:</p> <p>\u201cUn m\u00f2dul de Python que pot contenir subm\u00f2duls o, recursivament, subpaquets. T\u00e8cnicament, un paquet \u00e9s un m\u00f2dul de Python amb un atribut path.\u201d</p> <p>Fixa't que un paquet no ha de ser un m\u00f2dul, aix\u00ed que no importa si el que estem important est\u00e0 estructurat com un m\u00f2dul o com un paquet. Per a un usuari, aix\u00f2 \u00e9s indiferent, ja que la importaci\u00f3 funciona de manera an\u00e0loga.</p> <p>A la pr\u00e0ctica, un paquet \u00e9s una carpeta que cont\u00e9 fitxers de python i altres carpetes. Per crear un paquet, cal crear un directori i al seu interior, un fitxer anomenat init.py. Aquest fitxer cont\u00e9 el codi quan es tracta com un m\u00f2dul. Es pot deixar buit en cas que vulguem organitzar el nostre codi en una estructura de subcarpetes. Tamb\u00e9 podeu contenir imports impl\u00edcits.</p> <p>Vegem un exemple:</p> Text Only<pre><code>app.py\n\nidiomes/\n\n\u251c\u2500\u2500 africa/\n\n\u2502   \u251c\u2500\u2500 __init__.py \n\n\u2502   \u2514\u2500\u2500 suahilli.py\n\n\u251c\u2500\u2500\u2500 europa/\n\n\u2502   \u251c\u2500\u2500 __init__.py\n\n\u251c\u2500\u2500\u2500 espa\u00f1ol.py\n\n\u251c\u2500\u2500 ingles.py\n\n\u2514\u2500\u2500 __init__.py -&gt; buit\n</code></pre> Arxiu Contingut idioma/init.py (buit) idiomes/africa/init.py (buit) idiomes/africa/suahilli.py salutaci\u00f3 = 'Salamu, Dunia!' idiomes/europa/init.py from . import espanyol idiomes/europa/espa\u00f1ol.py salutaci\u00f3 = 'Hola m\u00f3n!' idiomes/europa/ingles.py salutaci\u00f3 = 'Hello world!' <p>Utilitzarem aquest paquet al fitxer app.py. El codi quedaria com segueix:</p> Python<pre><code>from idiomes.africa import suahili\nprint(suahili.salut)\nfrom idiomes import europa\nprint(europa.espanyol.salut)\nimport idiomes.europa.ingles as angl\u00e8s\nprint(angles.salut)\n</code></pre> <p>Fixeu-vos que en el primer cas, per utilitzar la salutaci\u00f3 a suahilli, hem de fer l'import expl\u00edcitament per poder-lo fer servir. En el segon cas, ja que tenim l'import en idiomes/europa/init.py, nom\u00e9s cal importar el paquet europa per poder fer servir la salutaci\u00f3 en espanyol. En el darrer cas, necessitem importar el m\u00f2dul ingles.py per poder fer servir la salutaci\u00f3 en aquest idioma.</p> <p>Si executem el codi, obtenim el resultat seg\u00fcent per consola:</p> Bash Session<pre><code>Salamu, Dunia!\nHola m\u00f3n!\nHello world!\n</code></pre> <p>Nota</p> <p>Aquesta forma d'estructurar i usar els paquets i m\u00f2duls, pot servir-vos per mantenir el codi dels vostres components organitzats de forma l\u00f2gica i c\u00f2moda per utilitzar-lo en el desenvolupament de projectes.</p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#us-de-components-a-laplicacio-principal","title":"\u00das de components a l'aplicaci\u00f3 principal","text":"<p>Un cop importat el component a la nostra aplicaci\u00f3, procedim a utilitzar-lo com qualsevol altre component de la llibreria PySide6. El primer pas ser\u00e0 crear les inst\u00e0ncies que en necessitem, per posteriorment actuar sobre l'objecte. Tindrem disponibles totes les propietats i els m\u00e8todes p\u00fablics que hagi heretat de la seva classe base, m\u00e9s les propietats i m\u00e8todes que us haguem definit en la seva implementaci\u00f3.</p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#exemple-cronometre","title":"Exemple cron\u00f2metre","text":"<p>Continuant amb l'exemple del cron\u00f2metre, incorporarem el nostre component a una aplicaci\u00f3.</p> <p>Com hem indicat, el primer pas consistir\u00e0 a importar el nostre component:</p> Python<pre><code>from cronoimetre import CronometroUI\n</code></pre> <p>A m\u00e9s necessitem importar tamb\u00e9 el nostre arxiu de recursos compilat, ja que si et fixes a l'arxiu recursos_a03.qrc, veureu que hem definit un recurs cronometro.png per carregar la nostra icona d'aplicaci\u00f3.</p> Python<pre><code>import recursos_a03.py \n</code></pre> <p>Amb els m\u00f2duls necessaris incorporats al nostre codi, utilitzarem el nostre component com ho far\u00edem amb qualsevol altre component de la PySide6. En aquesta ocasi\u00f3 crearem una aplicaci\u00f3 que estigui sempre al system tray o safata del sistema. Anem a veure el codi per aconseguir aquest prop\u00f2sit.</p> <p>Primer creem l'aplicaci\u00f3 i configurem que no es tanque en tancar l'\u00faltima finestra (perqu\u00e8 es mantinga a la safata del sistema encara que tanquem la finestra) i assignem una icona.</p> Python<pre><code>    app = QApplication([])\napp.setQuitOnLastWindowClosed(False)\napp.setWindowIcon(QIcon(\":/icons/cronometro.png\"))\n</code></pre> <p>Assignem una icona a la safata del sistema i connectem el senyal activated perqu\u00e8 ens mostri/oculti la finestra d'execuci\u00f3 de l'aplicaci\u00f3:</p> Python<pre><code>    icon = QIcon(QIcon(\":/icons/cronometro.png\"))\ntray = QSystemTrayIcon()\ntray.setIcon(icon)\ntray.setVisible(True)\ntray.activated.connect(mostrar_ocultar)\n</code></pre> <p>Seguidament inst\u00e0nciem al component i li assignem un t\u00edtol. Tamb\u00e9 configurem que sempre siga visible, per quan fem clic a la icona de l'aplicaci\u00f3 a la safata del sistema ens mostre l'aplicaci\u00f3.</p> Python<pre><code>    cronometro.setWindowTitle(\"Cron\u00f2metre PySide6\")\ncronometro.setWindowFlag(Qt.WindowStaysOnTopHint)\n</code></pre> <p>Finalment, ens queda afegir la possibilitat d'acabar l'aplicaci\u00f3 des de la safata del sistema. D'altra manera, nom\u00e9s seria possible acabar matant el proc\u00e9s, ja que en tancar la finestra l'aplicaci\u00f3 es mant\u00e9 en execuci\u00f3. </p> <p>Per fer-ho, creem una acci\u00f3 de sortir a la qual connectem l'slot quit de l'aplicaci\u00f3. Finalment, afegim aquesta acci\u00f3 a un men\u00fa contextual que apareixer\u00e0 en fer clic amb el bot\u00f3 secundari del ratol\u00ed sobre la icona de l'aplicaci\u00f3 a la safata del sistema.</p> Python<pre><code>    accion_sortir = QAction(\"Sortir\", cron\u00f2metre)\naccion_salir.triggered.connect(app.quit)\nmenu = QMenu()\nmenu.addAction(accion_sortir)\ntray.setContextMenu(menu)\n</code></pre>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#us-del-senyal-del-component","title":"\u00das del senyal del component","text":"<p>Quan creem el component, definirem un senyal que s'emetia sempre que el temps a qu\u00e8 arriba el cron\u00f2metre coincidira amb el temps d'av\u00eds i el checkbox d'avisar estigu\u00e9s marcat. Farem \u00fas daquest senyal.</p> <p>El disseny del component no defineix un comportament predeterminat a l'esdeveniment en complir-se el temps d'av\u00eds, sin\u00f3 que simplement s'emet el senyal acompanyat d'un missatge, aix\u00ed que ens dota de llibertat total per utilitzar aquest senyal i connectar-lo a l'slot que definim a la nostra aplicaci\u00f3.</p> <p>Nosaltres la farem servir per mostrar un QMessageBox amb el missatge que ens envia el senyal informant que el temps s'ha complert. No \u00e9s obligatori fer servir aquest missatge, podem utilitzar el nostre propi missatge si aix\u00ed ho desitgem.</p> Python<pre><code>cronometro.mensaje.connect(mostrar_aviso)\n@Slot()\ndef mostrar_aviso(missatge):\nQMessageBox.information(cronometre, \"Cron\u00f2metre PySide6\", missatge)\n</code></pre>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#us-de-decoradors-a-python","title":"\u00das de decoradors a Python","text":"<p>T'haur\u00e0s fixat en l'apartat anterior que fem servir la instrucci\u00f3 @Slot() abans de definir l'slot. Veurem en aquest apartat qu\u00e8 s\u00f3n els decoradors i com podem utilitzar-los als nostres components per no haver de reescriure el codi de les aplicacions si volem canviar la implementaci\u00f3 dels components.</p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#decoradors","title":"Decoradors","text":"<p>Una funci\u00f3 de decorat o un decorador \u00e9s b\u00e0sicament una funci\u00f3 que afegeix nova funcionalitat a una funci\u00f3 que es passa com a argument. Aix\u00f2 ens permet afegir una funcionalitat nova a una funci\u00f3 existent sense modificar el codi de la funci\u00f3 original ni el codi on aquesta funci\u00f3 s'utilitza.</p> <p>Fixa't al seg\u00fcent fragment de codi. </p> Python<pre><code>def funcio():\nprint(\"Funcionalitat original\")\nfuncio()\n</code></pre> <p>Si executem la funci\u00f3, obtindrem per pantalla Funcionalitat original. Com podem afegir una nova funcionalitat sense tocar el codi de la funci\u00f3 original? Aqu\u00ed \u00e9s on entren en joc els decoradors.</p> <p>Afegim un decorador a la funci\u00f3 original:</p> Python<pre><code>def decorador(funcio_original):\ndef nova_funcio():\nprint(\"Funcionalitat extra\")\nfuncio_original()\nreturn nova_funcio\n@decorador\ndef funcio():\nprint(\"Funcionalitat original\")\nfuncio()\nSi ara executem de nou el codi, la sortida per consola mostrar\u00e0 els dos missatges:\n~~~console\nFuncionalitat extra\nFuncionalitat original\n</code></pre> <p>Analitzem una mica el codi. La funcio decoradora rep com a par\u00e0metre una funci\u00f3 (funcio_original) i t\u00e9 una funci\u00f3 imbricada una altra funci\u00f3 (nova_funcio). La funci\u00f3 original s'executa dins de la nova funci\u00f3 per mantenir la seva funcionalitat mentre afegeix nova funcionalitat a la crida. La funci\u00f3 decoradora torna la nova funci\u00f3, aix\u00ed que en executar una funci\u00f3 que decorem amb aquesta funci\u00f3 decoradora, s'executar\u00e0 la funci\u00f3 original m\u00e9s la funci\u00f3 afegida sense canviar la implementaci\u00f3 de la funci\u00f3 original.</p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#el-decorador-slot","title":"El decorador @Slot()","text":"<p>Encara que PySide6 permet que qualsevol objecte callable de Python, com s\u00f3n les funcions, es facin servir com a ranures quan es connecten a senyals, de vegades cal marcar expl\u00edcitament un m\u00e8tode de Python com una ranura Qt. </p> <p>PySide6 proporciona el decorador de funcions Slot() per fer-ho. A m\u00e9s, connectar un senyal a un m\u00e8tode Python decorat tamb\u00e9 t\u00e9 l'avantatge de reduir la quantitat de mem\u00f2ria utilitzada i \u00e9s una mica m\u00e9s r\u00e0pid, aix\u00ed que \u00e9s recomanable, encara que no necessari utilitzar-los a les ranures.</p>"},{"location":"unitats/7-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#el-decorador-property","title":"El decorador @property","text":"<p>Partim del codi seg\u00fcent:</p> Python<pre><code>class Component:\ndef __init__(self, atribut):\nself.atributo = atribut\ncomponent = Component(10)\nprint(component.atributo)\n</code></pre> <p>Aquest atribut d'inst\u00e0ncia \u00e9s p\u00fablic perqu\u00e8 el seu nom no t\u00e9 un gui\u00f3 baix, per declarar-lo com a protegit, ni un doble gui\u00f3 baix, per declarar-lo com a privat. At\u00e9s que l'atribut \u00e9s p\u00fablic podem accedir-hi directament des de fora de la classe per imprimir-lo com \u00e9s el cas.</p> <p>En executar el codi, veurem a la consola el text 10.</p> <p>Per\u00f2 suposem que ens demanen que protegim aquest atribut passant-lo a privat i validem que el valor \u00e9s un enter positiu abans d'assignar-lo. Com ho fem?</p> <p>Si canviem el codi i el passem a privat, ja no hi podrem accedir des de fora de la classe:</p> Python<pre><code>class Component:\ndef __init__(self, atribut):\nself.__atribut = atribut\ncomponent = Component(10)\nprint(component.__atribut)\n</code></pre> <p>En executar el codi no sortir\u00e0 un error com el seg\u00fcent:</p> <p>AttributeError: 'Component' object has no attribute '__atribut'.</p> <p>En aquest punt, el m\u00e9s probable \u00e9s que decidiu afegir m\u00e8todes getters i setters per llegir i assignar el valor de l'atribut. Per\u00f2 aix\u00f2 t\u00e9 un problema grav\u00edssim. Si la classe ja est\u00e0 en \u00fas en algun projecte, fallar\u00e0 el programa a cada l\u00ednia que llegiu o assigneu l'atribut, ja que anteriorment era p\u00fablic i estem obligant els desenvolupadors a canviar el seu codi en canviar la nostra classe.</p> <p>Per\u00f2 aqu\u00ed \u00e9s on podem fer \u00fas del decorador @property, de manera que canviarem la nostra classe sense obligar a canviar el codi de les aplicacions que en fan \u00fas.</p> <p>Reescrivim aleshores la nostra classe amb el decorador @property:</p> Python<pre><code>class Component:\ndef __init__(self, atribut):\nself.__atribut = atribut\n@property\ndef atribut(self):\nreturn self.__atribut\n@atribut.setter\ndef atribut(self, nou_valor):\nif nou_atribut &gt; 0 and isinstance(nou_atribut, int):\nself.__atribut = nou_valor\nelse:\nprint(\"Per favor, introdu\u00efu un valor enter positiu per a l'atribut\")\n</code></pre> <p>Ara, no caldria reescriure el codi de l'aplicaci\u00f3, ja que en llegir el valor d'atribut, s'executaria el getter atribut(), retornant el valor de l'atribut privat. I en assignar el valor, s'executaria el setter atribut(nou_valor).</p> <p>Si utilitzem la classe amb el codi seg\u00fcent:</p> Python<pre><code>component = Component(10)\nprint(component.atributo)\ncomponent.atribut = -1\nprint(component.atribut)\ncomponent.atribut = 20\nprint(component.atribut)\n</code></pre> <p>El resultat seria el seg\u00fcent:</p> Bash Session<pre><code>10\nSi us plau, introdu\u00efu un valor enter positiu per a l'atribut\n10\n20\n</code></pre> <p>Fixeu-vos que en intentar assignar un valor negatiu, l'atribut no canvia de valor, sin\u00f3 que simplement llan\u00e7a l'av\u00eds per consola.</p> <p>En resum, en definir propietats de components, podem canviar la implementaci\u00f3 interna sense afectar els programes, per la qual cosa podem afegir getters i setters que actuen com a intermediaris de manera transparent per evitar accedir o modificar les dades directament. En farem \u00fas a les tasques.</p>"},{"location":"unitats/7-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/","title":"Integraci\u00f3 de components en eines de disseny","text":"<p>En els apartats anteriors hem vist com crear nous components i la manera d'utilitzar-los a les nostres aplicacions, directament al codi del programa. Tot i aix\u00f2, tamb\u00e9 resulta pr\u00e0ctic disposar d'aquests components personalitzats quan dissenyem la interf\u00edcie per mitj\u00e0 d'una eina visual de disseny.</p> <p>En aquest apartat veurem els dos mecanismes que ofereix Qt Designer per poder dissenyar formularis que incloguen components personalitzats:</p> <ul> <li>Promoci\u00f3 de components.</li> <li>Creaci\u00f3 de complements (plugins).</li> </ul>"},{"location":"unitats/7-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/#promocio-de-components","title":"Promoci\u00f3 de components","text":"<p>\u00c9s possible que durant el disseny de la interf\u00edcie d'usuari amb Qt Designer no tinguem disponible el component personalitzat que volem fer servir. Per exemple, pot ser que el component no estigui finalitzat, o que sigui espec\u00edfic per a una plataforma i el disseny s'estigui realitzant en una altra de diferent. En aquesta situaci\u00f3, podem utilitzar la funcionalitat de Qt Designer coneguda com a promoci\u00f3 de components.</p> <p>La promoci\u00f3 de components ens permet com a dissenyadors utilitzar un component que s\u00ed que tenim disponible a Qt Designer, en representaci\u00f3 del component personalitzat que no tenim. D'aquesta manera podrem fer el disseny de la interf\u00edcie encara que no disposem del nou control. </p>"},{"location":"unitats/7-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/#promocio-del-component-a-qt-designer","title":"Promoci\u00f3 del component a Qt Designer","text":"<p>El primer que hem de fer per utilitzar la promoci\u00f3 de components \u00e9s arrossegar des de la Caixa de ginys de Qt Designer al formulari el component que actuar\u00e0 com a representant. Si el component personalitzat s'ha creat derivant d'un component existent, l'ideal ser\u00e0 utilitzar aquest component base com a representant. Si no, sempre podem utilitzar com a representant un component de tipus QWidget (que trobem a la secci\u00f3 Containers de la Caixa de widgets).</p> <p>Exemple</p> <p>Si el component personalitzat que no tenim disponible \u00e9s un nou tipus de bot\u00f3 que heu creat derivant de QPushButton, el representant ser\u00e0 un control d'aquest tipus. Aix\u00ed, el comportament del component al dissenyador a la previsualitzaci\u00f3 ser\u00e0 m\u00e9s proper al que tindr\u00e0 el nou component quan se substitueixi.</p> <p>Un cop inserit el component, haurem d'obrir el di\u00e0leg Widgets promocionats mitjan\u00e7ant l'opci\u00f3 Promocionar del men\u00fa contextual del component.</p> <p>En aquest di\u00e0leg haurem de completar la informaci\u00f3 seg\u00fcent:</p> <p>Nom de la classe promocionada: indicarem la classe del nostre component personalitzat. Fitxer de cap\u00e7alera: aqu\u00ed escriurem el nom del m\u00f2dul Python que cont\u00e9 el component (el nom del fitxer de codi sense cap extensi\u00f3). </p> <p>Un cop completada la informaci\u00f3, haurem de pr\u00e9mer el bot\u00f3 Afegeix (que afegir\u00e0 aquesta configuraci\u00f3 de promoci\u00f3 a Qt Designer, per si volem reutilitzar-la), i despr\u00e9s al bot\u00f3 Promocionar (que aplicar\u00e0 aquesta configuraci\u00f3 de promoci\u00f3 al component on estem).</p> <p>Podem degradar un component promocionat de nou al vostre tipus inicial amb l'opci\u00f3 Degradar del men\u00fa contextual del component.</p> <p>Exemple</p> <p>El seg\u00fcent fragment cont\u00e9 el disseny d'un formulari en qu\u00e8 s'ha utilitzat la promoci\u00f3 de components per poder incloure el cron\u00f2metre desenvolupat en apartats anteriors. S'ha generat amb Qt Designer.</p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ui version=\"4.0\"&gt;\n&lt;class&gt;MainWindow&lt;/class&gt;\n&lt;widget class=\"QMainWindow\" name=\"MainWindow\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;460&lt;/width&gt;\n&lt;height&gt;297&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"windowTitle\"&gt;\n&lt;string&gt;Ejemplo de promoci\u00f3n&lt;/string&gt;\n&lt;/property&gt;\n&lt;widget class=\"QWidget\" name=\"centralwidget\"&gt;\n&lt;layout class=\"QVBoxLayout\" name=\"verticalLayout\"&gt;\n&lt;item&gt;\n&lt;widget class=\"CronometroUI\" name=\"widget\" native=\"true\"/&gt;\n&lt;/item&gt;\n&lt;/layout&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;customwidgets&gt;\n&lt;customwidget&gt;\n&lt;class&gt;CronometroUI&lt;/class&gt;\n&lt;extends&gt;QWidget&lt;/extends&gt;\n&lt;header&gt;DI_U04_A02_01&lt;/header&gt;\n&lt;container&gt;1&lt;/container&gt;\n&lt;/customwidget&gt;\n&lt;/customwidgets&gt;\n&lt;resources/&gt;\n&lt;connections/&gt;\n&lt;/ui&gt;\n</code></pre>"},{"location":"unitats/7-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/#us-de-la-interficie-dissenyada-en-una-aplicacio","title":"\u00das de la interf\u00edcie dissenyada en una aplicaci\u00f3","text":"<p>Quan el disseny del formulari estigui finalitzat i s'hagin promocionat els components necessaris, arriba el moment d'utilitzar la interf\u00edcie dissenyada en una aplicaci\u00f3. Com vam veure a la unitat 5, hi ha dos mecanismes per fer-ho: convertint el fitxer UI a Python amb l'eina uic, o carregant-lo directament amb la classe QUiLoader.</p> <p>Si optem per la primera opci\u00f3, la promoci\u00f3 de components no introduir\u00e0 cap canvi respecte al que ja vam aprendre a la unitat 3. Quan l'eina uic generi el codi Python associat al disseny, introduir\u00e0 la classe promocionada en lloc de la del component que realment arrosseguem des de la Caixa de widgets. A m\u00e9s, afegir\u00e0 l'ordre import necess\u00e0ria per carregar el m\u00f2dul indicat al di\u00e0leg de promoci\u00f3, per la qual cosa el codi generat per uic es podr\u00e0 utilitzar directament des del nostre programa principal.</p> <p>Si carregarem el fitxer de disseny amb la utilitat QUiLoader directament, s\u00ed que caldr\u00e0 fer una modificaci\u00f3 al nostre programa principal. Abans de carregar el fitxer UI (amb el m\u00e8tode load de QUiLoader) haurem d'indicar al carregador que el formulari t\u00e9 un nou tipus de component. Per aix\u00f2 utilitzarem el m\u00e8tode registerCustomWidget de QUiLoader, passant-li com a par\u00e0metre la classe associada al nou component. Aquesta refer\u00e8ncia a la nova classe ens portar\u00e0 a haver dafegir la cl\u00e0usula import corresponent.</p> <p>EXEMPLE</p> <p>Als recursos de la unitat trobar\u00e0s tamb\u00e9 el fitxer DI_U04_A04_02.py, que cont\u00e9 el programa principal modificat per poder utilitzar el fitxer de disseny DI_U04_A04_01.ui.</p> <p>[Final de quadre]</p> <p>4.2 Creaci\u00f3 de complements (plugins)</p> <p>Quan s\u00ed que tenim disponible el nou component durant el disseny de la interf\u00edcie, Qt Designer ens ofereix una alternativa a la promoci\u00f3 de components, que ens permetr\u00e0 integrar-lo completament a l'eina. Per aix\u00f2 haurem de desenvolupar un complement (plugin) associat al nostre component personalitzat.</p> <p>Quan tinguem el plugin desenvolupat, el nostre component apareixer\u00e0 a la Caixa de ginys com la resta de controls est\u00e0ndard de Qt. El desenvolupador podr\u00e0 arrossegar-lo al formulari, obtenint una representaci\u00f3 realista de com el component apareixer\u00e0 a la seva aplicaci\u00f3.</p> <p>A. Actualitzar la variable d'entorn PYSIDE_DESIGNER_PLUGINS</p> <p>El primer pas per fer que el nostre component estigui disponible a Qt Designer \u00e9s actualitzar la variable d'entorn PYSIDE_DESIGNER_PLUGINS, que contindr\u00e0 les rutes de tots els connectors que h\u00e0gim desenvolupat. Si \u00e9s el nostre primer plugin, primer haurem de crear la variable d'entorn. Si ja existeix, simplement afegirem la ruta del nou plugin al contingut previ de la variable.</p> <p>Als enlla\u00e7os de la unitat s'inclouen articles on s'explica com gestionar les variables d'entorn als sistemes operatius Windows, Linux i MacOS.</p> <p>B. Crear l' script de registre per al plugin</p> <p>Al directori del plugin que hem incl\u00f2s a la variable d'entorn, a m\u00e9s del fitxer Python del nou component, caldr\u00e0 incloure un script Python amb la informaci\u00f3 que Qt Designer necessita per registrar el component. </p> <p>Perqu\u00e8 Qt Designer reconegui correctament el plugin, el nom del fitxer que cont\u00e9 l'script de registre ha d'estar format per la paraula register, seguida del nom del fitxer que cont\u00e9 el nou component.</p> <p>EXEMPLE</p> <p>L'script de registre associat al component creat als apartats anteriors (el cron\u00f2metre) s'hauria de dir registerDI_U04_A02_01.py.</p> <p>[Final de quadre]</p> <p>En aquest script farem \u00fas de la classe QPyDesignerCustomWidgetCollection, inclosa al m\u00f2dul PySide6.QtDesigner. Aquesta classe disposa del m\u00e8tode est\u00e0tic registerCustomWidget que sencarregar\u00e0 de realitzar el registre del nou component. Aquest m\u00e8tode rep els par\u00e0metres seg\u00fcents:</p> <p>type: el nom de la classe del nostre nou component. \u00c9s l'\u00fanic par\u00e0metre obligatori del m\u00e8tode i cal indicar-lo en primer lloc. Per poder referenciar el nou tipus caldr\u00e0 incloure a l'script la cl\u00e0usula import corresponent. xml: descripci\u00f3 en format Qt UI de com es crear\u00e0 el component en situar-se en un formulari, incloent valors inicials que s'hagin de donar a algunes de les propietats.  tool_tip: text d'ajuda que es mostrar\u00e0 a la Caixa de ginys quan se situ\u00ef el punter del ratol\u00ed a sobre del nou component. icon: ruta a la icona que es mostrar\u00e0 a la Caixa de ginys. Pot ser una ruta local o una refer\u00e8ncia a un recurs. group: nom del grup de controls a la Caixa de ginys on s'inclour\u00e0 el component. Heu de coincidir amb el nom que veiem a Qt Designer. module: nom del m\u00f2dul Python on es troba el component (normalment, el fitxer de codi sense l'extensi\u00f3). Quan utilitzem l'eina uic per generar el codi s'inserir\u00e0 al resultat una cl\u00e0usula import per a aquest m\u00f2dul.</p> <p>EXEMPLE</p> <p>El fitxer DI_U04_A04_03.py incl\u00f2s als recursos de la unitat cont\u00e9 l'script de registre complet per al component cron\u00f2metre. Tamb\u00e9 s'hi inclou el fitxer de recursos per a la icona (DI_U04_A04_04.qrc), la pr\u00f2pia icona (DI_U04_A04_05.png) i el resultat de compilar el fitxer de recursos amb l'eina rcc (DI_U04_A04_06.py). Per poder utilitzar l'script de registre caldria canviar-li el nom tal com s'ha indicat anteriorment (haur\u00edeu d'anomenar registerDI_U04_A02_01.py).</p> <p>[Final de quadre]</p> <p>A la seg\u00fcent imatge podem veure com el component s'ha integrat a la Caixa de ginys de Qt Designer (situat dins de la secci\u00f3 Display Widgets), i la forma en qu\u00e8 es mostra un cop l'arrosseguem al formulari.</p> <p>C. \u00das de la interf\u00edcie dissenyada en una aplicaci\u00f3</p> <p>Quan integrem un nou component a Qt Designer mitjan\u00e7ant un plugin, l'\u00fas del fitxer UI resultant en una aplicaci\u00f3 no requereix cap acci\u00f3 especial. Es podr\u00e0 optar per qualsevol dels dos m\u00e8todes comentats a la unitat 3 (conversi\u00f3 a codi Python amb uic, o c\u00e0rrega directa amb QUiLoader), sense realitzar cap modificaci\u00f3</p>"}]}