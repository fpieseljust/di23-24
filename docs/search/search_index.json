{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#benvinguts","title":"Benvinguts!!","text":"<p>Benivinguts a la web de Desenvolupament d'Interf\u00edcies.</p> <p>Curs 23/24. IES Jaume II \"El Just\" - Tavernes de la Valldigna</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#desenvolupament-dinterfecies","title":"Desenvolupament d'interf\u00e9cies","text":""},{"location":"about/#normativa","title":"Normativa","text":"<p>Estatal -&gt; RD: 450/2010</p> <p>Auton\u00f2mica -&gt; Curr\u00edculum CV: Ordre 58/2012</p>"},{"location":"about/#ies-jaume-ii-el-just-tavernes-de-la-valldigna","title":"IES Jaume II \"El Just\" - Tavernes de la Valldigna","text":""},{"location":"about/#curs-2022-2023","title":"Curs 2022-2023","text":"<p>Professor: Ferran Cunyat</p>"},{"location":"examens/presencial_1a/","title":"Examen 1a presencial","text":""},{"location":"examens/presencial_1a/#examen-1a-avaluacio-presencial","title":"Examen 1a Avaluaci\u00f3 - presencial","text":""},{"location":"examens/presencial_1a/#1a-pregunta-5p","title":"1a pregunta (5p):","text":"<p>Utilitzant el pygame implementa el joc del pong com el seg\u00fcent.</p> <p></p>"},{"location":"examens/presencial_1a/#2a-pregunta-5p","title":"2a pregunta (5p):","text":"<p>Desenvolupa una interf\u00edcie d'usuari per a una aplicaci\u00f3 de llista de la compra. </p> <p>La interf\u00edcie ha de permetre:</p> <p>Seleccionar una categoria comuna de producte (Aliments, Productes d'higiene, Material d'oficina, etc.).</p> <p>Introdu\u00edr una descripci\u00f3 del producte.</p> <p>Indicar la quantiat desitjada de cada producte.</p> <p>Afegeix un bot\u00f3 \"Afegir a la llista\" i \"Eliminar de la llista\" per gestionar els productes.</p> <p>Guarda la informaci\u00f3 en un arxiu de text situat a una carpeta <code>data</code> situada a la mateixa carpeta de l'executable.</p> <p>Compte</p> <p>Seleccioneu correctament els controls</p>"},{"location":"examens/ordinaria/ordinaria/","title":"Ordin\u00e0ria","text":""},{"location":"examens/ordinaria/ordinaria/#examen-ordinaria-desenvolupament-dinterficies-2dam","title":"Examen ordin\u00e0ria Desenvolupament d'interf\u00edcies - 2DAM","text":""},{"location":"examens/ordinaria/ordinaria/#pregunta-1-pygame-3-punts","title":"Pregunta 1 - PyGame (3 punts)","text":"<p>Donat el seg\u00fcent codi:</p> Python<pre><code>import pygame\nimport sys\n# Inicializar Pygame\npygame.init()\n# Definir colores\nNEGRO = (0, 0, 0)\nBLANCO = (255, 255, 255)\nROJO = (255, 0, 0)\n# Configurar la pantalla\nANCHO = 800\nALTO = 600\npantalla = pygame.display.set_mode((ANCHO, ALTO))\npygame.display.set_caption(\"Mi Juego Pygame\")\n# Definir el jugador (rect\u00e1ngulo rojo)\njugador_ancho = 50\njugador_alto = 50\njugador_x = ANCHO // 2 - jugador_ancho // 2\njugador_y = ALTO - jugador_alto - 10\njugador_velocidad = 5\njugador = pygame.Rect(jugador_x, jugador_y, jugador_ancho, jugador_alto)\n# Bucle principal del juego\nwhile True:\nfor evento in pygame.event.get():\nif evento.type == pygame.QUIT:\npygame.quit()\nsys.exit()\n# Controlar el movimiento del jugador\nteclas = pygame.key.get_pressed()\nif teclas[pygame.K_LEFT]:\njugador.x -= jugador_velocidad\nif teclas[pygame.K_RIGHT]:\njugador.x += jugador_velocidad\n# Limitar el movimiento del jugador dentro de la pantalla\njugador.left = max(0, jugador.left)\njugador.right = min(ANCHO, jugador.right)\n# Dibujar el jugador en la pantalla\npantalla.fill(BLANCO)\npygame.draw.rect(pantalla, ROJO, jugador)\n# Actualizar la pantalla\npygame.display.flip()\n</code></pre> <p>Desenvolupa un joc on van caient en vertical uns enemics de color negre que el jugador haur\u00e0 d'evitar.</p> <ul> <li>Les dimensions dels enemics s\u00f3n aleat\u00f2ries entre 20 i 50 p\u00edxels</li> <li>La velocitat de despla\u00e7ament \u00e9s aleat\u00f2ria entre 5 i 20 p\u00edxels</li> <li>Es crear\u00e0 un enemic cada 200ms</li> <li>Els enemics que ja no ocupen espai en pantalla no s'han de pintar</li> <li>En colisionar amb el jugador, el joc acabar\u00e0</li> <li>El joc ha de ser jugable en qualsevol ordinador</li> </ul>"},{"location":"examens/ordinaria/ordinaria/#pregunta-2-flet-3-punts","title":"Pregunta 2 - Flet (3 punts)","text":"<p>Crea una aplicaci\u00f3 com la seg\u00fcent.</p> <p></p>"},{"location":"examens/ordinaria/ordinaria/#pregunta-3-qt-3-punts","title":"Pregunta 3 - Qt (3 punts)","text":"<p>Utilitzant Qt Designer, dissenyeu una interf\u00edcie d'usuari per a una aplicaci\u00f3 de gesti\u00f3 de tasques b\u00e0sica. La interf\u00edcie ha d'incloure el seg\u00fcent:</p> <ul> <li>Una llista per mostrar les tasques pendents.</li> <li>Un bot\u00f3 per afegir una nova tasca.</li> <li>Un bot\u00f3 per eliminar les tasques seleccionades de la llista.</li> <li>Un camp de text per introduir noves tasques.</li> </ul> <p>Abans d'eliminar alguna tasca es preguntar\u00e0 a l'usuari si realment es vol eliminar.</p>"},{"location":"examens/ordinaria/ordinaria/#pregunta-4-installador-1-punt","title":"Pregunta 4 - Instal\u00b7lador (1 punt)","text":"<p>Crea un instal\u00b7lador de qualsevol de les aplicacions de les preguntes anteriors.</p>"},{"location":"examens/semipresencial/2a/","title":"Semipresencial 2a","text":"<p>Examen de Desenvolupament d'Interf\u00edcies</p> <p>Pregunta 1: Creaci\u00f3 d'un Formulari B\u00e0sic (3 punts)</p> <p>Escriviu una aplicaci\u00f3 utilitzant PySide6 que permeta registrar les dades d'un usuari en un formulari. El formulari hauria de contindre els seg\u00fcents camps:</p> <ol> <li>DNI</li> <li>Nom i cognoms</li> <li>Sexe</li> <li>Edat</li> <li>Direcci\u00f3</li> </ol> <p>A m\u00e9s, tindr\u00e0 un bot\u00f3 \"Guardar\" que, quan es prema, hauria de desar les dades introdu\u00efdes en una estructura de dades per al tractament intern de l'aplicaci\u00f3. Es recomana utilitzar un diccionari de Python (estructura id\u00e8ntica a un JSON) on es vagen acumulant les dades i la clau siga el DNI.</p> <p>Fes un xicotet <code>main</code> que s'executar\u00e0 en cas de llan\u00e7ar el m\u00f2dul per\u00f2 no si s'importa des d'un altre m\u00f2dul, per tal de poder provar el m\u00f2dul de forma independent.</p> <p>Nota: No es necessitar\u00e0 validar que els camps s\u00f3n correctes.</p> <p>Pregunta 2: Mostrar Informaci\u00f3 de l'Usuari (2 punts)</p> <p>Amplieu l'aplicaci\u00f3 anterior afegint una funcionalitat per mostrar la informaci\u00f3 guardada dels usuaris. Quan es seleccione aquesta opci\u00f3 des del men\u00fa de l'aplicaci\u00f3, s'hauria de mostrar un di\u00e0leg amb un desplegable que cont\u00e9 els DNIs dels usuaris guardats. En seleccionar un DNI, s'ha de carregar la informaci\u00f3 corresponent al formulari de la pregunta anterior, amb la possibilitat de guardar els canvis.</p> <p>Pregunta 3: Generaci\u00f3 d'Estad\u00edstiques (3 punts)</p> <p>Afegiu al men\u00fa una opci\u00f3 per a generar estad\u00edstiques sobre les dades dels usuaris. Quan aquesta opci\u00f3 siga seleccionada, cal crear un informe de datapane amb un gr\u00e0fic de past\u00eds mostrant el n\u00famero d'usuaris homes i dones que es guardar\u00e0 a disc:</p> <ul> <li>Nombre d'usuaris per sexe (Home/Dona).</li> </ul> <p>Pregunta 4: Creaci\u00f3 d'Informe (2 punts)</p> <p>Fes que l'anterior informe es mostre a l'aplicaci\u00f3 en una finestra emergent.</p>"},{"location":"info/guia_alumne_DI/","title":"Guia de l'alumne","text":""},{"location":"info/guia_alumne_DI/#1-presentacio-del-modul","title":"1. Presentaci\u00f3 del m\u00f2dul","text":"<p>El m\u00f2dul de Desenvolupament d'Interf\u00edcies pertany al 2on curs del CFGS de Desenvolupament d'Aplicacions Multiplataforma, i contribueix a aquirir diverses de les unitats de compet\u00e8ncia que s'hi estableixen al Cat\u00e0leg Nacional de Qualificacions Professionals.</p> <p>Segons el RD del t\u00edtol, la formaci\u00f3 en aquest m\u00f2dul contribueix a assolir els seg\u00fcents objectius del m\u00f2dul:</p> <ul> <li> <p>e) Seleccionar i emprar llenguatges, eines i llibreries, interpretant-ne les especificacions per desenvolupar aplicacions multiplataforma amb acc\u00e9s a bases de dades.</p> </li> <li> <p>f) Gestionar la informaci\u00f3 emmagatzemada, planificant i implementant sistemes de formularis i informes per desenvolupar aplicacions de gesti\u00f3.  </p> </li> <li> <p>g) Seleccionar i utilitzar eines espec\u00edfiques, llenguatges i llibreries, avaluant les possibilitats i seguint un manual d'estil, per manipular i integrar en aplicacions multiplataforma continguts gr\u00e0fics i components multim\u00e8dia.  </p> </li> <li> <p>h) Emprar eines de desenvolupament, llenguatges i components visuals, seguint les especificacions i verificant interactivitat i usabilitat, per desenvolupar interf\u00edcies gr\u00e0fics dusuari en aplicacions multiplataforma.  </p> </li> <li> <p>k) Valorar i emprar eines espec\u00edfiques, atenent l'estructura dels continguts, per crear ajudes generals i sensibles al context.</p> </li> <li> <p>l) Valorar i emprar eines espec\u00edfiques, atenent l'estructura dels continguts, per crear tutorials, manuals d'usuari i altres documents associats a una aplicaci\u00f3.  </p> </li> <li> <p>m) Seleccionar i emprar t\u00e8cniques i eines, avaluant la utilitat dels assistents d'instal\u00b7laci\u00f3 generats, per empaquetar aplicacions.  </p> </li> <li> <p>r) Verificar els components programari desenvolupats, analitzant les especificacions, per completar un pla de proves.  </p> </li> <li> <p>s) Establir procediments, verificant-ne la funcionalitat, per desplegar i distribuir aplicacions.  </p> </li> <li> <p>w) Identificar els canvis tecnol\u00f2gics, organitzatius, econ\u00f2mics i laborals en el seu activitat, analitzant-ne les implicacions en l'\u00e0mbit de treball, per mantenir l'esperit innovaci\u00f3.  </p> </li> </ul>"},{"location":"info/guia_alumne_DI/#2-objectius-resultats-daprenentatge","title":"2. Objectius. Resultats d'aprenentatge","text":"<p>D'acord amb la normativa, els resultats d'aprenentatge del m\u00f2dul de Desenvolupament d'Interf\u00edcies s\u00f3n:</p> <ol> <li>Genera interf\u00edcies gr\u00e0fiques d'usuari mitjan\u00e7ant editors visuals utilitzant les funcionalitats de l'editor i adaptant el codi generat.  </li> <li>Genera interf\u00edcies gr\u00e0fiques d'usuari basades en XML utilitzant eines espec\u00edfiques i adaptant el document XML generat.  </li> <li>Crea components visuals valorant i emprant eines espec\u00edfiques.  </li> <li>Dissenya interf\u00edcies gr\u00e0fiques identificant i aplicant criteris d'usabilitat.</li> <li>Crea informes avaluant i utilitzant eines gr\u00e0fiques.  </li> <li>Documenta aplicacions seleccionant i utilitzant eines espec\u00edfiques.  </li> <li>Prepara aplicacions per a la seva distribuci\u00f3 avaluant i utilitzant eines espec\u00edfiques.  </li> <li>Avalua el funcionament d'aplicacions dissenyant i executant proves.  </li> </ol>"},{"location":"info/guia_alumne_DI/#3-continguts-del-modul-unitats-didactiques","title":"3. Continguts del m\u00f2dul. Unitats did\u00e0ctiques","text":"<p>Els continguts del m\u00f2dul s'organitzen de la seguent forma:</p> <ul> <li>UD 1. Programaci\u00f3 amb Python. </li> <li>UD 2. Introducci\u00f3 a les interf\u00edcies gr\u00e0fiques.</li> <li>UD 3. Generaci\u00f3 d\u2019interf\u00edcies amb Flet</li> <li>UD 4. Generaci\u00f3 d\u2019interf\u00edcies amb PySide6</li> <li>UD 5. Generaci\u00f3 d\u2019interf\u00edcies mitjan\u00e7ant llenguatges de marques.</li> <li>UD 6. Elaboraci\u00f3 d\u2019informes.</li> <li>UD 7. Documentaci\u00f3 d'aplicaciones.</li> <li>UD 8. Proves, distribuci\u00f3 e implantaci\u00f3 d'aplicacions.</li> </ul>"},{"location":"info/guia_alumne_DI/#4-temporalitzacio-de-continguts","title":"4. Temporalitzaci\u00f3 de continguts","text":"<p>La temporalitzaci\u00f3 de continguts prevista ser\u00e0 la seg\u00fcemt:</p> Trimestre 1 Trimestre 2 Unitats 1-3 Unitats 5-8"},{"location":"info/guia_alumne_DI/#5-aspectes-metodologics","title":"5. Aspectes metodol\u00f2gics","text":""},{"location":"info/guia_alumne_DI/#51-material-didactic","title":"5.1. Material Did\u00e0ctic","text":"<p>El material did\u00e0ctic del m\u00f2dul pot ressumir-se en el seg\u00fcent:</p> <ul> <li>Apunts proporcionats pel professor en format web.</li> <li>Textos d'ampliaci\u00f3 i enlla\u00e7os a articles i documentaci\u00f3 oficial relacionats amb cada unitat.</li> <li>Pr\u00e0ctiques i exercicis resolts per refor\u00e7ar el que s'ha exposat als apunts.</li> </ul> <p>Tot aquest material s'oferir\u00e0 a trav\u00e9s de l'aula virtual durant el desenvolupament de cada unitat.</p> <p>A m\u00e9s, dins l'aula virtual, disposarem d'un f\u00f2rum general per comentar aspectes globals del m\u00f2dul, i un f\u00f2rum per cada unitat did\u00e0ctica, per tal de resoldre dubtes i tractar aspectes relacionats amb la unitat.</p>"},{"location":"info/guia_alumne_DI/#52-programari","title":"5.2. Programari","text":"<p>El programari a utilitzar ser\u00e0 principalment lliure, i es donaran instruccions en cada unitat per a la seua desc\u00e0rrega i instal\u00b7laci\u00f3. A grans trets, el programari a utilitzar ser\u00e0:</p> <ul> <li>Sistema operatiu d'elecci\u00f3 pr\u00f2pia. Com a sistema operatiu de base a l'aula fem servir Linux Mint, tot i que per al modul, per\u00f2 l'alumne pot utilitzar qualsevol altre sistema operatiu, ja que tot el programari amb qu\u00e8 treballarem \u00e9s multiplataforma.</li> <li>Visual Studio Code com a editor de codi, que suporta diferents llenguatges, i \u00e9s bastant ampliable amb extensions. Tot i que ser\u00e0 l'editor de refer\u00e8ncia, es pot fer \u00fas de PyCharm, Eclipse, InteliJ o qualsevol altre editor/IDE.</li> <li>Python3, com a llenguatge de programaci\u00f3,</li> <li>PySide6 (Qt + Python3) com a framework per a aplicacions amb interf\u00edcie d'usuari multiplataforma per a aplicacions d'escriptori.</li> <li>Flet (Flutter + Python3), com a framework per a aplicacions multiplataforma amb interf\u00edcie d'usuari per a m\u00f2bil, web o escriptori.</li> <li>Llibreries python, altres llibreries de Python3 per a generar documentaci\u00f3, informes, proves o construcci\u00f3 dels binaris.</li> </ul>"},{"location":"info/guia_alumne_DI/#53-eines-web-i-collaboratives","title":"5.3. Eines web i col\u00b7laboratives","text":"<p>A banda del programari esmentat anteriorment, tamb\u00e9 s'utilitzaran el seg\u00fcent portals web i plataformes de treball col\u00b7laboratiu:</p> <ul> <li>Portal Aules: Com a aula virtual, i que articular\u00e0 el funcionament del m\u00f2dul. Ser\u00e0 aci on s'ubiquen els diferents recursos, f\u00f2rums, etc.</li> <li>Github: En alguns projectes en grup, ser\u00e0 de gran ajuda treballar amb sistemes de control de versions distribuits, com Github o Gitlab, de manera que puguen realitzar desenvolupaments de forma col\u00b7laborativa. Podeu optar per fer l'entrega de treballs a trav\u00e9s del vostre repositori Github.</li> </ul>"},{"location":"info/guia_alumne_DI/#54-metodologia","title":"5.4. Metodologia","text":"<p>Per a aquest curs, tant en modalitat presencial com semipresencial, anem a buscar una forma el m\u00e9s pr\u00e0ctica possible d'abordar les classes. </p> <p>Segons aquestes premisses, la metodolog\u00eda utilitzada al m\u00f2dul es regir\u00e0 per les seg\u00fcents pautes:</p> <ul> <li>En iniciar cada unitat did\u00e0tica es realitzar\u00e0 una presentaci\u00f3 inicial d'aquesta, dels conceptes b\u00e0sics, i de qu\u00e8 sereu capa\u00e7os de fer en finalitzar-la.</li> <li>Disposareu de material per a la seua lectura comprensiva i estudi, aix\u00ed com de documentaci\u00f3 addicional que es considere interessant,</li> <li>Disposareu d'exercicis i pr\u00e0ctiques que acompanyen la teor\u00eda de la unitat i que ens ajudaran a entendre els conceptes de la unitat, fonamentant-se en coneixements previs, facilitant aix\u00ed l'aprenentatge per descobriment, significatiu i deductiu.</li> <li>Les session a l'aula tindran un car\u00e0cter fonamentalment pr\u00e0ctic, i s'aprofitaran exemples i casos pr\u00e0ctics per exposar els principals conceptes.</li> <li>Es fomentar\u00e0 la realitzaci\u00f3 de projectes i treballs en equip, simulant el treball real en una empresa, on cadasc\u00fa tindr\u00e0 un paper ben definit dins el grup. (sols per a presencial, en el cas de semipresencial, el treball ser\u00e0 individual).</li> </ul>"},{"location":"info/guia_alumne_DI/#6-avaluacio","title":"6. Avaluaci\u00f3","text":"<p>L'avaluaci\u00f3 ser\u00e0 continuada, i consistir\u00e0 en el seguiment del treball que aneu realitzant. Cada unitat tindr\u00e0 una qualificaci\u00f3, fruit del treball de activitats i pr\u00e0ctiques entregables.</p> <p>En finalitzar cada avaluaci\u00f3 hi haur\u00e0 tamb\u00e9 una prova de validaci\u00f3 de coneixements, que caldr\u00e0 aprovar per considerar v\u00e0lida la qualificaci\u00f3 de l'avaluaci\u00f3 contunuada. La nota final ser\u00e0 la nota ponderada de la qualificaci\u00f3 del les diferents unitats, en funci\u00f3 del temps invertit en cadascuna, i el pes considerat per a cada tasca. Es perd el dret a l'avaluaci\u00f3 continuada en faltar a m\u00e9s d'un 15% de les classes. En este cas, la nota vindr\u00e0 donada al 100% per la nota de la prova corresponent.</p> <p>En cas de no superar l'avaluaci\u00f3, es tindr\u00e0 dret a una convocat\u00f2ria en per\u00edode extraordinari.</p> <p>Per a la correcci\u00f3 de les pr\u00e0ctiques i projectes s'utilitzar\u00e0 la r\u00fabrica disponible a la documentaci\u00f3.</p>"},{"location":"info/qualificacio/rubrica/","title":"R\u00fabriques","text":""},{"location":"info/qualificacio/rubrica/#1-rubrica-per-a-avaluar-practiquesprojectes-en-disseny-dinterficies","title":"1. R\u00fabrica per a avaluar pr\u00e0ctiques/projectes, en Disseny D'interf\u00edcies","text":"<p>Criteris a evaluar:</p> <ul> <li>Resoluci\u00f3: utilitzaci\u00f3 dels algoritmes, les estructures de dades, les funcions, les estructures de control .. m\u00e9s adequats.</li> <li>Funcionament: la soluci\u00f3 proposada fa el que s'ha demanat.</li> <li>Interf\u00edcie:: interf\u00edcie clara i estructurada d'acord amb les especificacions.</li> <li>Altres aspectes: noms de variables, comentaris, regles d'estil de python, llibreries, documentaci\u00f3 per a posar en funcionament...</li> </ul> Molt b\u00e9 B\u00e9 Deficient Molt deficient Resoluci\u00f3 Utilitza les estructures m\u00e9s adequats per a resoldre l'exercici. Utilitza les estructures necessaris per a resoldre l'exercici, encara que no s\u00f3n les m\u00e9s adequades. Utilitza estructures inadequades per a resoldre l'exercici. Utilitza estructures que no resolen l'exercici. Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0 Funcionament El funcionament de l'exercici \u00e9s correcte i est\u00e0 complet. El funcionament de l\u2019exercici est\u00e0 quasi complet o est\u00e0 complet per\u00f2 t\u00e9 fallades sense import\u00e0ncia. El funcionament de l'exercici t\u00e9 fallades importants. L'exercici no funciona. Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0 Interf\u00edcie La interf\u00edcie utilitza els components m\u00e9s adequats, \u00e9s clar i estructurat, i a m\u00e9s \u00e9s amigable. La interf\u00edcie cont\u00e9 alguns components que no s\u00f3n els m\u00e9s adequats, per\u00f2 \u00e9s clar i estructurat. La interf\u00edcie cont\u00e9 alguns components que no s\u00f3n els m\u00e9s adequats, i a m\u00e9s, no \u00e9s clar ni estructurat. Al disseny gr\u00e0fic li falten alguns components necessaris i utilitza components que no s\u00f3n correctes. Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0 Altres aspectes Puntuaci\u00f3 (m\u00e0x. 3) 3 2 1 0"},{"location":"unitats/1-python/pr%C3%A0ctiques/1%20-%20PyGame/","title":"Introducci\u00f3","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/1%20-%20PyGame/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>PyGame \u00e9s una llibreria de Python3 pensada per a desenvolupar de forma senzilla jocs amb Python. Anem a utilitzar-la per a desenvolupar un xicotet joc. Ser\u00e0 la primera activitat avaluable del curs.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/1%20-%20PyGame/#2-installacio-i-configuracio","title":"2. Instal\u00b7laci\u00f3 i configuraci\u00f3","text":"<p>El primer que farem \u00e9s activar el nostre entorn virtual de desenvolupament i instal\u00b7lar la llibreria pygame. Per a aix\u00f2 recordeu que utilitzarem conda tal com ve explicat a la teoria. Dins l'entorn virtual instal\u00b7lem pygame.</p> Bash<pre><code>$ conda activate ENTORN\n(ENTORN) $ conda install -c conda-forge pygame\n</code></pre>"},{"location":"unitats/1-python/pr%C3%A0ctiques/1%20-%20PyGame/#3-hola-mon-del-pygame","title":"3. Hola m\u00f3n! del pygame","text":"<p>Aquest programa crea una finestra, omple el fons de blanc i dibuixa un cercle blau al mig:</p> Python<pre><code># Simple pygame program\n# Import and initialize the pygame library\nimport pygame\npygame.init()\n# Set up the drawing window\nscreen = pygame.display.set_mode([500, 500])\n# Run until the user asks to quit\nrunning = True\nwhile running:\n# Did the user click the window close button?\nfor event in pygame.event.get():\nif event.type == pygame.QUIT:\nrunning = False\n# Fill the background with white\nscreen.fill((255, 255, 255))\n# Draw a solid blue circle in the center\npygame.draw.circle(screen, (0, 0, 255), (250, 250), 75)\n# Flip the display\npygame.display.flip()enem\n# Done! Time to quit.\npygame.quit()\n</code></pre> <p></p> <p>Fixem-nos en alguns punts:</p> <ul> <li> <p>La l\u00ednia 8 configura la finestra de visualitzaci\u00f3 del programa, amb unes dimensions de 500x500 pixels.</p> </li> <li> <p>Les l\u00ednies 11 i 12 configuren un bucle de joc per controlar quan finalitza el programa.</p> </li> <li> <p>Les l\u00ednies 15 a 17 recullen i gestionen esdeveniments dins del bucle del joc. L'\u00fanic esdeveniment gestionat de moment \u00e9s pygame.QUIT, que es produeix quan l'usuari fa clic al bot\u00f3 de tancament de la finestra.</p> </li> <li> <p>La l\u00ednia 20 omple la finestra d\u2019un color s\u00f2lid. screen.fill() accepta una llista o una tupla que especifica els valors RGB del color. (255, 255, 255), \u00e9s el color blanc.</p> </li> <li> <p>La l\u00ednia 23 dibuixa un cercle a la finestra, utilitzant els par\u00e0metres (finestra on dibuixar, color, posici\u00f3 central i radi)</p> </li> <li>La l\u00ednia 26 actualitza el contingut de la pantalla, que de moment no canvia al llarg del temps.</li> <li>La l\u00ednia 29 ix del joc, sols s'executa quan ix del bucle per l'event QUIT.</li> </ul> <p>Aquesta \u00e9s la versi\u00f3 pygame de \"Hola, m\u00f3n\".</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/","title":"Disseny del joc","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#disseny-del-joc","title":"Disseny del joc","text":"<p>Una vegada vist els conceptes b\u00e0sics anem a desenvolupar un xicotet joc a mode d'exemple. </p> <p>L'objectiu del joc \u00e9s evitar obstacles que entren:</p> <ul> <li>El jugador comen\u00e7a a la part esquerra de la pantalla.</li> <li>Els obstacles entren a l'atzar per la dreta i es mouen a l'esquerra en l\u00ednia recta.</li> <li>El jugador pot moure's cap a l'esquerra, cap a la dreta, cap amunt o cap avall per evitar els obstacles.</li> <li>El jugador no pot ixir-se'n de la pantalla.</li> <li>El joc finalitza quan el jugador \u00e9s colpejat per un obstacle o quan l'usuari tanca la finestra. Mentre no es produisca a\u00e7\u00f2, el joc continua, pot ser infinit.</li> </ul>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#importem-i-inicialitzem-el-joc","title":"Importem i inicialitzem el joc","text":"Python<pre><code># Import the pygame module\nimport pygame\n# Import pygame.locals for easier access to key coordinates\n# Updated to conform to flake8 and black standards\nfrom pygame.locals import (\nK_UP,\nK_DOWN,\nK_LEFT,\nK_RIGHT,\nK_ESCAPE,\nKEYDOWN,\nQUIT\n)\n# Initialize pygame\npygame.init()\n</code></pre> <p>Utilitzem les constants definides en locals per veure quina tecla s'ha apretat, o si s'ha pulsat sobre l'aspa de tancar el programa.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#configurem-la-pantalla","title":"Configurem la pantalla","text":"Python<pre><code># Define constants for the screen width and height\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n# Create the screen object\n# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n</code></pre> Definim una finestra \u00e9s de 800x600, utilitzant les constants SCREEN_WIDTH i SCREEN_HEIGHT. El m\u00e8tode ens torna una superf\u00edcie que representa les dimensions interiors de la finestra. Aquesta \u00e9s la part de la finestra que podem controlar, mentre que el sistema operatiu controla els l\u00edmits de la finestra i la barra de t\u00edtol. <p>Si executeu aquest programa ara, apareixer\u00e0 una finestra que apareixer\u00e0 breument i desapareixer\u00e0 immediatament.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#configuracio-del-bucle-principal-del-joc","title":"Configuraci\u00f3 del bucle principal del joc","text":"<p>Tots els jocs des de Pong fins a Fortnite utilitzen un bucle de joc per controlar-lo. Fa quatre coses molt importants:</p> <ol> <li>Processa l'entrada de l'usuari</li> <li>Actualitza l'estat de tots els objectes del joc</li> <li>Actualitza la pantalla i l'\u00e0udio</li> <li>Mant\u00e9 la velocitat del joc</li> </ol> <p>Tots els cicles del bucle del joc s\u2019anomenen fotogrames i, com m\u00e9s r\u00e0pid es facen les coses a cada cicle, m\u00e9s r\u00e0pid es desenvolupar\u00e0 el vostre joc. Els fotogrames continuen ocorrent fins que es compleix alguna condici\u00f3 per ixir del joc. Al vostre disseny, hi ha dues condicions que poden acabar amb el bucle del joc:</p> <ol> <li>El jugador xoca amb un obstacle. (M\u00e9s endavant, cobrir\u00e0 la detecci\u00f3 de col\u00b7lisions.)</li> <li>El jugador tanca la finestra (esdeveniment QUIT).</li> </ol> <p>El primer que fa el bucle del joc \u00e9s processar l'entrada de l'usuari per permetre al jugador moure's per la pantalla. Per tant, necessiteu alguna manera de capturar i processar una gran quantitat d\u2019informacions. Ho farem mitjan\u00e7ant el sistema d'esdeveniments pygame.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#processament-desdeveniments","title":"Processament d'esdeveniments","text":"<p>Pr\u00e9mer una tecla, moure el ratol\u00ed o el joystick s\u00f3n algunes de les maneres en qu\u00e8 un usuari pot proporcionar informaci\u00f3. Totes aquestes accions de l'usuari donen lloc a la generaci\u00f3 d'un esdeveniment i poden passar en qualsevol moment.</p> <p>Tots els esdeveniments de Pygame es col\u00b7loquen a la cua d'esdeveniments, la qual es pot accedir i manipular. El tractament que es fa dels esdeveniments s\u2019anomena gestor d\u2019esdeveniments.</p> <p>Per al vostre joc, els tipus d\u2019esdeveniments en qu\u00e8 us centreu s\u00f3n les pulsacions de tecles i el tancament de la finestra. </p> <ul> <li>Els esdeveniments de premuda de tecles tenen el tipus d'esdeveniment KEYDOWN.</li> <li>L'esdeveniment de tancament de finestra t\u00e9 el tipus QUIT. </li> </ul> <p>Els diferents tipus d'esdeveniments tamb\u00e9 poden tenir associades altres dades. Per exemple, el tipus d'esdeveniment KEYDOWN tamb\u00e9 t\u00e9 una variable anomenada key per indicar quina tecla s'ha premut.</p> <p>Accediu a la llista de tots els esdeveniments actius a la cua cridant amb pygame.event.get(). A continuaci\u00f3, passeu per aquesta llista, inspeccioneu cada tipus d'esdeveniment i tracteu-los:</p> Python<pre><code># Variable to keep the main loop running\nrunning = True\n# Main loop\nwhile running:\n# Look at every event in the queue\nfor event in pygame.event.get():\n# Did the user hit a key?\nif event.type == KEYDOWN:\n# Was it the Escape key? If so, stop the loop.\nif event.key == K_ESCAPE:\nrunning = False\n# Did the user click the window close button? If so, stop the loop.\nelif event.type == QUIT:\nrunning = False\n</code></pre> <p>Vegem m\u00e9s a fons aquest bucle principal del joc:</p> <ol> <li>S'estableix una variable de control per al bucle del joc. Per a ixir del bucle i del joc, hem d\u2019establir la variable running = False.</li> <li>Recorrem el gestor d'esdeveniments, recollint tots els esdeveniments que hi ha actualment a la cua d'esdeveniments. Si no hi ha esdeveniments, la llista est\u00e0 buida i el gestor no far\u00e0 res.</li> <li>Per a cada esdeveniment de la cua, comprovem  el tipus. Si event.type == KEYDOWN, s'ha apretat alguna tecla. Si \u00e9s aix\u00ed, comprovem quina tecla s'ha apretat mirant l'atribut event.key. Si la clau \u00e9s la tecla Esc, indicada per K_ESCAPE, surt del bucle del joc configurant running = False.</li> <li>Es fa una comprovaci\u00f3 similar per al tipus d'esdeveniment QUIT. Aquest esdeveniment nom\u00e9s es produeix quan l'usuari fa clic al bot\u00f3 de tancament de la finestra. L'usuari tamb\u00e9 pot utilitzar qualsevol altra acci\u00f3 del sistema operatiu per tancar la finestra.</li> </ol> <p>Quan afegiu aquestes l\u00ednies al codi anterior i l'executeu, veureu una finestra amb una pantalla en blanc o negre. La finestra no desapareixer\u00e0 fins que no premeu la tecla Esc tanqueu la finestra amb el ratol\u00ed o combinaci\u00f3 de tecles Alt + F4. (Comproveu-ho, per\u00f2 recordeu afegir pygame.display.flip() per a que pinte la pantalla al bucle).</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#pintant-objectes-a-la-pantalla","title":"Pintant objectes a la pantalla","text":"<p>Al programa de mostra, hem dibuixat a la pantalla mitjan\u00e7ant dos m\u00e8todes:</p> <ul> <li>screen.fill() per omplir el fons</li> <li>pygame.draw.circle() per dibuixar un cercle</li> <li>Ara veurem una tercera manera de dibuixar a la pantalla: utilitzar una superf\u00edcie Surface.</li> </ul> <p>Una superf\u00edcie \u00e9s un objecte rectangular sobre el qual podem dibuixar, com un full de paper en blanc. La pantalla \u00e9s una superf\u00edcie i podeu crear els vostres propis objectes de superf\u00edcie separats de la pantalla. Vegem com funciona:</p> Python<pre><code># Fill the screen with white\nscreen.fill((255, 255, 255))\n# Create a surface and pass in a tuple containing its length and width\nsurf = pygame.Surface((50, 50))\n# Give the surface a color to separate it from the background\nsurf.fill((0, 0, 0))\nrect = surf.get_rect()\n</code></pre> <p>A la primera l\u00ednia la pantalla s'omple de blanc. Despr\u00e9s es crea una nova superf\u00edcie de 50 p\u00edxels d'ample, 50 p\u00edxels d'al\u00e7ada i s'assigna a surf. Ara surf \u00e9s una superf\u00edcie igual que la pantalla principal i l'omplim de negre. Accedim al seu rectangle subjacentmitjan\u00e7ant get_rect() per poder-ho utilitzar posteriorment.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/2%20-%20Disseny/#us-de-blit-i-flip","title":"\u00das de .blit () i .flip ()","text":"<p>El fet de crear una nova superf\u00edcie no \u00e9s suficient per veure-la a la pantalla. Per fer-ho, cal que col\u00b7loqueu la superf\u00edcie sobre una altra superf\u00edcie. El terme blit significa Block Transfer (Transfer\u00e8ncia de blocs) i .blit() \u00e9s la forma de copiar el contingut d\u2019una superf\u00edcie a una altra. Nom\u00e9s podeu copiar el contingut entre superf\u00edcies, per\u00f2 ja haviem dit que screen \u00e9s una superf\u00edcie. Vegem com dibuixem surf a la pantalla:</p> Python<pre><code># This line says \"Draw surf onto the screen at the center\"\nscreen.blit(surf, (SCREEN_WIDTH/2, SCREEN_HEIGHT/2))\npygame.display.flip()\n</code></pre> <p>La funci\u00f3 blit pren dos arguments:</p> <ol> <li>La superf\u00edcie a pintar</li> <li>Les coordenades del v\u00e8rtex top-left</li> </ol> <p>Per tant si ho volem pintar exactament al centre de la pantalla hauriem de restar la seua amplada i altura respectivament:</p> Python<pre><code># Put the center of surf at the center of the display\nsurf_center = (\n(SCREEN_WIDTH-surf.get_width())/2,\n(SCREEN_HEIGHT-surf.get_height())/2\n)\n# Draw surf at the new coordinates\nscreen.blit(surf, surf_center)\npygame.display.flip()\n</code></pre> <p>Recordeu fer la crida a la funci\u00f3 flip per a repintar el joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/","title":"Sprites","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#sprites","title":"Sprites","text":"<p>Al disseny del joc, el jugador comen\u00e7a per l\u2019esquerra i els obstacles entren per la dreta. Podeu representar tots els obstacles amb objectes de la superf\u00edcie per fer tot el dibuix m\u00e9s f\u00e0cil, per\u00f2 com sabeu on dibuixar-los? Com se sap si un obstacle ha xocat amb el jugador? Qu\u00e8 passa quan l'obstacle ix de la pantalla? Qu\u00e8 passa si voleu dibuixar imatges de fons que tamb\u00e9 es moguin? Qu\u00e8 passa si voleu que les vostres imatges siguen animades? Podeu gestionar totes aquestes situacions i molt m\u00e9s amb els sprites.</p> <p>En termes de programaci\u00f3, un sprite \u00e9s una representaci\u00f3 2D d'alguna cosa a la pantalla. Essencialment, \u00e9s una imatge. pygame proporciona una classe Sprite, que est\u00e0 dissenyada per contenir una o diverses representacions gr\u00e0fiques de qualsevol objecte de joc que vulgueu mostrar a la pantalla. Per utilitzar-lo, creeu una nova classe que herede d'Sprite. Aix\u00f2 us permet utilitzar els seus m\u00e8todes heredats.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#jugadors","title":"Jugadors","text":"<p>A continuaci\u00f3 s\u2019explica com s\u2019utilitzen els objectes Sprite amb el joc actual per definir el jugador.</p> Python<pre><code># Define a Player object by extending pygame.sprite.Sprite\n# The surface drawn on the screen is now an attribute of 'player'\nclass Player(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Player, self).__init__()\nself.surf = pygame.Surface((75, 25))\nself.surf.fill((255, 255, 255))\nself.rect = self.surf.get_rect()\n</code></pre> <p>Primer definiu Player ampliant pygame.sprite.Sprite. Despr\u00e9s <code>.__ init __()</code> utilitza <code>.super()</code> per cridar al constructor de la classe pare.</p> <p>A continuaci\u00f3, definim i inicialitzem .surf per mantindre la imatge que voleu mostrar, que actualment \u00e9s un quadre blanc. Tamb\u00e9 definim i inicialitzem .rect, que s'utilitzar\u00e0 m\u00e9s endavant. Per utilitzar aquesta nova classe, heu de crear un objecte nou i canviar tamb\u00e9 el codi de dibuix. Amplieu el bloc de codi seg\u00fcent per veure-ho tot junt:</p> Python<pre><code># Import the pygame module\nimport pygame\n# Import pygame.locals for easier access to key coordinates\n# Updated to conform to flake8 and black standards\nfrom pygame.locals import (\nK_UP,\nK_DOWN,\nK_LEFT,\nK_RIGHT,\nK_ESCAPE,\nKEYDOWN,\nQUIT,\n)\n# Define constants for the screen width and height\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\n# Define a player object by extending pygame.sprite.Sprite\n# The surface drawn on the screen is now an attribute of 'player'\nclass Player(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Player, self).__init__()\nself.surf = pygame.Surface((75, 25))\nself.surf.fill((255, 255, 255))\nself.rect = self.surf.get_rect()\n# Initialize pygame\npygame.init()\n# Create the screen object\n# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n# Instantiate player. Right now, this is just a rectangle.\nplayer = Player()\n# Variable to keep the main loop running\nrunning = True\n# Main loop\nwhile running:\n# for loop through the event queue\nfor event in pygame.event.get():\n# Check for KEYDOWN event\nif event.type == KEYDOWN:\n# If the Esc key is pressed, then exit the main loop\nif event.key == K_ESCAPE:\nrunning = False\n# Check for QUIT event. If QUIT, then set running to false.\nelif event.type == QUIT:\nrunning = False\n# Fill the screen with black\nscreen.fill((0, 0, 0))\n# Draw the player on the screen\n#screen.blit(player.surf, (SCREEN_WIDTH/2, SCREEN_HEIGHT/2))\nscreen.blit(player.surf, player.rect)\n# Update the display\npygame.display.flip()\n</code></pre> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#entrada-dusuari","title":"Entrada d\u2019usuari","text":"<p>Fins ara, hem apr\u00e8s a configurar Pygame i dibuixar objectes a la pantalla. Ara comen\u00e7a la diversi\u00f3. Fareu que el joc es puga controlar mitjan\u00e7ant el teclat.</p> <p>Abans, haviem vist que pygame.event.get() retorna la llista dels esdeveniments de la cua, que analitzem per trobar els seus tipus. B\u00e9, aquesta no \u00e9s l\u2019\u00fanica manera de llegir les tecles. pygame tamb\u00e9 proporciona pygame.event.get_pressed(), que retorna un diccionari que cont\u00e9 tots els esdeveniments KEYDOWN actuals a la cua.</p> <p>Posar-ho al bucle del joc despr\u00e9s del bucle de gesti\u00f3 d'esdeveniments torna un diccionari que cont\u00e9 les tecles apretades al comen\u00e7ament de cada fotograma.</p> <p>A continuaci\u00f3, escrivim un m\u00e8tode a Player per analitzar aquest diccionari. Aix\u00f2 definir\u00e0 el comportament del sprite a partir de les tecles que es premen.</p> Python<pre><code># Get the set of keys pressed and check for user input\npressed_keys = pygame.key.get_pressed()\n# Move the sprite based on user keypresses\ndef update(self, pressed_keys):\nif pressed_keys[K_UP]:\nself.rect.move_ip(0, -5)\nif pressed_keys[K_DOWN]:\nself.rect.move_ip(0, 5)\nif pressed_keys[K_LEFT]:\nself.rect.move_ip(-5, 0)\nif pressed_keys[K_RIGHT]:\nself.rect.move_ip(5, 0)\n</code></pre> <p>K_UP, K_DOWN, K_LEFT i K_RIGHT corresponen a les tecles de les fletxes del teclat. Utilitzarem .move_ip(), que significa moure des del punt actual, i reb per par\u00e0metre el n\u00famero de pixels a moure's en horitzontal i en vertical com si es tractara d'un eix de coordenades.</p> <p>A continuaci\u00f3, cridem a .update() cada fotograma per moure el sprite del jugador en resposta a les pulsacions de tecles.</p> Python<pre><code># Main loop\nwhile running:\n# for loop through the event queue\nfor event in pygame.event.get():\n# Check for KEYDOWN event\nif event.type == KEYDOWN:\n# If the Esc key is pressed, then exit the main loop\nif event.key == K_ESCAPE:\nrunning = False\n# Check for QUIT event. If QUIT, then set running to false.\nelif event.type == QUIT:\nrunning = False\n# Get all the keys currently pressed\npressed_keys = pygame.key.get_pressed()\n# Update the player sprite based on user keypresses\nplayer.update(pressed_keys)\n# Fill the screen with black\nscreen.fill((0, 0, 0))\n</code></pre> <p>Amb aix\u00f2, ja veiem que el Player es mou tant en horitzontal com en vertical.</p> <p></p> <p>\u00c9s possible que noteu dos problemes:</p> <ol> <li>El rectangle del jugador es mou molt r\u00e0pid. Ho solucionarem m\u00e9s endavant.</li> <li>El rectangle del jugador pot ixir-se'n de la pantalla. Solucionem-ho ara.</li> </ol> <p>Per mantenir el jugador a la pantalla, cal afegir la l\u00f2gica per detectar les colisions entre el jugador i els l\u00edmits de la pantalla. Per fer-ho, comprovem si les coordenades del rectangle s\u2019han despla\u00e7at m\u00e9s enll\u00e0 del l\u00edmit de la pantalla. Si \u00e9s aix\u00ed, indiquem al programa que el torne a la vora, quedant la funci\u00f3 update com a continuaci\u00f3 s'indica:</p> Python<pre><code># Move the sprite based on user keypresses\ndef update(self, pressed_keys):\nif pressed_keys[K_UP]:\nself.rect.move_ip(0, -5)\nif pressed_keys[K_DOWN]:\nself.rect.move_ip(0, 5)\nif pressed_keys[K_LEFT]:\nself.rect.move_ip(-5, 0)\nif pressed_keys[K_RIGHT]:\nself.rect.move_ip(5, 0)\n# Keep player on the screen\nif self.rect.left &lt; 0:\nself.rect.left = 0\nif self.rect.right &gt; SCREEN_WIDTH:\nself.rect.right = SCREEN_WIDTH\nif self.rect.top &lt;= 0:\nself.rect.top = 0\nif self.rect.bottom &gt;= SCREEN_HEIGHT:\nself.rect.bottom = SCREEN_HEIGHT\n</code></pre> <p>Ac\u00ed, en lloc d\u2019utilitzar .move(), nom\u00e9s heu de canviar les coordenades corresponents de .top, .bottom, .left o .right directament. Proveu-ho i veureu que el rectangle del reproductor ja no pot ixir-se'n de la pantalla.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#enemics","title":"Enemics","text":"<p>Qu\u00e8 \u00e9s un joc sense enemics? Utilitzarem les mateixes t\u00e8cniques que ja hem apr\u00e8s per crear una classe enemiga b\u00e0sica i, a continuaci\u00f3, crearem moltes inst\u00e0ncies d'aquesta per a que el jugador intente evitar-les. Primer, importeu la llibreria random.  A continuaci\u00f3, creeu una nova classe de sprite anomenada Enemy, seguint el mateix patr\u00f3 que utilitzarem per a Player:</p> Python<pre><code># Import random for random numbers\nimport random\n# Define the enemy object by extending pygame.sprite.Sprite\n# The surface you draw on the screen is now an attribute of 'enemy'\nclass Enemy(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Enemy, self).__init__()\nself.surf = pygame.Surface((20, 10))\nself.surf.fill((255, 255, 255))\nself.rect = self.surf.get_rect(\ncenter=(\nrandom.randint(SCREEN_WIDTH + 20, SCREEN_WIDTH + 100),\nrandom.randint(0, SCREEN_HEIGHT),\n)\n)\nself.speed = random.randint(5, 20)\n# Move the sprite based on speed\n# Remove the sprite when it passes the left edge of the screen\ndef update(self):\nself.rect.move_ip(-self.speed, 0)\nif self.rect.right &lt; 0:\nself.kill()\n</code></pre> <p>Hi ha quatre difer\u00e8ncies notables entre Enemic i Jugador:</p> <ol> <li>Quan creem un enemic ho fem a una ubicaci\u00f3 aleat\u00f2ria al llarg de la vora dreta de la pantalla. Es troba en una posici\u00f3 entre 20 i 100 p\u00edxels de dist\u00e0ncia de la vora dreta i en algun lloc entre la vora superior i la inferior. De forma que al principi no ser\u00e0 visible i anir\u00e0 apareixent per la vora dreta de la pantalla.</li> <li>Definim una velocitat speed com un n\u00famero aleatori entre 5 i 20. Aix\u00f2 especifica la velocitat amb qu\u00e8 aquest enemic es mou cap al jugador.</li> <li>.update() no necessita arguments, ja que els enemics es mouen autom\u00e0ticament cap a l'esquerra a la velocitat aleat\u00f2ria definida quan es va crear i que ja no canvia.</li> <li>Comprovem si l'enemic s'ha mogut fora de la pantalla al sobrepassar la vora esquerra. Per assegurar-nos que l\u2019enemic estiga completament fora de la pantalla i que no desaparega mentre encara siga visible, comprovem que el costat dret de .rect haja sobrepassat el costat esquerre de la pantalla. Una vegada que l'enemic es troba fora de pantalla, cridem a .kill() per evitar anar consumint m\u00e9s recursos cada vegada.</li> </ol> <p>Qu\u00e8 fa .kill()? Per saber-ho, estudiem els Sprite Groups.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#sprite-groups","title":"Sprite Groups","text":"<p>Una altra classe s\u00faper \u00fatil que proporciona Pygame s\u00f3n els Sprite Groups. Es tracta d'un objecte que cont\u00e9 un grup d'objectes Sprite. Aleshores, per qu\u00e8 utilitzar-lo? No podem fer el seguiment dels nostres objectes Sprite en una llista? B\u00e9, podem, per\u00f2 l\u2019avantatge d\u2019utilitzar un grup radica en els m\u00e8todes que exposa. Aquests m\u00e8todes ajuden a detectar si algun enemic ha xocat amb el jugador, cosa que facilita les actualitzacions.</p> <p>Vegem com crear Sprite Group. Creem dos objectes de grup diferents:</p> <ol> <li>El primer grup tindr\u00e0 tots els Sprite del joc.</li> <li>El segon grup tindr\u00e0 nom\u00e9s els objectes enemics.</li> </ol> <p>A continuaci\u00f3, es mostra el codi: </p>Python<pre><code># Create the 'player'\nplayer = Player()\n# Create groups to hold enemy sprites and all sprites\n# - enemies is used for collision detection and position updates\n# - all_sprites is used for rendering\nenemies = pygame.sprite.Group()\nall_sprites = pygame.sprite.Group()\nall_sprites.add(player)\n# Variable to keep the main loop running\nrunning = True\n</code></pre> <p>Quan cridem el m\u00e8tode .kill(), el Sprite s\u2019elimina de tots els grups als quals pertany. Aix\u00f2 tamb\u00e9 elimina les refer\u00e8ncies al Sprite, cosa que permet al garbage collector de Python recuperar la mem\u00f2ria quan siga necessari.</p> <p>Ara que teniu un grup all_sprites, podeu canviar la manera com es dibuixen els objectes. En lloc de cridar a .blit() nom\u00e9s amb Player, podem repintar tot sobre all_sprites:</p> <p></p>Python<pre><code># Fill the screen with black\nscreen.fill((0, 0, 0))\n# Draw all sprites\nfor entity in all_sprites:\nscreen.blit(entity.surf, entity.rect)\n# Flip everything to the display\npygame.display.flip()\n</code></pre> Ara, qualsevol objecte d'all_sprites es redibuixar\u00e0 a tots els fotogrames, ja sigui un enemic o un jugador. <p>Nom\u00e9s hi ha un problema ... No tenim cap enemic. Podriem crear un munt d\u2019enemics al principi del joc, per\u00f2 el joc es tornaria complicad\u00edssim a l'apareixer tots junts. En el seu lloc, explorem com mantenir un subministrament constant d\u2019enemics que arriben a mesura que avance el joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#esdeveniments-personalitzats","title":"Esdeveniments personalitzats","text":"<p>El disseny demana que apareguen enemics a intervals regulars. Aix\u00f2 significa que, a intervals establerts, hem de fer dues coses:</p> <ol> <li>Crea un enemic nou.</li> <li>Afegiu-lo a all_sprites i a enemics. (Sprite Groups)</li> </ol> <p>Ja teniu codi que gestiona esdeveniments aleatoris. El bucle d'esdeveniments est\u00e0 dissenyat per buscar esdeveniments aleatoris que es produeixen a cada fotograma i tractar-los adequadament. Per sort, pygame no us limita a utilitzar nom\u00e9s els tipus d\u2019esdeveniments que t\u00e9 predefinits. Podeu definir els vostres propis esdeveniments per gestionar-los segons convinga.</p> <p>Vegem com es crea un esdeveniment personalitzat que es genera cada pocs segons. Podeu crear un esdeveniment personalitzat com es mostra a continuaci\u00f3:</p> Python<pre><code># Create the screen object\n# The size is determined by the constant SCREEN_WIDTH and SCREEN_HEIGHT\nscreen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n# Create a custom event for adding a new enemy\nADDENEMY = pygame.USEREVENT + 1\npygame.time.set_timer(ADDENEMY, 250)\n# Instantiate player. Right now, this is just a rectangle.\nplayer = Player()\n</code></pre> <p>pygame defineix els esdeveniments internament com a enters, de manera que cal definir un nou esdeveniment amb un enter \u00fanic. L'\u00faltim esdeveniment reservat a Pygame es diu USEREVENT, de manera que definir ADDENEMY = pygame.USEREVENT + 1 garanteix que siga \u00fanic.</p> <p>A continuaci\u00f3, heu d'insertar aquest nou esdeveniment a la cua d'esdeveniments a intervals regulars durant tot el joc. Necessitem d'alguna forma gestionar el temps, per aix\u00f2 utilitzarem el m\u00f2dul de temps. </p> <p>Disparem el nou esdeveniment ADDENEMY cada 250 mil\u00b7lisegons, o quatre vegades per segon. Per aix\u00f2 farem una crida a .set_timer() fora del bucle del joc, ja que nom\u00e9s necessitem un temporitzador, per\u00f2 es disparar\u00e0 durant tot el joc cada 250 milisegons.</p> <p>Afegim el codi per gestionar el nostre nou esdeveniment.</p> Python<pre><code># Main loop\nwhile running:\n# Look at every event in the queue\nfor event in pygame.event.get():\n# Did the user hit a key?\nif event.type == KEYDOWN:\n# Was it the Escape key? If so, stop the loop.\nif event.key == K_ESCAPE:\nrunning = False\n# Did the user click the window close button? If so, stop the loop.\nelif event.type == QUIT:\nrunning = False\n# Add a new enemy?\nelif event.type == ADDENEMY:\n# Create the new enemy and add it to sprite groups\nnew_enemy = Enemy()\nenemies.add(new_enemy)\nall_sprites.add(new_enemy)\n# Get the set of keys pressed and check for user input\npressed_keys = pygame.key.get_pressed()\nplayer.update(pressed_keys)\n# Update enemy position\nenemies.update()\n</code></pre> <p>Sempre que el gestor d'esdeveniments veu el nou esdeveniment ADDENEMY, crea un enemic i l'afegeix a enemies i a all_sprites. Com que Enemy est\u00e0 en all_sprites, es dibuixar\u00e0 a cada fotograma. Tamb\u00e9 heu de cridar a enemies.update(), que actualitza totes les posicions dels enemics.</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#deteccio-de-collisions","title":"Detecci\u00f3 de col\u00b7lisions","text":"<p>El disseny del joc demana que finalitze el joc sempre que un enemic xoque amb el jugador. La comprovaci\u00f3 de col\u00b7lisions \u00e9s una t\u00e8cnica b\u00e0sica de programaci\u00f3 de jocs i, en general, requereix alguns c\u00e0lculs matem\u00e0tics per determinar si dos sprites se superposaran.</p> <p>Aqu\u00ed \u00e9s on resulta \u00fatil un framework com Pygame. Escriure un codi de detecci\u00f3 de col\u00b7lisions \u00e9s tedi\u00f3s, per\u00f2 Pygame t\u00e9 MOLTS m\u00e8todes de detecci\u00f3 de col\u00b7lisions disponibles per utilitzar-los.</p> <p>Per a aquest tutorial, utilitzeu un m\u00e8tode anomenat .spritecollideany(), que detecta qualsevol col\u00b7lisi\u00f3 entre un sprite i els sprites d'un grup. Accepta un Sprite i un Grup com a par\u00e0metres. Comprova les superposicions entre tots els .rect del grup i el .rect de l'sprite. Si \u00e9s aix\u00ed, torna True, \u00e9s a dir si detecta col\u00b7lisi\u00f3. En cas contrari, torna False. Aix\u00f2 s'ajusta perfectament a aquest joc, ja que hem de comprovar si un sol jugador xoca amb un grup d'enemics.</p> <p>Vegem el codi:</p> Python<pre><code># Draw all sprites\nfor entity in all_sprites:\nscreen.blit(entity.surf, entity.rect)\n# Check if any enemies have collided with the player\nif pygame.sprite.spritecollideany(player, enemies):\n# If so, then remove the player and stop the loop\nplayer.kill()\nrunning = False\n</code></pre> <p>Es comprova si el jugador ha xocat amb algun enemic. Si \u00e9s aix\u00ed, es crida a player.kill() per eliminar-lo de tots els grups als quals pertany. Com que els \u00fanics objectes que es representen es troben en all_sprites, el jugador ja no es renderitzar\u00e0. Una vegada que el jugador haja perdur, tamb\u00e9 haurem d'eixir del joc, de manera que configureu running = False per ixir del bucle del joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/3%20-%20Sprites/#velocitat-del-joc","title":"Velocitat del joc","text":"<p>En provar el joc, potser vos haureu adonat que els enemics es mouen massa r\u00e0pid. Si no, tranquils, ja que el joc s'executar\u00e0 a diferents velocitats segons el hardware subjacent, el sistema operatiu, etc.</p> <p>La ra\u00f3 d'aix\u00f2 \u00e9s que el bucle del joc processa els fotogrames tan r\u00e0pidament com el processador i l'entorn ho permeten. Com que tots els sprites es mouen una vegada per fotograma, es poden moure centenars de vegades cada segon. El nombre de fotogrames que es manegen cada segon s\u2019anomena velocitat de fotogrames (frame rate), un terme molt utilitzat pels gamers. Aconseguir-ne un adequat \u00e9s la difer\u00e8ncia entre un joc jugable i un altre que no ho \u00e9s.</p> <p>Normalment, volem una freq\u00fc\u00e8ncia de fotogrames el m\u00e9s alta possible, per poder apreciar el major nombre de detalls, per\u00f2, per a aquest joc, cal reduir-lo un poc perqu\u00e8 el joc es puga jugar. Afortunadament, el m\u00f2dul de temps de Python cont\u00e9 un rellotge dissenyat exactament per a aquest prop\u00f2sit.</p> <p>L\u2019\u00fas del rellotge per establir una velocitat de fotogrames reprodu\u00efble requereix nom\u00e9s dues l\u00ednies de codi. El primer crea un rellotge nou abans que comence el bucle del joc. Despr\u00e9s utilitzem la funci\u00f3 .tick() per informar a pygame que el programa ha arribat al final del fotograma.</p> <p></p>Python<pre><code># Setup the clock for a decent framerate\nclock = pygame.time.Clock() \n...\n# Our main loop\nwhile running:\n...\n# Flip everything to the display\npygame.display.flip()\n# Ensure program maintains a rate of 30 frames per second\nclock.tick(30)\n</code></pre> L'argument passat a .tick() estableix la velocitat de fotogrames desitjada. Per fer-ho, es calcula el nombre de mil\u00b7lisegons que ha de tardar cada fotograma, en funci\u00f3 de la velocitat de fotogrames desitjada. A continuaci\u00f3, compara aquest nombre amb el nombre de mil\u00b7lisegons que han passat des de la darrera vegada que es va cridar .tick(). Si no ha passat prou temps, retarda el processament per assegurar-se que mai no supera la velocitat de fotogrames especificada. <p>Si es passa una freq\u00fc\u00e8ncia de fotogrames m\u00e9s xicoteta, transcorrer\u00e0 m\u00e9s temps entre fotogrames, mentre que una freq\u00fc\u00e8ncia de fotogrames m\u00e9s gran proporcionar\u00e0 un joc m\u00e9s suau (i m\u00e9s r\u00e0pid).</p> <p>En aquest moment, tenim un joc totalment funcional i jugable.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/4%20-%20Imatges/","title":"Imatges","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/4%20-%20Imatges/#imatges-dels-sprites","title":"Imatges dels Sprites","text":"<p>Molt b\u00e9, tens un joc, per\u00f2 siguem sincers ... L'aspecte no \u00e9s massa amigable. El jugador i els enemics s\u00f3n nom\u00e9s blocs blancs sobre fons negre. Va ser una revoluci\u00f3 quan va apar\u00e8ixer el Pong el 1972, per\u00f2 ha quedat antiquat. Anem a substituir aquests rectangles blancs per unes imatges que faran el joc m\u00e9s amigable.</p> <p>Anem a carregar una imatge d'un avi\u00f3 per al jugador i alguns m\u00edssils per als enemics, encara que podeu utilitzar altres per personalitzar el vostre joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/4%20-%20Imatges/#alteracio-dels-constructors-dobjectes","title":"Alteraci\u00f3 dels constructors d'objectes","text":"<p>Abans d\u2019utilitzar imatges per representar el jugador i els sprites enemics, hem de fer alguns canvis als seus constructors. El codi seg\u00fcent substitueix el codi utilitzat anteriorment.</p> Python<pre><code>class Player(pygame.sprite.Sprite):\ndef __init__(self):\nsuper(Player, self).__init__()\nself.surf = pygame.image.load(\"resources/jet.png\").convert()\nself.surf.set_colorkey((255, 255, 255), RLEACCEL)\nself.rect = self.surf.get_rect()\n</code></pre> <p>Amb pygame.image.load() carreguem una imatge del disc. Li passem com a argument el path a l'arxiu. Retorna una superf\u00edcie i la crida .convert() optimitza la superf\u00edcie, fent que les futures crides al m\u00e8tode .blit() siguen m\u00e9s r\u00e0pides.</p> <p>Amb .set_colorkey() indiquem quin color es far\u00e0 transparent. En aquest cas, triem el blanc, perqu\u00e8 \u00e9s el color de fons de la imatge. La constant RLEACCEL \u00e9s un par\u00e0metre opcional que ajuda a renderitzar pygame m\u00e9s r\u00e0pidament en pantalles no accelerades. Per poder utilitzar esta constant, necessitem importar-la a la declaraci\u00f3 d\u2019importaci\u00f3 de pygame.locals del principi del codi.</p> <p>No hem de canviar res m\u00e9s, la imatge continua sent una superf\u00edcie, tret que ara hi ha una imatge pintada. </p> <p>Farem el mateix al constructor d'enemic, esta vegada carregant la imatge resources/missile.png.</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/4%20-%20Imatges/#afegir-imatges-de-fons","title":"Afegir imatges de fons","text":"<p>Afegirem ara uns n\u00favols com a imatges de fons, utilitzant els mateixos passos que per a Player i Enemy:</p> <ol> <li>Creem la classe Cloud.</li> <li>Afegim la imatge d\u2019un n\u00favol.</li> <li>Creem un m\u00e8tode .update() que mou el n\u00favol cap a la part esquerra de la pantalla 5 p\u00edxels en cada fotograma.</li> <li>Creem un gestor i un esdeveniment personalitzats per crear objectes de n\u00favol nous a un interval de temps definit de 1000ms.</li> <li>Afegim els objectes de n\u00favols creats a un grup nou anomenat n\u00favols.</li> <li>Actualitzem i dibuixem els n\u00favols al bucle principal del joc.</li> </ol> <p>Tingueu en compte que cada n\u00favol i enemic nous s\u2019afegeixen a all_sprites, mentre que els n\u00favols ho fan al grup clouds i els enemics a enemies. Perqu\u00e8?</p> <ul> <li>El renderitzat (repintat) es fa amb all_sprites.</li> <li>Les actualitzacions de posici\u00f3 es fan a n\u00favols i enemics.</li> <li>La detecci\u00f3 de col\u00b7lisions es fa entre el jugador i enemics, per\u00f2 no amb n\u00favols, ja que un avi\u00f3 pot atrevessar n\u00favols sense problemes.</li> </ul> <p>Per \u00faltim canvieu el color de fons del negre a (135, 206, 250).</p> <p></p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/","title":"Sons","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#efectes-de-so","title":"Efectes de so","text":"<p>Fins ara ens hem centrat en el joc i els aspectes visuals del mateix. Ara anem a veure com incorporar sons. pygame proporciona un mesclador per gestionar totes les activitats relacionades amb el so. Utilitzar\u00e0 les classes i m\u00e8todes d\u2019aquest m\u00f2dul per proporcionar m\u00fasica de fons i efectes de so per a diverses accions.</p> <p>El nom de mesclador fa refer\u00e8ncia al fet que el m\u00f2dul barreja diversos sons en un tot cohesionat. Mitjan\u00e7ant el subm\u00f2dul de m\u00fasica, podeu reproduir fitxers de so individuals en diversos formats. Tota la reproducci\u00f3 es produeix en segon pla, de manera que mentre es reprodueix un so, el m\u00e8tode s'executa en paral\u00b7lel i torna el control immediatament al punt on s'ha fet la crida.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#inicialitzacio","title":"Inicialitzaci\u00f3","text":"<p>L'\u00fas del mesclador comen\u00e7a amb la seua inicialitzaci\u00f3 pygame.mixer.init(). Si no volem canviar els valors per defecte, no cal passar-li arguments. S'ha d'inicialitzar el mesclador abans que el pygame.</p> Python<pre><code># Setup for sounds. Defaults are good.\npygame.mixer.init()\n# Initialize pygame\npygame.init()\n</code></pre>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#musica-de-fons","title":"M\u00fasica de fons","text":"<p>Una vegada inicialitzat el sistema, podeu configurar els vostres sons i m\u00fasica de fons com es mostra a continuaci\u00f3.</p> Python<pre><code># Load and play background music\npygame.mixer.music.load(\"Apoxode_-_Electric_1.ogg\")\npygame.mixer.music.play(loops=-1)\n# Load all sound files\n# Sound sources: Jon Fincher\nmove_up_sound = pygame.mixer.Sound(\"Rising_putter.ogg\")\nmove_down_sound = pygame.mixer.Sound(\"Falling_putter.ogg\")\ncollision_sound = pygame.mixer.Sound(\"Collision.ogg\")\n</code></pre> <p>Carreguen un clip de so de fons i comencen a reproduir-lo. Podeu dir al clip de so que es reproduisca en bucle i que no acabe mai establint el par\u00e0metre loop = -1.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#sons-desdeveniments","title":"Sons d'esdeveniments","text":"<p>Despr\u00e9s carreguen tres sons que farem servir per a diversos efectes de so. Els dos primers s\u00f3n sons ascendents i descendents, que es reprodueixen quan el jugador es mou cap amunt o cap avall. L\u2019\u00faltim \u00e9s el so que s\u2019utilitza sempre que hi ha una col\u00b7lisi\u00f3. Tamb\u00e9 podeu afegir altres sons, com ara un so per a la creaci\u00f3 d'un enemic o un so final per a la finalitzaci\u00f3 del joc.</p> <p>Llavors, com s\u2019utilitzen els efectes de so? Volem reproduir cada so quan es produeixi un esdeveniment determinat. Per exemple, quan l'avi\u00f3 es mou cap amunt, volem reproduir move_up_sound. Per tant, afegiu una crida a .play() sempre que gestioneu este l'esdeveniment.</p> <p>Per a una col\u00b7lisi\u00f3 entre el jugador i un enemic, reprodu\u00efu el so Collisions.ogg.</p> <p>Utilitzeu el m\u00e8tode stop() quan vulgau parar un so que encara s'est\u00e0 reproduint i no voleu que es mescle amb un nou.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/5%20-%20So/#fi-del-joc","title":"Fi del joc","text":"<p>Finalment, quan acabe el joc, tots els sons haurien de parar-se. Per fer-ho, afegiu les l\u00ednies seg\u00fcents al final del programa despr\u00e9s del bucle:</p> Python<pre><code># All done! Stop and quit the mixer.\npygame.mixer.music.stop()\npygame.mixer.quit()\n</code></pre> <p>T\u00e8cnicament, aquestes \u00faltimes l\u00ednies no s\u00f3n necess\u00e0ries, ja que el programa finalitza i els recursos s'alliberen. No obstant aix\u00f2, si m\u00e9s endavant decidiu afegir una pantalla d'introducci\u00f3 o una pantalla d'eixida al vostre joc, \u00e9s possible que hi haja m\u00e9s codi executat-se despr\u00e9s que finalitze el joc.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/6%20-%20Conclusi%C3%B3/","title":"Conclusi\u00f3","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/6%20-%20Conclusi%C3%B3/#conclusio","title":"Conclusi\u00f3","text":"<p>Al llarg d\u2019aquesta pr\u00e0ctica, hem apr\u00e8s els fonaments de la programaci\u00f3 de jocs amb pygame. Concretament:</p> <ul> <li>Implementar bucles d'esdeveniments</li> <li>Dibuixar elements a la pantalla</li> <li>Reproduir efectes de so i m\u00fasica</li> <li>Gestionar l'entrada de l'usuari</li> </ul> <p>Per fer-ho, hem utilitzat un subconjunt dels m\u00f2duls Pygame, inclosos els m\u00f2duls de visualitzaci\u00f3, mesclador i m\u00fasica, hora, imatge i esdeveniment. Tamb\u00e9 hem utilitzat diverses classes, inclosos Rect, Surface, Sound i Sprite. Per\u00f2 aix\u00f2 nom\u00e9s \u00e9s una xicoteta part del que pot fer Pygame. Consulteu la documentaci\u00f3 oficial de Pygame per obtenir una llista completa de m\u00f2duls i classes disponibles.</p>"},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/1%20-%20Obligatori/","title":"Part I - Base (30%)","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/1%20-%20Obligatori/#part-i-base-30","title":"Part I - Base (30%)","text":"<ol> <li>Seguix la pr\u00e0ctica pas a pas i construeix el codi del joc. Per fer-ho seguix el mateix ordre que es va explicant al llarg de la pr\u00e0ctica i ves provant els canvis que vas introduint.</li> </ol>"},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/2%20-%20Projecte/","title":"Part II - ampliaci\u00f3/projecte (70%)","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/2%20-%20Projecte/#part-ii-ampliacioprojecte-70","title":"Part II - Ampliaci\u00f3/Projecte. (70%)","text":"<p>En esta segona part pots escollir entre dues opcions:</p> <ol> <li> <p>Primera opci\u00f3. Amplia la funcionalitat del joc dels avions:</p> <ol> <li>La primera ampliaci\u00f3 proposada \u00e9s un sistema de puntuacions que ser\u00e0 visible a la pantalla del joc. Cada vegada que s'esquive un m\u00edssil i aquest sobrepasse la part esquerra de la pantalla, es sumaran 10 punts al marcador.</li> <li>La segona ampliaci\u00f3 ser\u00e0 que el joc anir\u00e0 canviant cada 20 segons entre el dia i la nit, \u00e9s a dir, el fons canviar\u00e0 del blau del dia al negre de la nit autom\u00e0ticament.</li> <li>La tercera ampliaci\u00f3 ser\u00e0 un sistema de nivells. Cada vegada que el jugador supere un m\u00faltiple de 500 punts, el joc canviar\u00e0 a un nivell superior, comen\u00e7ant la partida en el nivell 1. A m\u00e9s, el nivell ser\u00e0 visible en la pantalla, al costat de la puntuaci\u00f3.</li> <li> <p>La quarta ampliaci\u00f3 ser\u00e0 que la dificultat del joc anir\u00e0 creixent amb els nivells. Al principi del joc, es crearan enemics cada 500ms i la seua velocitat ser\u00e0 un n\u00famero aleatori entre 1 i 10. En el segon nivell, la velocitat de creaci\u00f3 seran 450 ms i les velocitats aniran entre 3 i 12. La idea \u00e9s parametritzar els valors segons el nivell, per exemple, per a la velocitat de creaci\u00f3 podria ser:</p> \\[v_c =  100 + (450 - 50 * nivell)\\] \\[v_e = random(2 * nivell, 10 + 3 * nivell)\\] <p>On \\(v_c\\) \u00e9s la velocitat de creaci\u00f3 d'enemics On \\(v_e\\) \u00e9s la velocitat de despla\u00e7ament dels enemics</p> </li> <li> <p>Fes que la puntuaci\u00f3, en cas de ser un nou r\u00e8cord, es guarde en un document de text anomenat punt_max.txt en la mateixa carpeta on est\u00e0 el codi del joc. Per a saber si \u00e9s un nou r\u00e8cord, quan es carrega el joc, haur\u00e0 de llegir el document i extraure la puntuaci\u00f3 m\u00e0xima.</p> </li> <li>Afegeix una pantalla de benvinguda on es done la benvinguda al joc. A m\u00e9s, ha de mostrar el r\u00e8cord fins al moment i esperar fins que es polse la tecla p, moment en que es passar\u00e0 a la pantalla de joc.</li> <li>Fes una pantalla final on s'indique que la partida ha finalitzat, mostre la puntuaci\u00f3 i el nivell al que s'ha arribat, i en cas de ser r\u00e8cord, ho indique i felicite el jugador.</li> <li>Proposeu una funcionalitat extra al joc per fer-lo m\u00e9s interessant. Qualsevol funcionalitat que resulte interessant ser\u00e0 valorada positivament.</li> </ol> </li> <li> <p>Segona opci\u00f3. Proposa la creaci\u00f3 d'un joc del teu gust del tipus que hem desenvolupat en la pr\u00e0ctica. Pots pensar en jocs tipus el Pong, el Tetris, ... Si agafes aquesta opci\u00f3 conta-li-la al professor abans de comen\u00e7ar a desenvolupar perqu\u00e8 et done l'aprovaci\u00f3 de la idea, ja que pot implicar una dificultat massa elevada o massa baixa. El joc hauria d'incloure tots els tractaments que hem anat desenvolupant durant la pr\u00e0ctica.</p> </li> </ol>"},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/3%20-%20Qualificaci%C3%B3/","title":"Qualificaci\u00f3","text":""},{"location":"unitats/1-python/pr%C3%A0ctiques/tasques/3%20-%20Qualificaci%C3%B3/#qualificacio","title":"Qualificaci\u00f3","text":"<p>Per a qualificar aquesta primera unitat, es valorar\u00e0 un 30% la part de pr\u00e0ctica obligat\u00f2ria i un 70% la part del projecte o ampliaci\u00f3. </p> <p>Per a la part del projecte s'utilitzar\u00e0 la seg\u00fcent r\u00fabrica. D'esta forma, l'alumne podr\u00e0 saber anticipadament, els aspectes que es tindran en compte a l'hora de corregir.</p> <p>(Sols per a alumnes del presencial) A m\u00e9s, es realitzar\u00e0 una coavaluaci\u00f3. Per a fer a\u00e7\u00f2, cada alumne exposar\u00e0 en un per\u00edode breu, al voltant de 5 minuts el seu projecte, i la resta d'alumnes l'avaluaran.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/","title":"Introducci\u00f3","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#1-que-es-python","title":"1. Qu\u00e8 \u00e9s Python?","text":"<p>Python \u00e9s un llenguatge de prop\u00f2sit general, al igual que Java o C. El seu \u00fas ha augmentat durant els \u00faltims temps gr\u00e0cies a:</p> <ul> <li>La seua flexibilitat i simplicitat, que el fan f\u00e0cil d'aprendre</li> <li>El seu \u00fas extens en camps com el \"Data Science\", la IA i l'aprenentatge de programaci\u00f3.</li> <li>Llenguatge d'scripting d'alt nivell.</li> <li>Multiplataforma.</li> <li>Gran quantitat i varietat de llibreries. Web frameworks, clients correu, gestors de contingut, concurr\u00e8ncia, generaci\u00f3 de documents, gr\u00e0fics, intel\u00b7lig\u00e8ncia artificial, ...</li> <li>Lliure!! Mant\u00e9s per la  Python Software Foundation</li> </ul>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#11-execucio-de-python","title":"1.1. Execuci\u00f3 de Python","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#12-perque-python","title":"1.2. Perqu\u00e8 Python","text":"<p>El llenguatge de programaci\u00f3 Python \u00e9s una opci\u00f3 cada vegada m\u00e9s utilitzada per principiants com per desenvolupadors experimentats. Flexible i vers\u00e0til, Python t\u00e9 punts forts en scripts, automatitzaci\u00f3, an\u00e0lisi de dades, aprenentatge autom\u00e0tic i desenvolupament de back-end. Publicat per primera vegada el 1991 amb un nom inspirat en el grup de com\u00e8dia brit\u00e0nic Monty Python, l\u2019equip de desenvolupament volia fer de Python un llenguatge divertit d\u2019utilitzar.</p> <p>C \u00e9s el llenguatge de programaci\u00f3 m\u00e9s popular a l\u2019\u00edndex TIOBE, mentre que Python \u00e9s el llenguatge m\u00e9s buscat a l\u2019\u00edndex PYPL. Python i Java segueixen de prop a C al TIOBE. A PYPL, la difer\u00e8ncia \u00e9s m\u00e9s gran, ja que Python, que ocupa el primer lloc, supera en un 12% a Java, que ocupa el segon lloc.</p> <p>Aquest curs, aprendrem a utilitzar Python i el framework Qt per desenvolupar aplicacions amb interf\u00edcie d'usuari.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#2-installacio-de-python-3miniconda","title":"2. Instal\u00b7laci\u00f3 de Python 3/Miniconda","text":"<p>Per a instal\u00b7lar Python3 instal\u00b7larem miniconda, la versi\u00f3 m\u00ednima d'Anaconda. Anaconda \u00e9s una distribuci\u00f3 de Python que inclou molts paquets i biblioteques preinstal\u00b7lats. A m\u00e9s, presenta alguns avantatges front a la instal\u00b7laci\u00f3 de l'int\u00e8rpret a trav\u00e9s del sistema:</p> <ol> <li> <p>Gesti\u00f3 d'entorns: Permet crear i gestionar entorns virtuals, que s\u00f3n entorns de Python a\u00efllats que poden tindre les seves pr\u00f2pies versions de Python i paquets instal\u00b7lats. Aix\u00f2 facilita la gesti\u00f3 de depend\u00e8ncies i la compatibilitat entre projectes.</p> </li> <li> <p>Gesti\u00f3 de paquets: Proporciona una forma convenient d'instal\u00b7lar, actualitzar i desinstal\u00b7lar paquets de programari i biblioteques.</p> </li> <li> <p>Facilitat d'\u00fas: \u00c9s f\u00e0cil d'instal\u00b7lar i configurar en qualsevol sistema operatiu, incloent Windows, macOS i Linux.</p> </li> <li> <p>Personalitzaci\u00f3: A difer\u00e8ncia d'Anaconda, que inclou una gran quantitat de paquets preinstal\u00b7lats, Miniconda ofereix un sistema m\u00ednim que permet triar i afegir nom\u00e9s els paquets que necessitem per al nostre projecte, la qual cosa pot ajudar a reduir l'espai en disc i la complexitat.</p> </li> <li> <p>Reproductibilitat: \u00e9s possible configurar tot un entorn de desenvolupament i exportar-lo a un altre sistema de forma molt r\u00e0pida.</p> </li> </ol> <p>Ac\u00ed teniu el CheatSheet de la \u00faltima versi\u00f3 de conda.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#21-us-de-conda-i-entorns-virtuals-de-desenvolupament","title":"2.1. \u00das de Conda i entorns virtuals de desenvolupament","text":"<p>Un entorn virtual \u00e9s un entorn a\u00efllat de Python que es crea utilitzant l'eina de gesti\u00f3 de paquets Conda. Aquests entorns virtuals permeten als desenvolupadors crear espais separats pels seus projectes, la qual cosa els permet gestionar les depend\u00e8ncies de manera eficient i garantir que cada projecte tinga el seu propi conjunt de biblioteques i paquets sense interferir amb altres projectes ni amb la configuraci\u00f3 del sistema.</p> <p>Una vegada instal\u00b7lat miniconda, veureu que per defecte activa un entorn virtual anomenat base en obrir el vostre terminal, ja que ens apareix <code>(base)</code> al nostre prompt.</p> <p>Per crear, activar i desactivar els entorns de desenvolupament utilitzarem les seg\u00fcents ordres:</p> Bash<pre><code>$ conda create --name ENVNAME\n$ conda activate ENVNAME\n$ conda deactivate\n</code></pre> <p>Gesti\u00f3 d'entorns virtuals amb vscode</p> <p>Podeu utilitzar Python Environment Manager de Don Jayamanne per gestionar de forma visual els vostres entorns.</p> <p>\u00das d'entorns de desenvolupament</p> <p>Creeu-vos un entorn de desenvolupament per al m\u00f2dul. Tamb\u00e9 haureu de crear-vos nous entorns per a cada projecte.</p> <p>Desactivem l'activaci\u00f3 de base per defecte</p> <p>Si voleu que per defecte no s'active l'entorn virtual base, podeu executar la seg\u00fcent ordre al terminal (Anaconda Prompt en cas d'utilitzar Windows):</p> Bash<pre><code>$ conda config --set auto_activate_base false\n</code></pre> <p>Autocompletat amb el tabulador</p> <p>L'autocompletat de conda no est\u00e0 actiu per defecte. Si voleu utilitzar l'autocompletat podeu instal\u00b7lar conda-bash-completion.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#22-us-de-conda-per-a-installacio-de-paquets","title":"2.2. \u00das de conda per a instal\u00b7laci\u00f3 de paquets","text":"<p>Ara podrem utilitzar conda per instal\u00b7lar paquets de Python3.</p> Bash<pre><code>$ conda install PACKAGE\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#3-modes-dexecucio","title":"3. Modes d'execuci\u00f3","text":"<ol> <li> <p>Interactiva a trav\u00e9s de l'int\u00e8rpret</p> Bash<pre><code>~$ python3\nPython 3.7.3 (default, Jul 25 2020, 13:03:44) [GCC 8.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; </code></pre> </li> <li> <p>Execuci\u00f3 d'un fitxer Python</p> Bash<pre><code>~$ python3 hola_mon.py\nHola m\u00f3n\n</code></pre> </li> <li> <p>Execuci\u00f3 d'un script</p> Bash<pre><code>hola_mon.py\n---\n#!/usr/bin/env python3\nprint(\"Hola m\u00f3n\")\n---\n\n~$ chmod u+x hola_mon.py\n~$ ./hola_mon.py\nHola m\u00f3n\n</code></pre> </li> <li> <p>Des d'un Entorn de Desenvolupament IDE:</p> <p>En el cas de l'entorn de desenvolupament es recomana utilitzar Visual Studio Code. Instal\u00b7leu tamb\u00e9 l'extensi\u00f3 Python de Microsoft, que inclou autocompletat, depuraci\u00f3, formataci\u00f3 autom\u00e0tica, proves...</p> </li> </ol>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#31-activitat-1","title":"3.1. Activitat 1","text":"<p>Implementa el \"Hola m\u00f3n!\" i executa-lo de les quatre formes possibles.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#4-paraules-reservades-i-identificadors","title":"4. Paraules reservades i identificadors","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#41-paraules-reservades","title":"4.1. Paraules reservades","text":"<p>No es poden utilitzar coma identificador de variables ni nom de funcions, ja que s'utilitzen per a definir la sintaxi i l'estructura d'un programa. Les paraules reservades s\u00f3n:</p> False await else import pass None break except in raise True class finally is return and continue for lambda try as def from nonlocal while assert del global not with async elif if or yield <p>Per a obtindre la llista completa des de l'int\u00e8rpret:</p> Python<pre><code>&gt;&gt;&gt; import keyword\n&gt;&gt;&gt; print(keyword.kwlist)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#42-identificadors","title":"4.2. Identificadors","text":"<p>Per convenci\u00f3, els noms de les variables i funcions han de ser:</p> <ul> <li>combinacions de lletres min\u00fascules i n\u00fameros</li> <li>comen\u00e7ar per lletra</li> <li>descriptius (excepte en bucles o se sol utilitzar i i j)</li> <li>amb paraules separades per gui\u00f3 baix</li> </ul> <p>Per exemple: nom_usuari, numero_telefon, cognom1, sumar(), ...</p> <p>Recorda que Python \u00e9s un llenguatge case sensitive. Per tant Var i var no s\u00f3n el mateix identificador.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#5-instruccions-i-sagnat","title":"5. Instruccions i sagnat","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#51-instruccions","title":"5.1. Instruccions","text":"<p>L'int\u00e8rpret de Python va executant l\u00ednia a l\u00ednia cada instrucci\u00f3. Si volem que una instrucci\u00f3 ocupe diverses l\u00ednies ho hem d'indicar amb el car\u00e0cter \\.</p> <p>Per exemple:</p> Python<pre><code>&gt;&gt;&gt; a = 1 + 2 + 3 + \\\n...     4 + 5 + 6 + \\\n...     7 + 8 + 9\n&gt;&gt;&gt; print(a)\n45\n</code></pre> <p>La continuaci\u00f3 de l\u00ednia \u00e9s implicita dins de par\u00e8ntesis (), corxets [] i claus {}.</p> Python<pre><code>colors = ['red',\n'blue',\n'green']\n</code></pre> <p>Tamb\u00e9 podem posar diverses sent\u00e8ncies en una l\u00ednia:</p> Python<pre><code>a = 1; b = 2; c = 3\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#52-sagnat","title":"5.2. Sagnat","text":"<p>La majoria de llenguatges de programaci\u00f3 utilitzen les claus {} per a definir blocs de codi. En canvi, Python utilitza el sagnat (identation).</p> <p>Un bloc de codi (cos d'una funci\u00f3, bucle, etc.) comen\u00e7a amb sagnat i acaba amb la primera l\u00ednia sense sagnat. Dep\u00e8n de vosaltres la quantitat de sagnat, per\u00f2 ha de ser coherent en tot el bloc. Generalment, s\u2019utilitzen quatre espais en blanc per a sagnat i es prefereixen a les tabulacions. El resultat \u00e9s un codi net i clar. Exemple:</p> Python<pre><code>for i in range(1,11):\nprint(i)\nif i == 5:\nbreak\n</code></pre> <p>Un sagnat incorrecte llan\u00e7a un IndentationError.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#53-comentaris","title":"5.3. Comentaris","text":"<p>Els comentaris s\u00f3n molt importants en escriure un programa. Descriuen el que passa dins d\u2019un programa, de manera que una persona que mira el codi font no tinga dificultats per entendre'l. A m\u00e9s, \u00e9s possible que oblideu els detalls clau d'implementaci\u00f3 del programa que acabeu d\u2019escriure. Per tant, invertir temps per explicar aquests conceptes en forma de comentaris sempre \u00e9s fruct\u00edfer.</p> <p>A Python, fem servir el s\u00edmbol coixinet (#) per comen\u00e7ar a escriure un comentari.  S'est\u00e9n fins al car\u00e0cter de l\u00ednia nova. No cal que el comentari estiga a principi de l\u00ednia, pot estar en mig.</p> <p>Per fer comentaris multil\u00ednia, podem utilitzar el coixinet a principi de cada l\u00ednia. Tamb\u00e9 podem fer servir les cometes dobles o simples tres vegades.</p> <p>Exemple:</p> Python<pre><code>''' Comentari\nmultil\u00ednia'''\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#54-docstrings","title":"5.4. Docstrings","text":"<p>Una docstring \u00e9s una abreviatura de text de documentaci\u00f3.</p> <p>La documentaci\u00f3 de Python s\u00f3n els textos que apareixen just despr\u00e9s de la definici\u00f3 d'una funci\u00f3, m\u00e8tode, classe o m\u00f2dul.</p> <p>S'utilitzen cometes triples durant l'escriptura de la documentaci\u00f3. </p> <p>Per exemple:</p> Python<pre><code>def doble (num):\n\"\"\"Funci\u00f3 per duplicar el valor\"\"\"\nreturn 2 * num\n</code></pre> <p>La documentaci\u00f3 s\u2019associa a l\u2019objecte com a atribut doc.</p> <p>Per tant, podem accedir a la documentaci\u00f3 de la funci\u00f3 anterior amb les seg\u00fcents l\u00ednies de codi:</p> Python<pre><code>def doble (num):\n\"\"\"Funci\u00f3 per duplicar el valor\"\"\"\nreturn 2 * num\nprint(doble.__ doc__)\n</code></pre> Python<pre><code>def suma_binaria(a, b):\n'''\n    Torna la suma de dos enters en binari.\n            Par\u00e0metres:\n                    a (int): Un enter\n                    b (int): Altre enter\n            Torna:\n                    suma_binaria (str): String amb els digits binaris de la suma\n    '''\nsuma_binaria = bin(a+b)[2:]\nreturn suma_binaria\nprint(suma_binaria.__doc__)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#6-variables-constants-i-tipus","title":"6. Variables, constants i tipus","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#61-variables","title":"6.1. Variables","text":"<p>En Python, quan declarem una variable i li assignem un valor, realment estem creant un objecte i assignant un valor per refer\u00e8ncia.</p> Python<pre><code>&gt;&gt;&gt; num = 10\n&gt;&gt;&gt; type(num)\n&lt;class 'int'&gt;\n&gt;&gt;&gt; num = 10.0\n&gt;&gt;&gt; type(num)\n&lt;class 'float'&gt;\n</code></pre> <p>Podem inicialitzar m\u00faltiples variables en una mateixa l\u00ednia, ja siga amb el mateix valor o diferent.</p> Python<pre><code>a, b, c = 5, 3.2, \"Hola\"\nx = y = z = \"iguals\"\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#62-constants","title":"6.2. Constants","text":"<p>A Python no existeixen les constants a l'estil de static final de Java, sin\u00f3 que simplement es defineix una variable que no es modifica el valor. Normalment es definixen en un m\u00f2dul a banda, utilitzant maj\u00fascules i gui\u00f3 baix si \u00e9s necessari, que s'importa a l'arxiu principal.</p> Python<pre><code>constants.py\n---\nPI = 3.14\nmain.py\n---\nimport constants.py\nradi = 5\nperimetre = 2 * constants.PI * radi\nprint(perimetre)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#63-tipus","title":"6.3. Tipus","text":"<p>L'assignaci\u00f3 de tipus \u00e9s din\u00e0mica i pot canviar, per aix\u00f2 no declarem els tipus de les variables. Per determinar el tipus d'un objecte, fem servir el m\u00e8tode type(). Els tipus d'objecte definits a Python3 s\u00f3n: 1. Num\u00e8rics: </p> <p>1.1. Integer</p> Python<pre><code>    a = 0b1010 #Binary\nb = 100 #Decimal \nc = 0o310 #Octal\nd = 0x12c #Hexadecimal\n</code></pre> <p>1.2. Float</p> Python<pre><code>    float_1 = 10.5 \nfloat_2 = 1.5e2\n</code></pre> <p>1.3. Complex</p> Python<pre><code>    x = 3 + 4j\n</code></pre> <ol> <li>Strings</li> </ol> Python<pre><code>    nom = 'Ferran Cunyat'\n</code></pre> <p>Els principals m\u00e8todes sobre un string s\u00f3n capitalize(), count(), find(), format(), lower(), replace(), split(), title(), translate(), upper().</p> <ol> <li>Boolean</li> </ol> Python<pre><code>    x = (1 == True) # True pren el valor num\u00e8ric 1, mentre que False el 0\ny = (1 == False)\na = True + 4\nb = False + 10\n</code></pre> <ol> <li>Especials (None)</li> </ol> <p>S'utilitza per no donar-li valor a una variable.</p> Python<pre><code>&gt;&gt;&gt; x = None\n&gt;&gt;&gt; type(x)\n&lt;class 'NoneType'&gt;\n</code></pre> <ol> <li> <p>Col\u00b7leccions</p> </li> <li> <p>Llista</p> <p>S\u00f3n una seq\u00fc\u00e8ncia d'elements, no necess\u00e0riament del mateix tipus, encara que normalment si que ho s\u00f3n. Es definix amb corxets i els elements separats per comes. Podem accedir a un element o un rang i \u00e9s mutable.</p> Python<pre><code>    &gt;&gt;&gt; a = [5,10,15,20,25,30,45,40]\n&gt;&gt;&gt; print(a)\n[5, 10, 15, 20, 25, 30, 45, 40]\n&gt;&gt;&gt; a[3] = \"Ferran\"\n&gt;&gt;&gt; print(a[:4])\n[5, 10, 15, 'Ferran']\n</code></pre> <p>Algunes de les principals funcions que podem aplicar sobre llistes s\u00f3n apend(), clear(), copy(), extend(), insert(), remove(), reverse().</p> </li> <li> <p>Tupla</p> <p>S\u00f3n una seq\u00fc\u00e8ncia d'elements, no necess\u00e0riament del mateix tipus, per\u00f2 esta vegada immutable.</p> Python<pre><code>    &gt;&gt;&gt; tupla = (2,'hola')\n&gt;&gt;&gt; tupla[1] = 'clavel'\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'tuple' object does not support item assignment\n</code></pre> <ol> <li>Rang</li> </ol> <p>Seq\u00fc\u00e8ncia immutable de n\u00fameros, generalment utilitzada per a iterar sobre for o generar llistes r\u00e0pidament.</p> Python<pre><code>    &gt;&gt;&gt; list(range(0, 30, 5))\n[0, 5, 10, 15, 20, 25]\n</code></pre> <p>3</p> <p>. Conjunt (Set)</p> <p>Col\u00b7lecci\u00f3 desordenada d'elements \u00fanics. Ja que \u00e9s una llista desordenada, no la podem indexar i per tant accedir als elements segons la seua posici\u00f3.</p> Python<pre><code>&gt;&gt;&gt; a = {2,2,5,5,4,10,1,0}\n&gt;&gt;&gt; print(a)\n{0, 1, 2, 4, 5, 10}\n&gt;&gt;&gt; a[1]\nTraceback (most recent call last):\nFile \"&lt;string&gt;\", line 301, in runcode\nFile \"&lt;interactive input&gt;\", line 1, in &lt;module&gt;\nTypeError: 'set' object does not support indexing\n</code></pre> <ol> <li>Diccionari</li> </ol> <p>Diccionari \u00e9s una col\u00b7lecci\u00f3 no ordenada de parells valor-clau.</p> <p>Generalment s\u2019utilitza quan tenim una gran quantitat de dades. Els diccionaris estan optimitzats per recuperar dades. Hem de con\u00e8ixer la clau per recuperar el valor.</p> <p>A Python, els diccionaris es defineixen entre claus {} i cada element \u00e9s un parell que adopta la forma de clau:valor. La clau i el valor poden ser de qualsevol tipus.</p> Python<pre><code>    &gt;&gt;&gt; d = {1:'valor','clau':2}\n&gt;&gt;&gt; print(type(d))\n&lt;class 'dict'&gt;\n&gt;&gt;&gt; print(\"d[1] = \", d[1]);\nd[1] =  valor\n&gt;&gt;&gt; print(\"d['clau'] = \", d['clau']);\nd['clau'] =  2\n&gt;&gt;&gt; print(\"d[2] = \", d[2]);\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\nKeyError: 2\n</code></pre> </li> </ol>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#64-activitat-2","title":"6.4. Activitat 2","text":"<p>Fixa't en el seg\u00fcent fragment de codi:</p> <p></p>Python<pre><code>&gt;&gt;&gt; s = [1,2]\n&gt;&gt;&gt; r = s[:]\n&gt;&gt;&gt; s[0]=2\n&gt;&gt;&gt; print(s)\n[2, 2]\n&gt;&gt;&gt; print(r)\n???\n&gt;&gt;&gt; print(s)\n???\n</code></pre> Quina ser\u00e0 l'eixida? Per qu\u00e9? <p></p>Python<pre><code>&gt;&gt;&gt; r = s\n&gt;&gt;&gt; s[0]= 5\n&gt;&gt;&gt; print(r)\n???\n&gt;&gt;&gt; print(s)\n???\n</code></pre> I ara? Per qu\u00e9?"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#65-conversio-entre-tipus","title":"6.5. Conversi\u00f3 entre tipus","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#651-conversio-implicita","title":"6.5.1. Conversi\u00f3 impl\u00edcita","text":"<p>S\u00f3n conversions que fa el mateix llenguatge autom\u00e0ticament. Per exemple:</p> Python<pre><code>num_int = 123\nnum_flo = 1.23\nnum_nou = num_int + num_flo\nprint(\"num_int \u00e9s de tipus:\",type(num_int))\nprint(\"num_flo \u00e9s de tipus:\",type(num_flo))\nprint(\"Valor de num_nou:\",num_nou)\nprint(\"num_nou \u00e9s de tipus:\",type(num_nou))\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#66-conversio-explicita","title":"6.6. Conversi\u00f3 expl\u00edcita","text":"<p>Utilitzem funcions predefinides per a for\u00e7ar la conversi\u00f3 int(), float(), str(), ....</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#67-activitat-3","title":"6.7. Activitat 3","text":"<p>Quin \u00e9s el resultat d'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>&gt;&gt;&gt; enter = 123\n&gt;&gt;&gt; cadena = \"456\"\n&gt;&gt;&gt; suma = enter + cadena\n</code></pre> <p>Definix dues variables, una per a fer la suma entera (579) i l'altra per a concatrenar com a text (123456).</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#7-entrada-eixida-i-import","title":"7. Entrada, eixida i import","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#71-entrada","title":"7.1. Entrada","text":"<p>Ja hem vist que per a introduir informaci\u00f3 per teclat utilitzem la funci\u00f3 input([prompt]). </p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#72-eixida","title":"7.2. Eixida","text":"<p>Per a imprimir per ella utilitzarem la funci\u00f3 print().  Moltes vegades s'utilitza en combinaci\u00f3 amb la funci\u00f3 format() dels strings.</p> Python<pre><code>&gt;&gt;&gt; x = 5; y = 10\n&gt;&gt;&gt; print('El valor d\\'x \u00e9s {} i el de y \u00e9s {}'.format(x,y))\n&gt;&gt;&gt; # Fixeu-se que hem escapat el caracter '\nEl valor d'x \u00e9s 5 i el de y \u00e9s 10\n&gt;&gt;&gt; print('Hola {nom}, {salutacio}'.format(salutacio = 'Bon dia', nom = 'Pau'))\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#721-activitat-4","title":"7.2.1. Activitat 4","text":"<p>Implementa el programa \"Hola m\u00f3n\" utilitzant la funci\u00f3 format.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#73-import","title":"7.3. Import","text":"<p>Quan volem fer \u00fas del codi d'un altre m\u00f2dul (.py), l'hem d'importar al programa actual amb import.</p> Python<pre><code>&gt;&gt;&gt; import math\n&gt;&gt;&gt; print(math.pi)\n</code></pre> <p>Tamb\u00e9 podem importar sols alguna de les funcions o atributs amb from</p> Python<pre><code>&gt;&gt;&gt; from math import pi\n</code></pre> <p>En importar un m\u00f2dul, Python analitza diversos llocs definits a sys.path. \u00c9s una llista de les ubicacions on buscar el m\u00f2dul.</p> Python<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.path\n['', '/usr/lib/python37.zip', '/usr/lib/python3.7', '/usr/lib/python3.7/lib-dynload', '/home/ferran/.local/lib/python3.7/site-packages', '/usr/local/lib/python3.7/dist-packages', '/usr/lib/python3/dist-packages']\n</code></pre> <p>Per a importar d'una altra carpeta, ho fem amb from paquet import modul. Pots posar ubicacions absolutes o relatives. Si volem importar un codi d'una ubicaci\u00f3 que no est\u00e0 al path.</p> Python<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.path.append('/path/a/la/carpeta')\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#8-espai-de-noms-i-ambit-de-variables","title":"8. Espai de noms i \u00e0mbit de variables","text":""},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#81-noms","title":"8.1. Noms","text":"<p>En Python, tot s\u00f3n objectes, incl\u00fas les funcions. Un nom \u00e9s la forma d'accedir als objectes, i amb la funci\u00f3 id() podem veure la seua ubicaci\u00f3 en mem\u00f2ria. Per exemple:</p> Python<pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt;print('id(2) =', id(2))\nid(2) = 9062656\n&gt;&gt;&gt;print('id(a) =', id(a))\nd(a) = 9062656\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#811-activitat-5","title":"8.1.1. Activitat 5","text":"<p>Quin creus que ser\u00e0 el resultat a l'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>&gt;&gt;&gt; a = 2\n&gt;&gt;&gt; print('id(a) =', id(a))\n&gt;&gt;&gt; a = a+1\n&gt;&gt;&gt; print('id(a) =', id(a))\n&gt;&gt;&gt; print('id(3) =', id(3))\n&gt;&gt;&gt; b = 2\n&gt;&gt;&gt; print('id(b) =', id(b))\n&gt;&gt;&gt; print('id(2) =', id(2))\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#82-espais-de-noms-namespaces","title":"8.2. Espais de noms (namespaces)","text":"<p>Els espais de noms a Python, s\u00f3n una col\u00b7lecci\u00f3 de noms. </p> <p>Diferents espais de noms poden coexistir, per\u00f2 estan completament a\u00efllats.</p> <p>Quan iniciem Python, es crea un espai de noms amb totes les funcions que l'int\u00e8rpret reconeix, espai de noms predefinit. Aquesta \u00e9s la ra\u00f3 per la qual funcions integrades com id (), print () etc. sempre estan disponibles per a nosaltres des de qualsevol part del programa.</p> <p>En canvi, cada m\u00f2dul crea el seu propi espai de noms global. Aquests espais de noms estan a\u00efllats entre ells. Per tant, podem donar el mateix nom a objectes de m\u00f2duls diferents sense que entren en conflicte.</p> <p>Els m\u00f2duls poden contindre funcions i classes. Quan es crida una funci\u00f3, es crea un espai de noms local que t\u00e9 noms propis definits. Similar, \u00e9s el cas de la classe. El seg\u00fcent diagrama pot ajudar a aclarir aquest concepte.</p> <p></p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#83-ambit-de-les-variables","title":"8.3. \u00c0mbit de les variables","text":"<p>Tot i que hi ha diversos espais de noms definits, \u00e9s possible que no puguem accedir a tots ells des de totes les parts del programa. El concepte d\u2019\u00e0mbit entra en joc.</p> <p>Sempre hi ha almenys tres \u00e0mbits definits.</p> <ol> <li>\u00c0mbit local a la funci\u00f3 amb nom locals</li> <li>\u00c0mbit del m\u00f2dul que t\u00e9 noms globals</li> <li>\u00c0mbit m\u00e9s extern que t\u00e9 noms predefinits</li> </ol> <p>Quan es fa una refer\u00e8ncia dins d'una funci\u00f3, el nom es busca a l'espai de noms local, despr\u00e9s a l'espai de noms global i finalment a l'espai de noms predefinit.</p> <p>Si hi ha una funci\u00f3 dins d\u2019una altra funci\u00f3, s\u2019anida un nou \u00e0mbit dins de l'\u00e0mbit local.</p>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#831-activitat-6","title":"8.3.1. Activitat 6","text":"<p>Quin ser\u00e0 el resultat mostrat per consola a l'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>def funcio_externa():\na = 20\ndef funcio_interna():\na = 30\nprint('a =', a)\nfuncio_interna()\nprint('a =', a)\na = 10\nfuncio_externa()\nprint('a =', a)\n</code></pre>"},{"location":"unitats/1-python/teoria/1%20-%20Introducci%C3%B3/#832-activitat-7","title":"8.3.2. Activitat 7","text":"<p>Quin ser\u00e0 el resultat mostrat per consola a l'executar el seg\u00fcent fragment de codi?</p> Python<pre><code>def funcio_externa():\nglobal a\na = 20\ndef funcio_interna():\nglobal a\na = 30\nprint('a =', a)\nfuncio_interna()\nprint('a =', a)\na = 10\nfuncio_externa()\nprint('a =', a)\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/","title":"Control de fluxe","text":""},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#1-if-else","title":"1. If ... else","text":"Python<pre><code>num = int(input(\"N\u00famero: \"))\nif num &gt; 0:\nprint(\"Positiu\")\nelif num == 0:\nprint(\"Zero\")\nelse:\nprint(\"Negatiu\")\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#2-for","title":"2. For","text":"<p>No existeix un for a l'estil de C o Java. Am\u00e9s podem afegir un else al final de bucle.</p> Python<pre><code>nums = [6, 5, 3, 8, 4, 2, 5, 4, 11]\nsuma = 0\nfor val in nums:\nsuma = suma + val\nelse:\nprint(\"Hem acabat de sumar\")\nprint(\"La suma \u00e9s\", suma)\n</code></pre> <p>Podem combinar el bucle for amb la funci\u00f3 range(principi, fi, pas). </p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#21-activitat-8","title":"2.1. Activitat 8","text":"<p>Fes una aplicaci\u00f3 que imprimisca els n\u00fameros imparells entre l'1 i el 100.</p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#22-activitat-9","title":"2.2. Activitat 9","text":"<p>Fes una aplicaci\u00f3 que donada la seg\u00fcent llista, imprimisca els seus membres: aficions = ['esports', 'cine', 'teatre']</p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#3-while","title":"3. While","text":"Python<pre><code>contador = 0\nwhile contador &lt; 3:\nprint(\"Dins del while\")\ncontador = contador + 1\nelse:\nprint(\"Fora del bucle\")\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#4-break-i-continue","title":"4. Break i continue","text":"<p>S'utilitzen igual que a Java. El continue passa a la seg\u00fcent iteraci\u00f3, mentre que el break ix del bucle. En cas de bucles anidats, ix del bucle intern.</p>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#5-switch-case","title":"5. Switch - Case","text":"<p>Fins a la versi\u00f3 3.10, python no implementava el switch-case d'altres llenguatges i s'havia d'utilitzar un bloc d'if-elseif:</p> Python<pre><code>edat = 120\nif age &gt; 90:\nprint(\"Esta festa \u00e9s sols per a joves.\")\nelif age &lt; 0:\nprint(\"Encara no has nascut!!\")\nelif age &gt;= 18:\nprint(\"Endavant!!\")\nelse: \n\"Ers massa jove per entrar a esta festa\"\n# Output: Esta festa \u00e9s sols per a joves.\n</code></pre> <p>O definir una funci\u00f3 que executara aquesta funcionalitat:</p> Python<pre><code>def switch(lang):\nif lang == \"JavaScript\":\nreturn \"Ser\u00e0s programador web.\"\nelif lang == \"PHP\":\nreturn \"Ser\u00e0s programador de backend.\"\nelif lang == \"Python\":\nreturn \"Ser\u00e0s cient\u00edfic de dades.\"\nelif lang == \"Solidity\":\nreturn \"Ser\u00e0s desenvolupador de Blockchain.\"\nelif lang == \"Dart\":\nreturn \"Ser\u00e0s desenvolupador d'aplicacions m\u00f2bils.\"\nprint(switch(\"JavaScript\"))   \nprint(switch(\"Python\"))   \nprint(switch(\"Dart\"))  \n\"\"\"\nEixida: \nSer\u00e0s programador web.\nSer\u00e0s cient\u00edfic de dades.\nSer\u00e0s desenvolupador d'aplicacions m\u00f2bils\n\"\"\"\n</code></pre> <p>A partir de la versi\u00f3 3.10, Python disposa de les paraules reservades match-case:</p> Python<pre><code>match terme:\ncase patr\u00f3-1:\nacci\u00f3-1\ncase patr\u00f3-2:\nacci\u00f3-2\ncase patr\u00f3-3:\nacci\u00f3-3\ncase _:\nacci\u00f3-per-defecte\n</code></pre>"},{"location":"unitats/1-python/teoria/2%20-%20Control%20de%20fluxe/#51-exemple","title":"5.1. Exemple","text":"Python<pre><code>lang = input(\"Quin llenguatge de programaci\u00f3 vols aprendre? \")\nmatch lang:\ncase \"JavaScript\":\nprint(\"Ser\u00e0s programador web.\")\ncase \"Python\":\nprint(\"Ser\u00e0s cient\u00edfic de dades.\")\ncase \"PHP\":\nprint(\"Ser\u00e0s programador de backend.\")\ncase \"Solidity\":\nprint(\"Ser\u00e0s desenvolupador de Blockchain.\")\ncase \"Dart\":\nprint(\"er\u00e0s desenvolupador d'aplicacions m\u00f2bils.\")\ncase _:\nprint(\"L'idioma no importa, el que importa \u00e9s resoldre problemes.\")\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/","title":"Funcions","text":""},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#1-definicio-de-funcions","title":"1. Definici\u00f3 de funcions","text":"Python<pre><code>def nom_funcio(par\u00e0metres):\n\"\"\"docstring\"\"\"\ninstruccions(s)\n</code></pre> <p>Nota: Recordeu l\u00e0mbit de les variables, ja que hi haur\u00e0 variables locals a la funci\u00f3.</p>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#2-arguments","title":"2. Arguments","text":""},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#21-valors-per-defecte","title":"2.1. Valors per defecte","text":"<p>Els arguments de les funcions poden tindre un valor per defecte. En cas de no assignar-li un valor per defecte, necessitem fer la crida passant-li el valor de l'argument. </p> Python<pre><code>def saluda(nom=\"desconegut\", msg=\"Benvingut!\"):\n\"\"\"\n    Funci\u00f3 per saludar a un usuari\n    Entrada:\n        nom=\"desconegut\": String, nom de l'usuari\n        msg=\"Benvingut!\": String, missatge de salutaci\u00f3\n    Si no li proporcionem valors en la crida, \n    utilitzar\u00e0 els valors per defecte\n    \"\"\"\nprint(\"Hola\", nom + '.', msg)\n</code></pre> <p>La crida a la funci\u00f3 la podem fer sense arguments, amb un o amb dos. \u00c9s una forma de fer una sobrec\u00e0rrega de m\u00e8todes de forma molt r\u00e0pida.</p> Python<pre><code>saluda(\"Tom\u00e0s\", \"Qu\u00e8 fas?\")\nsaluda(\"Pau\")\nsaluda()\nsaluda(msg=\"\", nom=\"Artur\")\nsaluda(msg=\"\",\"Artur\")\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#22-nombre-arbitrari-darguments","title":"2.2. Nombre arbitrari d'arguments","text":"<p>Si no sabem a priori quants arguments rebr\u00e0 la funci\u00f3, podem utilitzar el car\u00e0cter \"*\" en la definici\u00f3 de la funci\u00f3.</p> Python<pre><code>def saluda(*noms):\n\"\"\"\n    Funci\u00f3 per saludar a un conjunt d'usuaris\n    Entrada:\n        noms: llistat de noms\n    \"\"\"\nfor nom in noms:\nprint(\"Hola\", nom)\nsaluda(\"Alex\",\"Guillem\",\"Javier\")\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#3-funcions-recursives","title":"3. Funcions recursives","text":"<p>La recursi\u00f3 \u00e9s el proc\u00e9s de definir alguna cosa en termes d'eixa mateixa cosa. Aleshores, una funci\u00f3 recursiva \u00e9s aquella que es crida a s\u00ed mateix. S'ha d'anar molt en compte en crear correctament la condici\u00f3 d'eixida de la funci\u00f3, ja que d'altra forma entrariem en bucle infinit.</p> Python<pre><code>def factorial(x):\n\"\"\"Funci\u00f3 per a calcular el fatorial d'un enter.\n        Entrada:\n            - x: int, el nombre del que volem calcular el factorial\n        Eixida:\n            - x!: int, factorial d'x\n    \"\"\"\nif x == 1:\nreturn 1\nelse:\nreturn (x * factorial(x-1))\nnum = int(input(\"N\u00famero: \"))\nprint(num, \"! =\", factorial(num))\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#4-funcions-anonimes","title":"4. Funcions an\u00f2nimes","text":"<p>Les funcions an\u00f2nimes o funcions lambda, s\u00f3n funcions sense nom. Poden tindre un nombre indeterminat d'arguments, per\u00f2 sols una expressi\u00f3, que ser\u00e0 avaluada i retornat el seu resultat.</p> Python<pre><code>quadrat = lambda x: x ** 2\nprint(quadrat(5))\n</code></pre> <p>Normalment les funcions lambda s'utilitzen en combinaci\u00f3 amb altres funcions com filter(), map(), etc.</p> <p>La funci\u00f3 map() rep com a arguments una funci\u00f3 i una llista, i torna una llista del mateix tamany on cada element \u00e9s el resultat d'aplicar la funci\u00f3 sobre l'element que ocupa la mateixa posici\u00f3 a la llista original.</p> <p>La funci\u00f3 filter(), rep una funci\u00f3 i una llista com a arguments, i torna com a resultat una llista amb els elements que avaluen a True la funci\u00f3.</p> Python<pre><code>llista = [1, 5, 4, 6, 8, 11, 3, 12]\nnova_llista = list(map(lambda x: x ** 2 , llista))\nprint(nova_llista)\n\"\"\"\nEixida:\n[1, 25, 16, 36, 64, 121, 9, 144]\n\"\"\"\n</code></pre>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#41-activitat-10","title":"4.1. Activitat 10","text":"<p>Definix una llista i utilitzant filter, que la separe en dues llistes, una amb els elements parells i l'altra amb els senars.</p>"},{"location":"unitats/1-python/teoria/3%20-%20Funcions/#5-packages","title":"5. Packages","text":"<p>Igual que la informaci\u00f3 al disc dur est\u00e0 organitzada en carpetes i subcarpetes, un programa en Python es pot organitzar en paquets, sub paquets i m\u00f2duls. A\u00e7\u00f2 fa un programa m\u00e9s f\u00e0cil de gestionar i conceptualment m\u00e9s clar. Una carpeta ha de contindre un arxiu anomenat __init__.py. Este arxiu pot estar buit o no, per\u00f2 normalment cont\u00e9 codi d'inicialitzaci\u00f3.</p> <p></p> <p>Per a importar un m\u00f2dul d'un paquet utilitzariem import o from ... import.</p> Python<pre><code>import Game.Level.start\nfrom Game.Level import start\n</code></pre> <p>Construcci\u00f3 de paquets propis</p> <p>Parlarem de com construir paquets propis m\u00e9s endavant al llarg d'este curs.</p>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/","title":"Tractament de fitxers","text":""},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#1-fitxers","title":"1. Fitxers","text":""},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#11-entrada-eixida-utilitzant-fitxers","title":"1.1. Entrada eixida utilitzant fitxers","text":"<p>Per a llegir o escriure en un fitxer, primer l\u2019hem d\u2019obrir. Quan acabem, s\u2019ha de tancar perqu\u00e8 s\u2019alliberen els recursos relacionats amb el fitxer.</p> <p>Per tant, a Python, utilitzem la seg\u00fcent seq\u00fc\u00e8ncia d'operacions per traballar amb fitxers:</p> <ol> <li>Obrir un fitxer</li> <li>Llegir o escriure </li> <li>Tancar el fitxer</li> </ol>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#12-open","title":"1.2. Open","text":"<p>Per obrir un fitxer utilitzem la funci\u00f3 open().</p> Python<pre><code>&gt;&gt;&gt; f = open(\"test.txt\")    # arxiu en el mateix directori\n&gt;&gt;&gt; f = open(\"C:/Python38/README.txt\")  # path sencer\n</code></pre> <p>A m\u00e9s, podem especificar el mode d'apertura i la codificaci\u00f3.</p> Mode Descripci\u00f3 r lectura w escriptura x creaci\u00f3 exclusiva (falla si ja existeix) a afegir al final, el crea si no existeix t mode lectura de text (per defecte) b mode binari + actualitzaci\u00f3 (lectura i escriptura ) Python<pre><code>&gt;&gt;&gt; f = open(\"test.txt\",'w') # obert per a escriptura\n&gt;&gt;&gt; f = open(\"test.txt\", mode='r', encoding='utf-8')\n</code></pre> <p>Warning</p> <p>\u00c9s important que tingau en compte que quan l'int\u00e8rpret de python s'executa, ho fa des del directori del qu\u00e8 s'ha llan\u00e7at(el podeu obtindre mitjan\u00e7ant os.getcwd()), per aix\u00f2 la c\u00e0rrega de fitxers en rutes relatives en funcions tipus open, load, etc potser vos d\u00f3ne un error indicant que no el troba.</p> <p>f = open(\"ruta relativa/arxiu.txt\")</p> <p>S'han d'evitar les rutes absolutes.</p> <p>El que podeu fer per evitar estos errors \u00e9s obtindre la ruta des del fitxer font de la seg\u00fcent forma:    </p>Python<pre><code>ruta_base = os.path.dirname(__file__)\nruta_a_recurs = os.path.join(ruta_base, \"arxiu.txt\")\nf = open(ruta_a_recurs)\n</code></pre>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#13-close","title":"1.3. Close","text":"<p>Python utilitza un garbage collector per netejar objectes sense refer\u00e8ncies, per\u00f2 no hem de confiar per tancar el fitxer.</p> Python<pre><code>try:\nf = open(\"test.txt\", encoding = 'utf-8')\n# operacions sobre l'arxiu\nfinally:\nf.close()\n</code></pre> <p>Altra possibilitat \u00e9s amb with. En este cas no hem de tancar-lo expl\u00edcitament.</p> Python<pre><code>with open(\"test.txt\", encoding = 'utf-8') as f:\n# operacions sobre l'arxiu\n</code></pre>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#14-escriptura","title":"1.4. Escriptura","text":"<p>Per a escriure, necessitem haver-lo obert amb les opcions w, a o x. Compte amb l'opci\u00f3 w, perqu\u00e8 sobreescriu els arxius.</p> Python<pre><code>with open(\"test.txt\",'w',encoding = 'utf-8') as f:\nf.write(\"Primer arxiu\\n\")\nf.write(\"Este arxiu\\n\")\nf.write(\"cont\u00e9 tres l\u00ednies\\n\")\n</code></pre>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#15-lectura","title":"1.5. Lectura","text":"<p>Utilitzarem el m\u00e8tode read() per a llegir. La funci\u00f3 tell() ens diu en quina posici\u00f3 tenim el cursor i amb seek() el podem modificar.</p> Python<pre><code>&gt;&gt;&gt; f = open(\"test.txt\",'r',encoding = 'utf-8')\n&gt;&gt;&gt; f.read(6)\n'Primer'\n&gt;&gt;&gt; f.read(6)\n' arxiu'\n&gt;&gt;&gt; f.read()     # llig fins al final\n'\\nEste arxiu\\ncont\u00e9 tres l\u00ednies\\n'\n&gt;&gt;&gt; f.read()  # posteriors lectures tornen la cadena buida\n''\n</code></pre> Python<pre><code>&gt;&gt;&gt; f.tell()\n45\n&gt;&gt;&gt; f.seek(0)\n0\n&gt;&gt;&gt; print(f.read())\nPrimer arxiu\nEste arxiu\ncont\u00e9 tres l\u00ednies\n</code></pre> <p>Tamb\u00e9 podem utilitzar la funci\u00f3 readline() per a llegir una l\u00ednia, o readlines() per a que ens torne una llista de l\u00ednies llegides.</p>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#151-activitat-11","title":"1.5.1. Activitat 11","text":"<p>Crea una aplicaci\u00f3 que vaja llegint operacions d'un fitxer \"operacions.txt\" que contindr\u00e0 una operaci\u00f3 per l\u00ednia. Per exemple: 4 + 4</p> <p>Haur\u00e0 de guardar els resultats en un altre arxiu \"resultats.txt\". Per exemple: 4 + 4 = 8</p> <p>Utilitza funcions an\u00f2nimes per a implementar les operacions de suma, resta, multiplicaci\u00f3 i divisi\u00f3, que seran les \u00faniques operacions reconegudes per la nostra aplicaci\u00f3.</p>"},{"location":"unitats/1-python/teoria/4%20-%20Fitxers/#2-directoris","title":"2. Directoris","text":"<p>Si hi ha una gran quantitat de fitxers i directoris amb els que tractar, disposem del m\u00f2dul os (operating system), que ens proporciona m\u00e8todes per al seu tractament.</p> <p>Per a veure el directori de treball, utilitzem getcwd().</p> Python<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n</code></pre> <p>Per a canviar de directori, chdir().</p> Python<pre><code>&gt;&gt;&gt; os.chdir('/home/ferran')\n</code></pre> <p>Per a llistar els directoris ens servim de listdir().</p> Python<pre><code>&gt;&gt;&gt; os.listdir('/home')\n</code></pre> <p>Per crear un directori usem mkdir().</p> Python<pre><code>&gt;&gt;&gt; os.mkdir('Nova_carpeta')\n</code></pre> <p>Si volem renombrar un directori.</p> Python<pre><code>&gt;&gt;&gt; os.rename('Nova_carpeta','Vella_carpeta')\n</code></pre> <p>Per a eliminar un arxiu utilitzarem remove(). Si el que volem eliminar \u00e9s una carpeta buida rmdir().</p> Python<pre><code>&gt;&gt;&gt; os.remove('arxiu.txt')\n&gt;&gt;&gt; os.rmdir('Vella_carpeta')\n</code></pre> <p>En el cas que la carpeta no estiga buida, hem d'importar el m\u00f2dul shutil i utilitzar la funci\u00f3 rmtree().</p> Python<pre><code>&gt;&gt;&gt; import shutil\n&gt;&gt;&gt; shutil.rmtree('Carpeta')\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/","title":"Errors i excepcions","text":""},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#1-tipus-derrors","title":"1. Tipus d'errors","text":"<p>Podem cometre errors mentre programem. Estos errors es poden classificar b\u00e0sicament en dos tipus:</p> <ol> <li>Errors de sintaxi</li> <li>Errors en la l\u00f2gica (Excepcions)</li> </ol> <p>Els erros de sintaxi es produixen abans de l'execuci\u00f3, mentre que els erros l\u00f2gics es produixen en temps d'execuci\u00f3.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#2-excepcions","title":"2. Excepcions","text":"<p>Algun exemple d'excepci\u00f3 s\u00f3n els seg\u00fcents:</p> <ul> <li>Quan intentem obrir un fitxer (per llegir) que no existeix (FileNotFoundError)</li> <li>Quan intentem dividir un nombre per zero (ZeroDivisionError)</li> <li>Quan intentem importar un m\u00f2dul que no existeix (ImportError).</li> </ul> <p>Sempre que es produeixen aquests tipus d\u2019errors d\u2019execuci\u00f3, Python crea un objecte d\u2019excepci\u00f3. Si no el tractem, interrumpeix l'execuci\u00f3 i imprimeix una tra\u00e7a de l'error juntament amb alguns detalls sobre per qu\u00e8 ha produ\u00eft aquest error.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#21-excepcions-definides-en-python","title":"2.1. Excepcions definides en Python","text":"<p>Per a consultar totes les excepcions definides podem utilitzar:</p> Python<pre><code>&gt;&gt;&gt; print(dir(locals()['__builtins__']))\n</code></pre> <ul> <li>ArithmeticError</li> <li>AssertionError</li> <li>AttributeError</li> <li>BaseException</li> <li>BlockingIOError</li> <li>BrokenPipeError</li> <li>BufferError</li> <li>ChildProcessError</li> <li>ConnectionAbortedError</li> <li>ConnectionError</li> <li>ConnectionRefusedError</li> <li>ConnectionResetError</li> <li>EOFError</li> <li>EnvironmentError</li> <li>Exception</li> <li>FileExistsError</li> <li>FileNotFoundError</li> <li>FloatingPointError</li> <li>GeneratorExit</li> <li>IOError</li> <li>ImportError</li> <li>IndentationError</li> <li>IndexError</li> <li>InterruptedError</li> <li>IsADirectoryError</li> <li>KeyError</li> <li>LookupError</li> <li>MemoryError</li> <li>ModuleNotFoundError</li> <li>NameError</li> <li>NotADirectoryError</li> <li>NotImplementedError</li> <li>OSError</li> <li>OverflowError</li> <li>PermissionError</li> <li>ProcessLookupError</li> <li>RecursionError</li> <li>ReferenceError</li> <li>RuntimeError</li> <li>StopAsyncIteration</li> <li>SyntaxError</li> <li>SystemError</li> <li>TabError</li> <li>TimeoutError</li> <li>TypeError</li> <li>UnboundLocalError</li> <li>UnicodeDecodeError</li> <li>UnicodeEncodeError</li> <li>UnicodeError</li> <li>UnicodeTranslateError</li> <li>ValueError</li> </ul>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#22-com-funcionen-les-excepcions","title":"2.2. Com funcionen les excepcions","text":"<p>Python llan\u00e7a una d'aquestes excepcions en executar una instrucci\u00f3 que provoca un error. </p> <p>Quan es produeixen aquestes excepcions, l'int\u00e8rpret de Python det\u00e9n l'execuci\u00f3 del proc\u00e9s actual i el passa al proc\u00e9s que ha fet la crida, fins que alg\u00fa la tracte. Si ning\u00fan proc\u00e9s la tracta, el programa es detendr\u00e0.</p> <p>Per exemple, considerem un programa en qu\u00e8 tenim una funci\u00f3 A que crida a la funci\u00f3 B, que al seu torn crida a la funci\u00f3 C. Si es produeix una excepci\u00f3 a la funci\u00f3 C per\u00f2 no es tracta a C, l\u2019excepci\u00f3 passa a B i despr\u00e9s a A.</p> <p>Si no es gestiona mai, es mostrar\u00e0 un missatge d'error i el nostre programa s'aturar\u00e0 de sobte.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#3-capturant-excepcions-en-python","title":"3. Capturant excepcions en Python","text":"<p>A Python, les excepcions es poden gestionar mitjan\u00e7ant una sent\u00e8ncia try.</p> <p>L'operaci\u00f3 cr\u00edtica que pot generar una excepci\u00f3 es col\u00b7loca dins de la cl\u00e0usula try. El codi que gestiona les excepcions s\u2019escriu a la cl\u00e0usula except i s'executar\u00e0 en produ\u00efr-se. Per tant, podem escollir quines operacions es realitzaran una vegada que haguem capturat l'excepci\u00f3. </p> <p>Exemple:</p> Python<pre><code># importem el m\u00f2dul sys per veure el tipus d'excepci\u00f3\nimport sys\nrandomList = ['a', 0, 2]\nfor element in randomList:\ntry:\nprint(\"Element val \", element)\nr = 1/int(element)\nbreak\nexcept:\nprint(\"Oops! Excepci\u00f3 capturada --&gt;\", sys.exc_info()[0])\nprint(\"Seg\u00fcent iteraci\u00f3\")\nprint()\nprint(\"L'invers de \", element, \"\u00e9s\", r)\n</code></pre> <p>Com totes les excepcions hereden de la superclasse Exception, podem reescriure el programa com:</p> Python<pre><code># importem el m\u00f2dul sys per veure el tipus d'excepci\u00f3\nimport sys\nrandomList = ['a', 0, 2]\nfor element in randomList:\ntry:\nprint(\"Element val \", element)\nr = 1/int(element)\nbreak\nexcept Exception as e:\nprint(\"Oops! Excepci\u00f3 capturada --&gt;\", e.__class__)\nprint(\"Seg\u00fcent iteraci\u00f3\")\nprint()\nprint(\"L'invers de \", element, \"\u00e9s\", r)\n</code></pre> <p>A l'exemple anterior, no hem utilitzat cap excepci\u00f3 espec\u00edfica a la cl\u00e0usula except.</p> <p>No \u00e9s una bona pr\u00e0ctica de programaci\u00f3, ja que capturar\u00e0 totes les excepcions i gestionar\u00e0 tots els casos de la mateixa manera. Podem especificar quines excepcions hauria de capturar una cl\u00e0usula except.</p> <p>Una cl\u00e0usula try pot tindre un nombre indeterminat de cl\u00e0usules except per gestionar diferents excepcions, per\u00f2, nom\u00e9s s'executar\u00e0 una en cas que es produeixi una excepci\u00f3.</p> <p>Podem utilitzar una tupla de valors per especificar diverses excepcions en una cl\u00e0usula except.</p> <p>Exemple:</p> Python<pre><code>try:\n# fer alguna cosa\npass\nexcept ValueError:\n# manegem ValueError\npass\nexcept (TypeError, ZeroDivisionError):\n# manegem m\u00faltiples excepcions\n# TypeError i ZeroDivisionError\npass\nexcept:\n# manegem totes les altres excepcions\npass\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#31-try-except-finally","title":"3.1. Try ... except ... finally","text":"<p>La sent\u00e8ncia try de Python pot tindre una cl\u00e0usula final opcional. Aquesta cl\u00e0usula s\u2019executa independentment de si es produix una excepci\u00f3 o no i s\u2019utilitza generalment per alliberar recursos.</p> <p>Per exemple, podem estar connectats a un centre de dades remot a trav\u00e9s de la xarxa o treballar amb un fitxer o una interf\u00edcie gr\u00e0fica d'usuari (GUI). En totes aquestes circumst\u00e0ncies, hem de netejar recursos abans que el programa ature la seua execuci\u00f3, tant si ho fa de forma controlada com si es para bruscament. Aquestes accions (tancar un fitxer, GUI o desconnectar de la xarxa) es realitzen normalment a la cl\u00e0usula final.</p> <p>Exemple:</p> Python<pre><code>try:\nf = open(\"test.txt\",encoding = 'utf-8')\n# operacions amb el fitxer\nfinally:\nf.close()\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#4-llancant-excepcions-en-python","title":"4. Llan\u00e7ant excepcions en Python","text":"<p>Les excepcions es generen normalment quan es produeixen errors en temps d'execuci\u00f3, per\u00f2 tamb\u00e9 podem generar/llan\u00e7ar excepcions manualment mitjan\u00e7ant la paraula reservada raise. Opcionalment, podem passar arguments a l\u2019excepci\u00f3 per aclarir per qu\u00e8 s\u2019ha generat aquesta excepci\u00f3.</p> Python<pre><code>import sys\ntry:\nnombre = int(input(\"Dona'm un n\u00famero positiu: \"))\nif nombre &lt;= 0:\nraise ValueError(str(nombre) + \" no \u00e9s un n\u00famero positiu!\")\n1/0\nexcept ValueError as ve:\nprint(\"Excepci\u00f3 capturada:\", ve)\nexcept:\nprint(\"Unexpected error:\", sys.exc_info()[0])\nraise\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#41-assert","title":"4.1. Assert","text":"<p>Amb la paraula reservada assert llancem una excepci\u00f3 sempre i quan l'expressi\u00f3 que la segueix s'avalua a Fals. Si s'avalua a True, es continua l'execuci\u00f3 del programa de forma seq\u00fcencial.</p> Python<pre><code>try:\nnum = int(input(\"Introdueix un nombre positiu: \"))\nassert num &gt; 0\nexcept AssertionError:\nprint(\"AssertionError: No \u00e9s positiu!\")\nexcept ValueError:\nprint (\"ValueError: No has introd\u00eft un n\u00famero!\")\nelse:\nprint(\"\u00c9s positiu\")\n</code></pre>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#5-excepcions-definides-per-lusuari","title":"5. Excepcions definides per l'usuari","text":"<p>De vegades necessitem definir excepcions que no estan disponibles a Python quan es d\u00f3na alguna condici\u00f3. En este cas, hem de crear les nostres propies excepcions. Per a fer-ho, hem de definir noves classes que hereden de Exception, ja siga directa o indirectament. Esta nova excepci\u00f3 que hem creat tamb\u00e9 podr\u00e0 ser llan\u00e7ada amb raise. </p> Python<pre><code>&gt;&gt;&gt;class CustomError(Exception):\n...    pass\n&gt;&gt;&gt; raise CustomError\nTraceback (most recent call last):\n...\n__main__.CustomError\n&gt;&gt;&gt; raise CustomError(\"S'ha produ\u00eft un error\")\nTraceback (most recent call last):\n...\n__main__.CustomError: S'ha produ\u00eft un error\n</code></pre> <p>Quan estem desenvolupant un programa gran, \u00e9s una bona pr\u00e0ctica col\u00b7locar totes les excepcions definides per l'usuari que el nostre programa definix en un fitxer separat exceptions.py o errors.py.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#501-activitat-12","title":"5.0.1. Activitat 12","text":"<p>Anem a implementar un xicotet joc per consola. El programa generar\u00e0 un n\u00famero aleatori entre 0 i 100 (utilitzeu randint() del m\u00f2dul random) i demanar\u00e0 a l'usuari que introdu\u00efsca un n\u00famero.</p> <p>Mentre el n\u00famero siga massa menut, llan\u00e7ar\u00e0 una excepci\u00f3 ErrorEnterMassaMenut indicant-li-ho. Si per contra \u00e9s massa gran llan\u00e7ar\u00e0 ErrorEnterMassaGran.</p> <p>Si s'introdueix un valor no num\u00e8ric, es llan\u00e7ar\u00e0 una excepci\u00f3 de tipus ErrorNoEsEnter.</p> <p>El joc acabar\u00e0 quan s'introdu\u00efsca l'enter buscat, felicitant a l'usuari.</p>"},{"location":"unitats/1-python/teoria/5%20-%20Excepcions/#502-activitat-13","title":"5.0.2. Activitat 13","text":"<p>Modifica el codi de l'activitat 11 per a que no es produ\u00efsquen errors en l'execuci\u00f3, ja siga per introd\u00efur valor no definits per a les funcions, valors que no s\u00f3n num\u00e8rics o operacions desconegudes. Controla tamb\u00e9 que no es produ\u00efsquen errors en la lectura/escriptura dels arxius.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/","title":"Programaci\u00f3 oorientada a objectes","text":""},{"location":"unitats/1-python/teoria/6%20-%20POO/#1-poo-amb-python","title":"1. POO amb Python","text":"<p>\u00c9s un dels paradigmes m\u00e9s populars per resoldre problemes a trav\u00e9s de la programaci\u00f3. </p> <p>Un objecte t\u00e9 dues caracter\u00edstiques:</p> <ul> <li>atributs (estat)</li> <li>funcions (comportament)</li> </ul> <p>Per exemple:</p> <p>Una persona pot ser un objecte, ja que t\u00e9 les propietats seg\u00fcents:</p> <ul> <li>nom, edat com a atributs</li> <li>cantar, ballar com a comportament</li> </ul> <p>El concepte de POO a Python se centra en la reutilitzaci\u00f3 de codi. Aquest concepte tamb\u00e9 es coneix com DRY (Don't Repeat Yourself).</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#2-classes","title":"2. Classes","text":"<p>Una classe \u00e9s una definici\u00f3 d'un objecte abstracte, que representa algun ent de la realitat al nostre programa. Cont\u00e9 tots els detalls comuns sobre tots els objectes del mateix tipus. </p> <p>L'exemple de classe de lloro pot ser:</p> Python<pre><code>class Parrot():\npass\n</code></pre> <p>Ac\u00ed fem servir la paraula clau class per definir una classe Loro buida. </p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#3-objectes","title":"3. Objectes","text":"<p>Quan es defineix la classe, nom\u00e9s es defineix la descripci\u00f3 de l'objecte. Per tant, no s\u2019assignen recursos per a la seua execuci\u00f3, ni s'assignen valors als seus atributs. Quan este fet es produeix, aleshores tenim un objecte en mem\u00f2ria sobre el que podem actuar.</p> <p>L'exemple d'objecte de classe lloro pot ser:</p> Python<pre><code>obj = Parrot()\n</code></pre> <p>Aqu\u00ed, obj \u00e9s un objecte de la classe Loro.</p> <p>Suposem que tenim detalls de lloros. Ara, podem construir la classe i crear un objecte per a cada lloro.</p> Python<pre><code>class Parrot:\n# class attribute\nspecies = \"bird\"\n# instance attribute\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n# instantiate the Parrot class\nblu = Parrot(\"Blu\", 10)\nwoo = Parrot(\"Woo\", 15)\n# access the class attributes\nprint(\"Blu is a {}\".format(blu.__class__.species))\nprint(\"Woo is also a {}\".format(woo.__class__.species))\n# access the instance attributes\nprint(\"{} is {} years old\".format( blu.name, blu.age))\nprint(\"{} is {} years old\".format( woo.name, woo.age))\n---\nEixida\nBlu is a bird\nWoo is also a bird\nBlu is 10 years old\nWoo is 15 years old\n</code></pre> <p>Al programa anterior, hem creat una classe Parrot. A continuaci\u00f3, hem definit uns atributs, que prendran valors diferents en la instanciaci\u00f3 d'objectes diferents.</p> <p>Aquests atributs es defineixen dins del m\u00e8tode init de la classe, que \u00e9s el m\u00e8tode inicialitzador que s\u2019executar\u00e0 nom\u00e9s creem objectes.</p> <p>Despr\u00e9s, creem inst\u00e0ncies de la classe Parrot. blu i woo s\u00f3n refer\u00e8ncies (valor) als nostres objectes nous.</p> <p>Podem accedir als atributs de classe mitjan\u00e7ant <code>__class__.species</code>. Els atributs de classe s\u00f3n els mateixos per a totes les inst\u00e0ncies d\u2019una classe. De la mateixa manera, accedim als atributs de la inst\u00e0ncia mitjan\u00e7ant <code>objecte.nom_atribut</code>. Els atributs d\u2019inst\u00e0ncia (valors) s\u00f3n diferents per a cada inst\u00e0ncia d\u2019una classe.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#4-metodes","title":"4. M\u00e8todes","text":"<p>S\u00f3n funcions definides dins el cos d'una classe. S'utilitzen per a definir el comportament de l'objecte.</p> Python<pre><code>class Parrot:\n# instance attributes\ndef __init__(self, name, age):\nself.name = name\nself.age = age\n# instance method\ndef sing(self, song):\nreturn \"{} sings {}\".format(self.name, song)\ndef dance(self):\nreturn \"{} is now dancing\".format(self.name)\n# instantiate the object\nblu = Parrot(\"Blu\", 10)\n# call our instance methods\nprint(blu.sing(\"'Happy'\"))\nprint(blu.dance())\n---\nBlu sings 'Happy'\nBlu is now dancing\n</code></pre> <p>Hem definit dos m\u00e8todes sing() i dance(), que s\u00f3n m\u00e8todes d'inst\u00e0ncia, ja que es criden sobre un objecte.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#5-herencia","title":"5. Her\u00e8ncia","text":"<p>L'her\u00e8ncia \u00e9s una forma de reutilitzar codi sense tindre-lo que reescriure. A\u00e7\u00f2 facilita el manteniment de les aplicacions. </p> <p>Les noves classes s'anomenen classes derivades (o classe filla). La classes de les que deriven s\u00f3n les classes base (o classe pare).</p> Python<pre><code># parent class\nclass Bird:\ndef __init__(self):\nprint(\"Bird is ready\")\ndef who_is_this(self):\nprint(\"Bird\")\ndef swim(self):\nprint(\"Swim faster\")\n# child class\nclass Penguin(Bird):\ndef __init__(self):\n# call super() function\nsuper().__init__()\nprint(\"Penguin is ready\")\ndef who_is_this(self):\nprint(\"Penguin\")\ndef run(self):\nprint(\"Run faster\")\npeggy = Penguin()\npeggy.whoisThis()\npeggy.swim()\npeggy.run()\n---\nBird is ready\nPenguin is ready\nPenguin\nSwim faster\nRun faster\n</code></pre> <p>En l'anterior programa, la classe Penguin hereda de la classe Bird. La classe derivada hereda el m\u00e8tode swim(), modifica el m\u00e8tode who_is_this() i ext\u00e9n amb un nou m\u00e8tode run().</p> <p>Utilitzem <code>super().__init__()</code> dins de l'<code>__init()__</code> per a inicialitzar la classe pare. </p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#6-encapsulament","title":"6. Encapsulament","text":"<p>Podem restringir l\u2019acc\u00e9s a m\u00e8todes i variables, \u00e9s a dir, definir-los com a privats. Aix\u00f2 impedeix que les dades es modifiquen directament accedint als atributs, \u00e9s el que anomenem encapsulament. Definim atributs o m\u00e8todes privats utilitzant el gui\u00f3 baix com a prefix, \u00e9s a dir, simple _ o doble __.</p> Python<pre><code>class Computer:\ndef __init__(self):\nself.__maxprice = 900\ndef sell(self):\nprint(\"Selling Price: {}\".format(self.__maxprice))\ndef setMaxPrice(self, price):\nself.__maxprice = price\nc = Computer()\nc.sell()\n# change the price\nc.__maxprice = 1000 #Fixeu-vos que no provoca un error d'execuci\u00f3\nc.sell()\n# using setter function\nc.setMaxPrice(1000)\nc.sell()\n</code></pre> Text Only<pre><code>Eixida\nSelling Price: 900\nSelling Price: 900\nSelling Price: 1000\n</code></pre> <p>Com vegem, per canviar el valor, hem d\u2019utilitzar una funci\u00f3 modificadora setter, \u00e9s a dir, setMaxPrice (), que pren el preu com a par\u00e0metre.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#7-polimorfisme","title":"7. Polimorfisme","text":"<p>El polimorfisme \u00e9s la capacitat d\u2019utilitzar una interf\u00edcie comuna (crides amb els mateixos noms) en diferents classes derivades.</p> <p>Suposem que hem de pintar una forma i que hi ha diverses opcions: rectangle, quadrat, cercle, ... Podr\u00edem utilitzar el mateix m\u00e8tode per a pintar qualsevol forma. Aquest concepte s\u2019anomena polimorfisme.</p> Python<pre><code>class Parrot:\ndef fly(self):\nprint(\"Parrot can fly\")\ndef swim(self):\nprint(\"Parrot can't swim\")\nclass Penguin:\ndef fly(self):\nprint(\"Penguin can't fly\")\ndef swim(self):\nprint(\"Penguin can swim\")\n# common interface\ndef flying_test(bird):\nbird.fly()\n#instantiate objects\nblu = Parrot()\npeggy = Penguin()\n# passing the object\nflying_test(blu)\nflying_test(peggy)\n</code></pre> Text Only<pre><code>Parrot can fly\nPenguin can't fly\n</code></pre> <p>Al programa anterior, hem definit dues classes Parrot i Penguin. Cadascun d'elles t\u00e9 un m\u00e8tode com\u00fa fly(). No obstant aix\u00f2, les seues funcions s\u00f3n diferents.</p> <p>Per utilitzar el polimorfisme, hem creat una interf\u00edcie comuna, \u00e9s a dir, la funci\u00f3 flying_test() que pren com a par\u00e0metre qualsevol objecte i crida al m\u00e8tode fly() de l\u2019objecte. Aix\u00ed, quan passem els objectes blu i peggy a la funci\u00f3 flying_test(), s'executa el m\u00e8tode corresponent a cadascuna.</p>"},{"location":"unitats/1-python/teoria/6%20-%20POO/#71-activitat-14","title":"7.1. Activitat 14","text":"<p>Defineix una jerarquia de figures amb les classes Figura, Cercle, Triangle, Rectangle i Quadrat.</p> <ul> <li> <p>La clase Figura tindr\u00e1 dos m\u00e9todes abstractes area i perimetre, que implementar\u00e1n la resta de classes. La classe figura ser\u00e0 el que s'anomena una interf\u00edcie informal, ja que tots els seus m\u00e8todes s\u00f3n abstractes. Per a definir que s\u00f3n abstractes, simplement utilitzeu la instrucci\u00f3 pass al bloc de la funci\u00f3.</p> Python<pre><code>def area() -&gt; int:\n\"\"\"Torna l'\u00e0rea d'una Figura\"\"\"\npass\n</code></pre> </li> <li> <p>El Cercle rebr\u00e1 el radi com a argument al seu constructor, el Triangle el costat i el Rectangle la base i l'altura.</p> </li> <li>Cercle, Triangle i Rectangle heredar\u00e1n de Figura directament.</li> <li>Quadrat heredar\u00e1 de Rectangle, per\u00f2 al constructor sols rebr\u00e1 un argument, el costat.</li> <li> <p>Crea un objecte de cada tipus i imprimeix les seues caracter\u00edstiques.</p> <p>Info</p> <p>En realitat la classe Figura es pot implementar com a una classe interf\u00edcie, on tots els seus m\u00e8todes siguen abstractes. En Python existeixen dos tipus d'interf\u00edcies, formals i informals.</p> <p>Per altra banda, podem declarar els atributs de les classes com a atributs privats i utilitzar els decoradors @property i @atribut.setter per a indicar els m\u00e8todes getters i setters, que seran p\u00fablics. Fer-ho d'esta forma t\u00e9 alguns avantatges que veurem m\u00e9s endavant.</p> </li> </ul>"},{"location":"unitats/2-intro-interficies/enlla%C3%A7os/enlla%C3%A7os/","title":"Enlla\u00e7os","text":""},{"location":"unitats/2-intro-interficies/enlla%C3%A7os/enlla%C3%A7os/#unitat-2-introduccio-a-les-interficies-grafiques","title":"Unitat 2. Introducci\u00f3 a les interf\u00edcies gr\u00e0fiques","text":"<ol> <li>10 heur\u00edstiques d'usabilitat per al diseny d'interf\u00edcies d'usuari</li> <li>Guia per a elaborar GUIs en Windows</li> <li>Guia per a elaborar GUIs en Apple</li> <li>Guia per a elaborar GUIs en GNOME</li> <li>Guia per a elaborar GUIs en KDE</li> <li>Coolors: generador de paleta de colors</li> <li>diagrams.net, ferramenta per a crear diagrames. Ens val per a disenyar prototips.</li> <li>Figma, plataforma per construir prototips. Molt utilitzada en el m\u00f3n real</li> </ol>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/","title":"Activitats","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#1-interficies-dusuari","title":"1. Interf\u00edcies d'usuari","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-1","title":"Activitat 1","text":"<p>T'han encarregat que faces el disseny de la interf\u00edcie d'usuari per a l'aplicaci\u00f3 d'una empresa de lloguer de cotxes amb oficina a l'aeroport. L'aplicaci\u00f3 ser\u00e0 utilitzada pels empleats de l'oficina situada a la terminal d'arribades de l'aeroport, que atenen directament els viatgers que volen llogar un cotxe de manera presencial. \u00c9s habitual que a l'oficina hi haja alumnes de pr\u00e0ctiques de Formaci\u00f3 Professional realitzant les FCTs.</p> <p>La primera decisi\u00f3 que has de prendre \u00e9s el tipus d'interf\u00edcie que plantejar\u00e0s en el teu disseny: CLI, GUI o NUI. Justifica la resposta.</p>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#2-usabilitat","title":"2. Usabilitat","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-2","title":"Activitat 2","text":"<p>No tots els components de la usabilitat vistos en aquest apartat (aprenentatge, record, efic\u00e0cia, errors i satisfacci\u00f3) tenen la mateixa import\u00e0ncia a totes les aplicacions. Segurament, els components de la usabilitat amb m\u00e9s pes en un joc no seran els mateixos que els d'una aplicaci\u00f3 de retoc fotogr\u00e0fic.</p> <p>En aquest cas pr\u00e0ctic haur\u00e0s d'ordenar de m\u00e9s a menys import\u00e0ncia els cinc components de la usabilitat en una aplicaci\u00f3 d'\u00e0mbit empresarial (per exemple, un programari de gesti\u00f3 de la comptabilitat).</p>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#3-pautes-de-disseny","title":"3. Pautes de disseny","text":""},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-3","title":"Activitat 3","text":"<p>Durant el disseny d'una aplicaci\u00f3 per a la compra de peces de roba es planteja la q\u00fcesti\u00f3 de quin tipus de controls utilitzar per als camps seg\u00fcents:</p> <ul> <li>Quantitat de peces (el m\u00e0xim \u00e9s de 10).</li> <li>Talla (les possibles opcions s\u00f3n S, M i L).</li> <li>Si l'usuari vol que s'embolique la pe\u00e7a per a regal.</li> <li>En cas que siga per a regal, el missatge que es posar\u00e0 a la targeta.</li> </ul> <p>Quin tipus de control dels comentats en la teoria seria m\u00e9s adequat per a cada cas?</p>"},{"location":"unitats/2-intro-interficies/tasques/1%20-%20Activitats/#activitat-4-formulari","title":"Activitat 4 - Formulari","text":"<p>Redissenya el seg\u00fcent formulari de manera que siga m\u00e9s usable per als usuaris. Indica quins controls utilitzaries en cada cas.  </p> <p></p>"},{"location":"unitats/2-intro-interficies/tasques/2%20-%20Pr%C3%A0ctiques/","title":"Pr\u00e0ctiques","text":""},{"location":"unitats/2-intro-interficies/tasques/2%20-%20Pr%C3%A0ctiques/#practica-1-disseny-dun-prototip-de-baixa-fidelitat","title":"Pr\u00e0ctica 1 - Disseny d'un prototip de baixa fidelitat","text":"<p>Com hem vist al llarg de la unitat, el disseny de la interf\u00edcie d'usuari d'una aplicaci\u00f3 comporta tenir en compte m\u00faltiples aspectes, sempre amb l'usuari com a referent. A m\u00e9s, \u00e9s un proc\u00e9s iteratiu, en qu\u00e8 el disseny inicial (molt allunyat de la soluci\u00f3 final) evolucionar\u00e0 fins a la versi\u00f3 final (sobre la qual es basar\u00e0 la construcci\u00f3 de l'aplicaci\u00f3).</p> <p>Les propostes de disseny que es van elaborant i que s'avaluen amb els usuaris s'anomenen prototips. Segons es va avan\u00e7ant en el proc\u00e9s de disseny, els prototips van guanyant en fidelitat, \u00e9s a dir, es van semblant cada cop m\u00e9s a la soluci\u00f3 final. Segons el grau de fidelitat es pot distingir entre els tipus de prototips seg\u00fcents:</p> <ul> <li>Prototip de molt baixa fidelitat (en angl\u00e9s, sketch): s\u00f3n els primers esbossos que es fan en iniciar el disseny, i representen les idees generals del projecte. Moltes vegades s'elaboren en paper.</li> <li>Prototip de baixa fidelitat (en angl\u00e9s, wireframe): aquest tipus de prototips se centra en l'estructura i l'organitzaci\u00f3 dels continguts del disseny. No incorpora aspectes visuals com ara colors, fonts o imatges, per centrar-se en la funcionalitat i no en la part est\u00e8tica.</li> <li>Prototip de mitja fidelitat (en angl\u00e9s, mockup): en aquest prototip s'incorporen aspectes visuals al prototip de baixa fidelitat obtingut, obtenint un prototip molt proper visualment al producte final, per\u00f2 sense funcionalitat.</li> <li>Prototip d'alta fidelitat (en angl\u00e9s, prototype): es realitza en les darreres etapes del disseny, i ja s'hi incorporen algunes funcionalitats, com ara la navegaci\u00f3 entre les parts de l'aplicaci\u00f3. </li> </ul> <p>Important</p> <p>Encara que \u00e9s important fer avaluacions dels prototips amb els usuaris des de les primeres versions, els tests d'usabilitat i les avaluacions de les heur\u00edstiques solen intensificar-se i formalitzar-se amb els prototips d'alta fidelitat.</p> <p>En aquesta pr\u00e0ctica haur\u00e0s de dissenyar un prototip de baixa fidelitat per a una cadena de restaurants de menjar r\u00e0pid, utilitzant l'eina online diagrams.net.</p> <p>La descripci\u00f3 de la funcionalitat que ens ha donat el nostre client \u00e9s la seg\u00fcent:</p> <p>\u201cVolem una aplicaci\u00f3 perqu\u00e8 els nostres clients puguen fer la comanda de manera aut\u00f2noma utilitzant una pantalla t\u00e0ctil situada a l'entrada del restaurant. El client ha de poder afegir a la seua comanda tots els productes que desitge, i els trobareu organitzats per categories (entrants, plats principals, begudes i postres). Quan finalitze la comanda podr\u00e0 decidir si vol pagar amb targeta de cr\u00e8dit al mateix terminal o en efectiu en recollir-lo al taulell. Tamb\u00e9 podran triar entre prendre la seua comanda al restaurant o endur-se'l a casa\u201d </p> <p>Prototip de baixa fidelitat</p> <p>Recorda que un prototip de baixa fidelitat no inclou aspectes est\u00e8tics com ara colors o imatges, i intenta aplicar tot all\u00f2 que hem apr\u00e9s a la unitat a l'hora de plantejar la teua proposta. </p>"},{"location":"unitats/2-intro-interficies/tasques/2%20-%20Pr%C3%A0ctiques/#practica-2-disseny-dun-prototip-dalta-fidelitat","title":"Pr\u00e0ctica 2 - Disseny d'un prototip d'alta fidelitat","text":"<p>Converteix el prototip de baixa fidelitat de la pr\u00e0ctica anterior en un prototip d'alta fidelitat. Esta vegada utilitza l'eina Figma, molt utilitzada per al disseny de prototips d'aplicacions m\u00f2bils i webs. </p> <p>Haur\u00e0s de dissenyar els diferents Frames i configurar la navegaci\u00f3 entre ells (al fer clic sobre els botons que et porte a la finestra corresponent).</p> <p>Minitutorial de Figma</p> <p>Figma \u00e9s una aplicaci\u00f3 molt intuitiva, per\u00f2 si necessites una xicoteta espenta per comen\u00e7ar, pot visualitzar el seg\u00fcent minitutorial:</p> <p></p>"},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/","title":"Activitats solucionades","text":""},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/#1-interficies-dusuari","title":"1. Interf\u00edcies d'usuari","text":""},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/#activitat-1","title":"Activitat 1","text":"<p>T'han encarregat que faces el disseny de la interf\u00edcie d'usuari per a l'aplicaci\u00f3 d'una empresa de lloguer de cotxes amb oficina a l'aeroport. L'aplicaci\u00f3 ser\u00e0 utilitzada pels empleats de l'oficina situada a la terminal d'arribades de l'aeroport, que atenen directament els viatgers que volen llogar un cotxe de manera presencial. \u00c9s habitual que a l'oficina hi haja alumnes de pr\u00e0ctiques de Formaci\u00f3 Professional realitzant les FCTs.</p> <p>La primera decisi\u00f3 que has de prendre \u00e9s el tipus d'interf\u00edcie que plantejar\u00e0s en el teu disseny: CLI, GUI o NUI. Justifica la resposta.</p> <p>Resposta</p> <p>Com hem comentat a la teoria, les interf\u00edcies tipus GUI s\u00f3n les m\u00e9s habituals en l'\u00e0mbit empresarial i segurament seria la millor opci\u00f3. A m\u00e9s, als usuaris amb poca experi\u00e8ncia (com els estudiants en pr\u00e0ctiques) este tipus d'interf\u00edcies els facilitar\u00e0 el seu aprenentatge. No obstrant, es podria combinar amb una interf\u00edcie tipus CLI que permeta als usuaris experimentats un \u00fas m\u00e9s eficient del sistema. </p>"},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/#2-usabilitat","title":"2. Usabilitat","text":""},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/#activitat-2","title":"Activitat 2","text":"<p>No tots els components de la usabilitat vistos en aquest apartat (aprenentatge, record, efic\u00e0cia, errors i satisfacci\u00f3) tenen la mateixa import\u00e0ncia a totes les aplicacions. Segurament, els components de la usabilitat amb m\u00e9s pes en un joc no seran els mateixos que els d'una aplicaci\u00f3 de retoc fotogr\u00e0fic.</p> <p>En aquest cas pr\u00e0ctic haur\u00e0s d'ordenar de m\u00e9s a menys import\u00e0ncia els cinc components de la usabilitat en una aplicaci\u00f3 d'\u00e0mbit empresarial (per exemple, un programari de gesti\u00f3 de la comptabilitat).</p> <p>Resposta</p> <ol> <li>Efic\u00e0cia: \u00e9s la m\u00e9s important per a l'empresa.</li> <li>Recuerd: una vegada apresa no haurien de fer un esfor\u00e7 per memoritzar com fer algunes tasques </li> <li>Gesti\u00f3 dels errors: ja que pot tindre una repercussi\u00f3 important en la efici\u00e8ncia de l'usuari.</li> <li>Satisfacci\u00f3: no \u00e9s tan important ja que l'\u00e0mbit \u00e9s laboral, no l'oci.</li> <li>L'aprenentatge:ja que es pressuposa que s'han de formar en el seu \u00fas.</li> </ol>"},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/#3-pautes-de-disseny","title":"3. Pautes de disseny","text":""},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/#activitat-3","title":"Activitat 3","text":"<p>Durant el disseny d'una aplicaci\u00f3 per a la compra de peces de roba es planteja la q\u00fcesti\u00f3 de quin tipus de controls utilitzar per als camps seg\u00fcents:</p> <ul> <li>Quantitat de peces (el m\u00e0xim \u00e9s de 10).</li> <li>Talla (les possibles opcions s\u00f3n S, M i L).</li> <li>Si l'usuari vol que s'embolique la pe\u00e7a per a regal.</li> <li>En cas que siga per a regal, el missatge que es posar\u00e0 a la targeta.</li> </ul> <p>Quin tipus de control dels comentats en la teoria seria m\u00e9s adequat per a cada cas?</p> <p>Resposta</p> <ul> <li> <p>Quantitat: com que el m\u00e0xim est\u00e0 limitat a 10, podr\u00edem utilitzar una llista desplegable amb les diferents opcions (els n\u00fameros del 0 al 10). Aix\u00ed, evitem un possible error de lusuari en introduir el valor.</p> </li> <li> <p>Talla: com que es tracta \u00fanicament de tres opcions, ia m\u00e9s l'usuari ha de triar una opci\u00f3 i nom\u00e9s una, els botons de r\u00e0dio serien adequats en aquest cas.</p> </li> <li> <p>Regal?: en aquest cas una casella de verificaci\u00f3 \u00e9s la millor opci\u00f3.</p> </li> <li> <p>Missatge de la targeta: una entrada de text seria recomanable per a aquest camp.</p> </li> </ul>"},{"location":"unitats/2-intro-interficies/tasques/activitats-solucionades/#activitat-4-formulari","title":"Activitat 4 - Formulari","text":"<p>Redissenya el seg\u00fcent formulari de manera que siga m\u00e9s usable per als usuaris. Indica quins controls utilitzaries en cada cas.  </p> <p></p> <p>Resposta</p> <p></p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/","title":"1 - Introducci\u00f3 a les interf\u00edcies d'usuari","text":""},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#1-interficies-dusuari","title":"1. Interf\u00edcies d'usuari","text":"<p>La interf\u00edcie d'usuari d'un sistema est\u00e0 definida per la manera com els usuaris interactuen amb els components del sistema. Quan parlem de sistemes inform\u00e0tics, podem distingir dos tipus d'interf\u00edcies d'usuari:</p> <ul> <li>Interf\u00edcies de maquinari: els components f\u00edsics que permeten a l'usuari introduir ordres i dades al sistema, i obtenir els resultats (com ara el teclat, el ratol\u00ed o el monitor).</li> <li>Interf\u00edcies programari: les aplicacions utilitzades pels usuaris per dur a terme una tasca concreta.</li> </ul> <p>HCI</p> <p>La Interacci\u00f3 Persona-Ordinador (en angl\u00e9s Human-Computer Interaction o HCI) \u00e9s la disciplina cient\u00edfica que s'encarrega de l'estudi de les interf\u00edcies entre els humans i els ordinadors en l'\u00fas de sistemes interactius.</p> <p>Al m\u00f2dul de Desenvolupament d'Interf\u00edcies abordarem diferents q\u00fcestions relacionades amb la construcci\u00f3 d'interf\u00edcies de programari, aix\u00ed com alguns aspectes relacionats amb la implantaci\u00f3 de les aplicacions. </p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#11-disseny-centrat-en-lusuari","title":"1.1. Disseny centrat en l'usuari","text":"<p>El disseny d'interf\u00edcies d'usuari actualment es regeix per l'anomenat disseny centrat en l'usuari, una filosofia de disseny on el focus se centra en les caracter\u00edstiques i necessitats de les persones a qui va dirigit un producte o servei. Aquest corrent sorgeix en contraposici\u00f3 a altres com el disseny centrat en el producte, en qu\u00e8 tot el proc\u00e9s gira al voltant del producte que es desenvolupa, i s\u00f3n els usuaris els que s'hi han d'adaptar. </p> <p>Disseny centrat en l'usuari</p> <p>L'enginyer americ\u00e0 Donald Norman va popularitzar el concepte de disseny centrat en l'usuari als anys 80 i 90. L'any 1999 es va crear la norma ISO 13407, que estandarditza el proc\u00e9s de disseny centrat en l'usuari per a sistemes interactius. L'any 2010, es va revisar i actualitzar com a ISO 9241-210.</p> <p>El proc\u00e9s que s'associa al disseny centrat en l'usuari es resumeix en l'esquema seg\u00fcent:</p> <p></p> <ul> <li>An\u00e0lisi del context d'\u00fas: s'investiguen totes les caracter\u00edstiques del context d\u00fas del producte o servei, que inclou tant la tasca a realitzar com les particularitats dels usuaris i de l'entorn d'\u00fas.</li> <li>Detallar els requisits: tenint en compte l'an\u00e0lisi realitzat al pas anterior, s'especifiquen els requisits que el producte o servei ha de complir. </li> <li>Dissenyar solucions: a continuaci\u00f3, es comen\u00e7ar\u00e0 amb el disseny de possibles solucions (prototips) que complisquen els requisits detallats. S'evolucionar\u00e0 des d'un disseny inicial aproximat fins a un disseny complet i detallat. </li> <li>Avaluar amb els usuaris: l'avaluaci\u00f3 de les solucions pels usuaris \u00e9s un punt de vital import\u00e0ncia en el disseny centrat en l'usuari i s'ha de fer des de les primeres versions de la soluci\u00f3. Com a resultat de l'avaluaci\u00f3, \u00e9s probable que s'haja de tornar a una etapa anterior del proc\u00e9s.</li> </ul> <p>Important</p> <p>Tot i que l'aplicaci\u00f3 del disseny centrat en l'usuari consumeix recursos i comporta un esfor\u00e7 extra en el desenvolupament d'un projecte, contribueix a assegurar l'\u00e8xit final i, per tant, s'ha de prendre sempre com a guia.</p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#12-evolucio-de-les-interficies-dusuari","title":"1.2. Evoluci\u00f3 de les interf\u00edcies d'usuari","text":"<p>Tenint en compte l'evoluci\u00f3 en el temps de les interf\u00edcies programari d'usuari, podem distingir tres grans tipus d'interf\u00edcies: CLI, GUI i NUI.</p> <p></p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#121-interficies-tipus-cli","title":"1.2.1. Interf\u00edcies tipus CLI","text":"<p>Les interf\u00edcies tipus CLI (de l'angl\u00e9s, Command Line Interface) o interf\u00edcies de l\u00ednia d'ordres s\u00f3n les primeres que van sorgir, amb l'objectiu que l'usuari d'un ordinador pogu\u00e9s interactuar amb el sistema operatiu. Aquest tipus d'interf\u00edcies es basa en la introducci\u00f3 d'ordres mitjan\u00e7ant l\u00ednies de text, i implica que l'usuari conega les regles sint\u00e0ctiques per construir aquestes ordres.</p> <p>Actualment es continuen utilitzant interf\u00edcies tipus CLI en diferents \u00e0mbits. I no nom\u00e9s per interactuar amb els sistemes operatius, sin\u00f3 que multitud d'entorns i aplicacions ofereixen la possibilitat a l'usuari d'interactuar mitjan\u00e7ant ordres de text. L'efici\u00e8ncia que s'aconsegueix amb aquest tipus d'interf\u00edcies, a m\u00e9s de les possibilitats d'automatitzaci\u00f3, s\u00f3n algunes de les raons perqu\u00e8 seguisquen tenint vig\u00e8ncia.</p> <p>git</p> <p>Un exemple clar d\u00fas actual d'interf\u00edcies de tipus CLI \u00e9s el gestor de versions git, utilitzat en multitud de projectes de desenvolupament de programari. Tot i que hi ha diferents interf\u00edcies gr\u00e0fiques per a git, el m\u00e9s habitual \u00e9s utilitzar-lo per mitj\u00e0 d'ordres.</p> <p>Cloud</p> <p>La majoria de plataformes de n\u00favol p\u00fablic (com Amazon Web Services, Microsoft Azure o Google Cloud) ofereixen una interf\u00edcie de tipus CLI per crear i mantenir la infraestructura de serveis al n\u00favol. Aquesta possibilitat permet automatitzar tasques relacionades amb el n\u00favol dins dels processos de desplegament de les aplicacions.</p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#122-interficies-tipus-gui","title":"1.2.2. Interf\u00edcies tipus GUI","text":"<p>Les interf\u00edcies gr\u00e0fiques d'usuari (de l'angl\u00e9s, Graphical User Interface) s\u00f3n aquelles que utilitzen imatges i objectes gr\u00e0fics per representar la informaci\u00f3 i les accions que els usuaris poden realitzar. Solen utilitzar met\u00e0fores del m\u00f3n real (com les finestres o els botons) i, a difer\u00e8ncia de les interf\u00edcies CLI, donen llibertat d'exploraci\u00f3 a l'usuari, que no necessita con\u00e9ixer una estricta sintaxi. </p> <p>Les interf\u00edcies tipus GUI es van popularitzar durant els anys 80 gr\u00e0cies a la seua introducci\u00f3 als sistemes operatius d'Apple i Microsoft, encara que el seu origen real es remunta a l'any 1973. Aquest any es va presentar l'ordinador Xerox Alto, el primer a utilitzar la met\u00e0fora de l'escriptori i un dispositiu apuntador (el ratol\u00ed). </p> <p>GUIs</p> <p>Actualment, les interf\u00edcies de tipus GUI s\u00f3n les m\u00e9s comunes a les aplicacions destinades a l'\u00e0mbit empresarial, i per aix\u00f2 el m\u00f2dul de Desenvolupament d'Interf\u00edcies se centra en la construcci\u00f3 d'aquest tipus d'interf\u00edcies.</p>"},{"location":"unitats/2-intro-interficies/teoria/1%20-%20Introduccio/#123-interficies-tipus-nui","title":"1.2.3. Interf\u00edcies tipus NUI","text":"<p>Les interf\u00edcies NUI o interf\u00edcies naturals d'usuari (de l'angl\u00e8s, Natural User Interface) es caracteritzen per oferir a l'usuari un estil d'interacci\u00f3 molt m\u00e9s directe i intu\u00eftiu que amb els tipus d'interf\u00edcies anteriors. Solen mancar de dispositiu f\u00edsic d'entrada (com teclat o ratol\u00ed), i en el seu lloc fan \u00fas d'habilitats naturals com el moviment, els gestos o la veu. </p> <p>NUI</p> <p>Les interf\u00edcies t\u00e0ctils dels dispositius m\u00f2bils (com els tel\u00e8fons intel\u00b7ligents o les tauletes) s\u00f3n un clar exemple d'interf\u00edcies NUI, ja que permeten a l'usuari realitzar accions per mitj\u00e0 de gestos naturals (per exemple, navegar entre imatges fent-les lliscar a la pantalla del dispositiu). Tamb\u00e9 els assistents de veu (com Google Assistant o Amazon Alexa) s\u00f3n exemples d'interf\u00edcies naturals, en aquest cas controlades per mitj\u00e0 de la veu.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/","title":"2 - Usabilitat","text":""},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#2-usabilitat","title":"2. Usabilitat","text":"<p>No \u00e9s senzill trobar una definici\u00f3 exacta d'usabilitat, per\u00f2 en termes generals es podria dir que la usabilitat d'un sistema \u00e9s la facilitat amb qu\u00e8 els usuaris poden fer servir aquest sistema per a dur a terme una tasca concreta. Per\u00f2 no hem de pensar que la usabilitat \u00e9s simplement un sin\u00f2nim de facilitat, ja que com veurem m\u00e9s endavant, hi ha molts altres factors que influeixen en la usabilitat d'una aplicaci\u00f3.</p> <p>El terme usabilitat \u00e9s un neologisme, adaptat del vocable angl\u00e9s usability. Encara que la Reial Acad\u00e8mia Espanyola (RAE) no ho inclou al seu diccionari, el seu \u00fas est\u00e0 acceptat i \u00e9s molt habitual en l'\u00e0mbit tecnol\u00f2gic.</p> <p>La usabilitat \u00e9s un dels conceptes clau dins del proc\u00e9s de disseny centrat en l'usuari que vam veure a l'apartat anterior, i ha d'estar present tant en el disseny de les possibles solucions com en la seua avaluaci\u00f3 posterior. </p> <p>S\u00f3n diverses les normes internacionals que inclouen recomanacions relacionades amb la usabilitat, com ara:</p> <ul> <li>ISO 9241-11 (Usabilitat: definicions i conceptes).</li> <li>ISO/IEC 25010 (Qualitat en programari i sistemes).</li> <li>ISO/TR 16982 (M\u00e8todes d'usabilitat com a base al disseny centrat en l'usuari).</li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#21-components-de-la-usabilitat","title":"2.1. Components de la usabilitat","text":"<p>La usabilitat d'un producte o sistema es considera habitualment formada per cinc components:</p> <p></p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#211-aprenentatge","title":"2.1.1. Aprenentatge.","text":"<p>Un dels components principals de la usabilitat \u00e9s la facilitat d'aprenentatge, determinada per l'esfor\u00e7 amb qu\u00e8 un nou usuari de la nostra aplicaci\u00f3 pot arribar a completar una tasca espec\u00edfica. Tamb\u00e9 \u00e9s important que en els usos successius de l'aplicaci\u00f3 l'usuari trobe l'aplicaci\u00f3 cada vegada m\u00e9s f\u00e0cil d'utilitzar.</p> <p>Per facilitar l'aprenentatge, un dels aspectes clau \u00e9s la consist\u00e8ncia amb els est\u00e0ndards establerts a la resta d'aplicacions. Per exemple, la majoria de les aplicacions associen la drecera de teclat Ctrl+C amb l'acci\u00f3 de copiar. Si ho fem aix\u00ed tamb\u00e9 al nostre producte, estarem facilitant l'aprenentatge.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#212-eficiencia","title":"2.1.2. Efici\u00e8ncia.","text":"<p>Un altre requisit per a la bona usabilitat de l'aplicaci\u00f3 \u00e9s l'efici\u00e8ncia. L'usuari, un cop ha apr\u00e9s el nostre disseny, ha de ser capa\u00e7 d'executar les tasques per a les quals s'ha creat el producte tan r\u00e0pid com siga possible i sense impediments, seguint el proc\u00e9s m\u00e9s senzill.</p> <p>Moltes aplicacions ofereixen als usuaris experimentats formes alternatives de dur a terme les tasques que ajuden a millorar l'efici\u00e8ncia, com ara la definici\u00f3 de dreceres de teclat personalitzades o la creaci\u00f3 de macros per encadenar diverses accions.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#213-record","title":"2.1.3. Record.","text":"<p>Tamb\u00e9 \u00e9s important que si un usuari est\u00e0 un temps sense utilitzar el nostre disseny, l'esfor\u00e7 de recordar quan el torna a fer servir el producte siga el m\u00ednim possible. Hem d'evitar que l'usuari haja de memoritzar la manera com es fan les tasques.</p> <p>Un recurs que s'utilitza en algunes aplicacions per evitar memoritzar l'usuari s\u00f3n els assistents, que van guiant pas per pas per fer una tasca llarga o especialment complexa.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#214-errors","title":"2.1.4. Errors.","text":"<p>Una part fonamental de la usabilitat \u00e9s la relacionada amb els errors. L'aplicaci\u00f3 ha de ser capa\u00e7 de tolerar un ampli ventall d'accions realitzades per l'usuari sense generar un error. En cas que l'error es produ\u00efsca, cal informar adequadament l'usuari del tipus d'error i la gravetat, i proporcionar informaci\u00f3 per poder corregir l'error. Per a tal finalitat, ens pot ajudar molt un tractament d'excepcions adequat.</p> <p>Hem de prestar especial atenci\u00f3 al llenguatge utilitzat en els missatges d'error que es mostren a l'usuari, ja que la forma d'expressar la situaci\u00f3 produ\u00efda pot tindre una influ\u00e8ncia negativa. Cal evitar el llenguatge acusatori i intimidador, aix\u00ed com la descripci\u00f3 excessivament t\u00e8cnica de l'error.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#215-satisfaccio","title":"2.1.5. Satisfacci\u00f3.","text":"<p>El darrer component de la usabilitat \u00e9s la satisfacci\u00f3 de l'usuari en utilitzar el nostre producte. El disseny ha d'aconseguir que l'experi\u00e8ncia de l'usuari amb la nostra aplicaci\u00f3 siga agradable i la seua sensaci\u00f3 subjectiva despr\u00e9s de l'\u00fas siga positiva.</p> <p>La satisfacci\u00f3 de l'usuari est\u00e0 en gran manera influenciada per l'aparen\u00e7a visual de la interf\u00edcie, que hauria de ser est\u00e8ticament agradable per\u00f2 minimalista. En aquest sentit \u00e9s important seguir les pautes de disseny que veurem a l'\u00faltim apartat de la unitat.</p>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#22-avaluacio-de-la-usabilitat","title":"2.2. Avaluaci\u00f3 de la usabilitat","text":"<p>Com vam veure a l'apartat anterior, una de les fases del proc\u00e9s de disseny centrat en l'usuari \u00e9s l'avaluaci\u00f3, i la usabilitat \u00e9s un dels factors clau que cal avaluar. Des dels primers prototips del nostre producte hem de validar el disseny amb els nostres usuaris, cosa que ens aportar\u00e0 informaci\u00f3 molt valuosa per millorar i evolucionar cap a la soluci\u00f3 final.</p> <p>Podem destacar els tres objectius seg\u00fcents de l'avaluaci\u00f3 de la usabilitat:</p> <ul> <li>Identificar problemes en el disseny del producte o servei.</li> <li>Descobrir noves oportunitats de millora del disseny que no ens hav\u00edem plantejat.</li> <li>Aprendre sobre el comportament i les prefer\u00e8ncies dels nostres usuaris.</li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#221-que-hem-davaluar","title":"2.2.1. Qu\u00e8 hem d'avaluar?","text":"<p>La primera pregunta que hem de respondre a l'hora de plantejar l'avaluaci\u00f3 de la usabilitat d'un disseny \u00e9s qu\u00e8 avaluarem. Les sessions d'avaluaci\u00f3 de la usabilitat consisteixen a plantejar a un grup d'usuaris la realitzaci\u00f3 d'una s\u00e8rie de tasques realistes que podrien fer a la feina di\u00e0ria amb l'aplicaci\u00f3.</p> <p>Les tasques que es plantegen poden ser molt espec\u00edfiques o amb un resultat obert, depenent dels objectius de la prova. Per\u00f2 sempre haurem de ser molt curosos amb la manera d'especificar la tasca, per evitar malentesos i confusions a l'usuari. Tamb\u00e9 hem d'evitar dirigir l'usuari excessivament, i permetre que utilitze lliurement el disseny.</p> <p>Important</p> <p>A l'hora d'escollir les tasques que els usuaris hauran de realitzar a la sessi\u00f3 d'avaluaci\u00f3 de la usabilitat, hem de prioritzar les m\u00e9s rellevants per a la nostra aplicaci\u00f3. Es recomana que no siguen m\u00e9s de cinc tasques per participant, i que la durada total de la sessi\u00f3 no supere una hora.</p> <p>A m\u00e9s de les tasques que es plantejaran a l'usuari, hem de decidir qu\u00e8 ens interessa mesurar durant la prova. En termes generals, se sol distingir entre dos tipus de m\u00e8triques:</p> <ul> <li> <p>Qualitatives: aquest tipus de m\u00e8triques s\u00f3n especialment importants a les primeres fases del disseny, i consisteixen en valoracions subjectives que realitza l'usuari durant la prova o en observacions que podem realitzar del seu comportament . </p> <p>Exemple</p> <p>Exemples de m\u00e8triques qualitatives s\u00f3n el nivell d'estr\u00e8s de l'usuari (determinat pels seus moviments, gestos o expressions) o la satisfacci\u00f3 de l'usuari despr\u00e9s de la prova (que podeu comentar directament o podem recollir amb un q\u00fcestionari).</p> </li> <li> <p>Quantitatives: aquestes m\u00e8triques es basen en par\u00e0metres quantificables, i s'utilitzen m\u00e9s quan el disseny est\u00e0 quasi acabat o fins i tot quan el producte ja est\u00e0 en funcionament. </p> <p>Exemple</p> <p>Algunes m\u00e8triques quantitatives podrien ser el temps que li costa a un usuari dur a terme una tasca, el nombre de tasques que completa en una sessi\u00f3 o la quantitat de vegades que ha hagut d'anar a l'ajuda.</p> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#222-qui-participa-en-lavaluacio","title":"2.2.2. Qui participa en l'avaluaci\u00f3?","text":"<p>A les sessions d'avaluaci\u00f3 de la usabilitat podem distingir els rols seg\u00fcents:</p> <ul> <li> <p>Moderador: \u00e9s l'encarregat de guiar els usuaris participants durant la sessi\u00f3 d'avaluaci\u00f3. Presentar\u00e0 les tasques a realitzar, resoldr\u00e0 els dubtes dels usuaris i obtindr\u00e0 informaci\u00f3 mitjan\u00e7ant l'observaci\u00f3 o preguntant als usuaris. \u00c9s recomanable que siga alg\u00fa extern a l'equip de desenvolupament del producte, i fins i tot de vegades es recorre a professionals especialitzats en aquest tipus d'avaluacions.</p> <p>Important</p> <p>El moderador ha de procurar mantenir-se neutral i no influir en els participants. Ha d'intervenir tan poc com siga possible, i quan ho fa\u00e7a ha d'utilitzar un estil d'interacci\u00f3 obert, que permeta a l'usuari expressar-se amb llibertat. Per exemple, en lloc de preguntar si us sembla b\u00e9 una funcionalitat \u00e9s millor preguntar per la vostra opini\u00f3 sobre aquesta funcionalitat.</p> </li> <li> <p>Usuaris: els participants a la sessi\u00f3 han de ser usuaris potencials del producte o servei que estem dissenyant. Es recomana que a cada sessi\u00f3 d'avaluaci\u00f3 participen al voltant de cinc usuaris, ja que a partir d'aquest nombre els problemes d'usabilitat detectats se solen repetir. </p> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#223-com-es-fa-lavaluacio","title":"2.2.3. Com es fa l'avaluaci\u00f3?","text":"<p>Hi ha diferents opcions a l'hora de plantejar l'avaluaci\u00f3 de la usabilitat:</p> <ul> <li>Presencial: el moderador i els usuaris estan f\u00edsicament al mateix lloc. Tot i que el moderador sol prendre notes durant la sessi\u00f3, tamb\u00e9 \u00e9s habitual gravar la sessi\u00f3 en v\u00eddeo per poder fer una an\u00e0lisi m\u00e9s detallada amb posterioritat.</li> <li>Remota: els participants a la sessi\u00f3 estan en llocs diferents. Solen ser menys costoses que les sessions presencials, i en estar els usuaris en el seu propi entorn de treball solen sentir-se m\u00e9s segurs davant de les tasques a realitzar. Podem distingir dos tipus d'avaluacions remotes:<ul> <li>Moderades: encara que el moderador i els usuaris estan en ubicacions f\u00edsiques diferents, interactuen de manera semblant a les sessions presencials, utilitzant algun programari de comunicaci\u00f3 que permeta compartir la pantalla de l'usuari.</li> <li>No moderades: es fa servir algun programari especialitzat per a avaluacions d'usabilitat, on es configuren les tasques a realitzar. Un cop acabada la sessi\u00f3, el moderador rep el resultat de l'avaluaci\u00f3 (normalment, l'enregistrament de la sessi\u00f3, un test de valoraci\u00f3 de l'usuari i les m\u00e8triques quantitatives que s'hagen definit).</li> </ul> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/2%20-%20Usabilitat/#23-experiencia-dusuari-ux","title":"2.3. Experi\u00e8ncia dusuari (UX)","text":"<p>El concepte d'experi\u00e8ncia d'usuari o UX (de l'angl\u00e9s, User Experience) fa refer\u00e8ncia a l'experi\u00e8ncia completa de l'usuari en relaci\u00f3 amb un producte o servei. Una bona experi\u00e8ncia d'usuari donar\u00e0 com a resultat una percepci\u00f3 subjectiva positiva de l'usuari cap a la nostra aplicaci\u00f3.</p> <p>Important</p> <p>No s'han de confondre els conceptes d'experi\u00e8ncia d'usuari i usabilitat, encara que hi ha relaci\u00f3 entre ells. La usabilitat \u00e9s un dels factors que influeixen en una bona experi\u00e8ncia d'usuari, per\u00f2 tamb\u00e9 seran determinants factors com ara la utilitat (que el producte permeta a l'usuari resoldre un problema concret), la credibilitat (que l'usuari confie en el nostre producte) o l'accessibilitat (que el disseny tinga en compte la varietat d'usuaris i dispositius).</p> <p>Donald Norman (del que ja parl\u00e0rem a l'apartat anterior) juntament amb Jakob Nielsen (un dels principals referents en el m\u00f3n de la usabilitat) van proposar els nivells seg\u00fcents en parlar d'experi\u00e8ncia d'usuari.</p> <p></p> <p>Com veiem, aconseguir una bona experi\u00e8ncia d'usuari comen\u00e7a creant un producte o servei que siga \u00fatil per a l'usuari i li permeta resoldre un problema concret. El seg\u00fcent pas seria aconseguir que el disseny siga usable, aplicant tot el que hem apr\u00e9s als apartats anteriors. Una vegada tenim un disseny \u00fatil i usable, l'objectiu seria aconseguir un producte atractiu per als usuaris, que han de desitjar utilitzar-lo. L'\u00faltim nivell \u00e9s on s'assoleix una experi\u00e8ncia global positiva, aconseguint que la seua opini\u00f3 subjectiva cap al nostre producte siga bona.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/","title":"3 - Pautes de disseny","text":""},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#3-pautes-de-disseny","title":"3. Pautes de disseny","text":"<p>Com hem vist als apartats anteriors, la interf\u00edcie d'usuari d'una aplicaci\u00f3 ha de ser dissenyada amb l'usuari sempre en ment, i tenir com a objectiu que l'experi\u00e8ncia global dels usuaris amb la nostra aplicaci\u00f3 siga la m\u00e9s satisfact\u00f2ria possible. Per aconseguir-ho, \u00e9s de vital import\u00e0ncia con\u00e9ixer les pautes i recomanacions existents per a cadascun dels components de la interf\u00edcie, que ens ajudaran sobre manera a aconseguir un disseny exit\u00f3s.</p> <p>Les pautes de disseny es troben en diferents tipus de documents, que podem organitzar en els seg\u00fcents nivells:</p> <p></p> <p>Al nivell m\u00e9s baix tenim els est\u00e0ndards internacionals, com les normes ISO comentades en apartats anteriors. Serveixen de base per a la resta de pautes, encara que no s\u00f3n documents amb qu\u00e8 els dissenyadors d'interf\u00edcies treballen habitualment. </p> <p>Prenent com a refer\u00e8ncia els est\u00e0ndards internacionals s'elaboren les guies de cada plataforma. Per exemple, Microsoft ha desenvolupat una guia de disseny per a aplicacions d'escriptori per al sistema operatiu Windows i Apple una guia per a cadascuna de les seues plataformes (com macOS o iOS). A l'entorn de les aplicacions per a Linux, hi ha una guia per al GNOME i una altra per al KDE.</p> <p>Important</p> <p>Les guies de disseny de cada plataforma contenen informaci\u00f3 molt \u00fatil a l'hora de plantejar el disseny de la interf\u00edcie d'usuari, i s'han de con\u00e9ixer i utilitzar per part dels dissenyadors. A les refer\u00e8ncies de la unitat es pot trobar un enlla\u00e7 a cadascuna de les guies comentades.</p> <p>En algunes organitzacions, s'elaboren est\u00e0ndards corporatius propis relatius al disseny de la interf\u00edcie, que solen incloure aspectes com la tipografia a utilitzar o les paletes de colors permeses. I respectant aquests est\u00e0ndards corporatius, de vegades es desenvolupen fins i tot guies de disseny per a aplicacions concretes dins una organitzaci\u00f3.</p> <p>Els apartats seg\u00fcents recullen algunes pautes generals que cal tenir en compte a l'hora de fer el disseny de la nostra interf\u00edcie.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#31-estructura-de-la-interficie","title":"3.1. Estructura de la interf\u00edcie","text":""},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#311-principis-de-disseny","title":"3.1.1. Principis de disseny","text":"<p>Pel que fa a com estructurar i organitzar els elements que formen la interf\u00edcie de la nostra aplicaci\u00f3, s'han de tenir presents en tot moment els principis de disseny seg\u00fcents:</p> <ul> <li> <p>Contrast: cal utilitzar els contrastos de color i mida per organitzar la informaci\u00f3 i dirigir l'atenci\u00f3 de l'usuari.</p> <p>Exemple</p> <p>S'utilitza habitualment el color roig per advertir l'usuari d'una acci\u00f3 destructiva o que no es pot desfer, ja que contrasta fortament amb els colors que se solen utilitzar com a fons.</p> </li> <li> <p>Jerarquia: agrupar els elements que formen la interf\u00edcie, ordenant-los segons la seua import\u00e0ncia.</p> <p>Exemple</p> <p>Els men\u00fas s\u00f3n un exemple t\u00edpic de jer\u00e0rquica a la interf\u00edcie, ja que ens permeten organitzar les funcionalitats de l'aplicaci\u00f3 en categories i subcategories.</p> </li> <li> <p>Proximitat: podem crear una relaci\u00f3 entre diferents elements de la interf\u00edcie si els situem a prop els uns dels altres. De la mateixa manera, quan dos components de la interf\u00edcie estan allunyats, l'usuari entendr\u00e0 que no hi ha relaci\u00f3 entre ells.</p> <p>Exemple</p> <p>A les barres de ferramentes els diferents botons solen estar agrupats segons la seva funcionalitat, de manera que els usuaris els poden localitzar m\u00e9s f\u00e0cilment. Per exemple, les opcions de negreta, cursiva i subratllat en un processador de text sempre estan juntes.</p> </li> <li> <p>Alineaci\u00f3: la correcta alineaci\u00f3 dels diferents components de la interf\u00edcie facilita a l'usuari processar la informaci\u00f3 i ens permet guiar-los m\u00e9s f\u00e0cilment per les diferents zones de la interf\u00edcie. L'alineaci\u00f3 entre els elements propers \u00e9s especialment important per evitar errors i sobreesfor\u00e7os a l'usuari.</p> <p>Exemple</p> <p>Quan dissenyem un formulari perqu\u00e8 l'usuari introdueixi informaci\u00f3, \u00e9s especialment important l'alineaci\u00f3 entre els diferents elements. D'una banda, les etiquetes han d'estar correctament alineades amb els controls que acompanyen. I de l'altra, hem d'alinear uns camps amb els altres per facilitar a l'usuari la seva tasca.</p> </li> </ul>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#312-menus-menus-contextuals-i-barres-de-ferramentes","title":"3.1.2. Men\u00fas, men\u00fas contextuals i barres de ferramentes","text":"<p>Gran part de les aplicacions amb interf\u00edcie gr\u00e0fica d'usuari compten amb men\u00fas i barres de ferramentes per permetre a l'usuari accedir a les diferents funcionalitats de l'aplicaci\u00f3. Veurem algunes de les pautes m\u00e9s importants a tenir en compte quan fem servir aquests elements:</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#3121-menus","title":"3.1.2.1. Men\u00fas","text":"<p>Si el men\u00fa t\u00e9 poques opcions principals (tres o menys) \u00e9s millor considerar una altra alternativa, com ara una barra amb botons. Si teniu massa opcions principals (m\u00e9s de 10) cal intentar reorganitzar les opcions de men\u00fa per reduir-les.</p> <p>Cal intentar simplificar l'estructura de men\u00fas i de submen\u00fas, ja que compliquen a l'usuari trobar l'opci\u00f3 desitjada. Si la jerarquia \u00e9s massa profunda haurem d'intentar reorganitzar les opcions.</p> <p>Les etiquetes han de ser tan simples com siga possible, recomanant-se una sola paraula a les opcions principals del men\u00fa.</p> <p>Si l'acci\u00f3 associada a una opci\u00f3 de men\u00fa requereix obrir una finestra o di\u00e0leg, la vostra etiqueta ha d'acabar amb punts suspensius (per exemple, Desa com\u2026).</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#3122-menus-contextuals","title":"3.1.2.2. Men\u00fas contextuals","text":"<p>Han d'apar\u00e9ixer en pr\u00e9mer amb el bot\u00f3 dret del ratol\u00ed sobre una zona de la interf\u00edcie, i oferiran un xicotet conjunt d'opcions (no m\u00e9s de 10) relacionades amb l'element sobre el qual heu premut. Les opcions del men\u00fa contextual tamb\u00e9 han d'estar disponibles des del men\u00fa principal de l'aplicaci\u00f3.</p> <p>Ordenar les opcions de m\u00e9s a menys rellev\u00e0ncia per a l'usuari. Evitar l'\u00fas de submen\u00fas als men\u00fas contextuals.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#3123-barres-de-ferramentes","title":"3.1.2.3. Barres de ferramentes","text":"<p>Incloure a la barra de ferramentes nom\u00e9s les opcions m\u00e9s utilitzades pels usuaris. \u00c9s recomanable permetre a l'usuari personalitzar els botons presents a les barres de ferramentes.</p> <p>Com que, en la majoria de les aplicacions, les barres de ferramentes es poden ocultar, les opcions han de ser accessibles d'altres maneres (per exemple, amb el men\u00fa principal de l'aplicaci\u00f3). Les icones utilitzades han de ser consistents amb les que l'usuari sol trobar a la majoria de les aplicacions (per exemple, un disquet per a l'opci\u00f3 de guardar). Tamb\u00e9 \u00e9s recomanable afegir una descripci\u00f3 de cada acci\u00f3 a manera de tooltip.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#32-controls","title":"3.2. Controls","text":"<p>Els controls s\u00f3n els components b\u00e0sics amb qu\u00e8 constru\u00efm la interf\u00edcie gr\u00e0fica d'una aplicaci\u00f3. </p> <p>Exemple</p> <p>Alguns exemples de controls s\u00f3n els botons, les caselles de selecci\u00f3 o les llistes desplegables.</p> <p>La taula seg\u00fcent recull informaci\u00f3 sobre l'\u00fas dels principals controls, indicant quan han de ser usats i algunes pautes importants en cadascun.</p> <p>Pautes d'\u00fas dels controls</p> BotonsEntrada de textLlista desplegableCasella de selecci\u00f3Bot\u00f3 de r\u00e0dio <p></p> <p>Els botons permeten a l'usuari iniciar una acci\u00f3 de manera immediata.</p> <ul> <li>Utilitzar etiquetes descriptives de lacci\u00f3.</li> <li>Ser consistent en tota l'aplicaci\u00f3 (posici\u00f3, colors, icones, mida,...).</li> <li>Situar-los a prop d'altres controls relacionats.</li> <li>Agrupar-los de manera l\u00f2gica.</li> </ul> <p></p> <p>Permet introduir text de forma lliure. No ho utilitzarem quan hi hagi un control especialitzat m\u00e9s adequat (per exemple, un selector de dates) o quan els possibles valors estiguin restringits (per exemple, la prov\u00edncia d'una adre\u00e7a).</p> <ul> <li>L'etiqueta ha d'indicar clarament a l'usuari qu\u00e8 ha d'introduir i ser tan curta com siga possible.</li> <li>\u00c9s preferible situar l\u02bbetiqueta sobre el control, encara que tamb\u00e9 es pot posar a la seva esquerra.</li> <li>L'amplada del control ha de ser adequada al tipus de dada que cont\u00e9.</li> </ul> <p></p> <p>S'utilitzen per triar un valor d'una llista de valors possibles. S\u00f3n especialment \u00fatils quan una de les opcions \u00e9s la predeterminada, o quan lespai disponible \u00e9s limitat.</p> <ul> <li>Cadascuna de les opcions ha d'estar formada per poques paraules.</li> <li>Les opcions han d'estar ordenades de manera l\u00f2gica. </li> <li>Les meta-opcions (com Cap) s'han de situar a l'inici de la llista i entre par\u00e8ntesis. </li> </ul> <p></p> <p>S'utilitzen per activar o desactivar una opci\u00f3, o per seleccionar o deseleccionar una opci\u00f3 dins d'un grup d'opcions. \u00c9s molt \u00fatil quan lusuari pot triar diverses opcions, o no triar cap opci\u00f3.</p> <ul> <li>Les diferents caselles d\u201fun grup han d\u201festar alineades verticalment.</li> <li>Limitar a 10 el n\u00famero de caselles en un grup.</li> <li>En un grup de caselles totes les etiquetes han de ser homog\u00e8nies en extensi\u00f3 i en format.</li> </ul> <p></p> <p>Permet a l'usuari seleccionar una \u00fanica opci\u00f3 dins d'un grup d'opcions. S\u00f3n recomanables quan volem que l'usuari vegi totes les opcions alhora, i quan les etiquetes de les opcions sigan extenses.</p> <ul> <li>El nombre d'opcions ha de ser inferior a 7.</li> <li>Ordenar les diferents opcions en un ordre l\u00f2gic per a l'usuari.</li> <li>Seleccionar per defecte l'opci\u00f3 m\u00e9s adequada per a l'usuari.</li> </ul> <p>A les guies de disseny de cada plataforma s'ofereix informaci\u00f3 per a altres tipus de controls m\u00e9s espec\u00edfics, com ara les barres de progr\u00e9s, els controls lliscants o els selectors de data i hora.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#33-aspecte-visual","title":"3.3. Aspecte visual","text":"<p>En aquest apartat es mostren algunes pautes de disseny importants relacionades amb l'aspecte visual de l'aplicaci\u00f3, concretament relatives al color, el text i les icones.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#331-color","title":"3.3.1. Color","text":"<p>L'\u00fas de diferents colors a la interf\u00edcie amb fins est\u00e8tics ha de ser redu\u00eft, i s'utilitzar\u00e0 principalment per comunicar alguna cosa a l'usuari (per exemple, utilitzarem el color roig per comunicar un error o situaci\u00f3 perillosa). No obstant aix\u00f2, mai no ha de ser l'\u00fanica via per comunicar alguna cosa.</p> <p>Mai referenciar un element de la interf\u00edcie pel seu color (per exemple, seria incorrecte indicar a l'usuari \u201cHa de pr\u00e9mer el bot\u00f3 roig\u201d).</p> <p>La interpretaci\u00f3 que fem dels diferents colors pot variar depenent de la cultura dels usuaris, per la qual cosa ens haurem d'assegurar que el significat dels colors siga el que pretenem.</p> <p>El conjunt de colors que utilitzem en el nostre disseny (conegut com a esquema de color o paleta) han de contrastar de forma adequada.</p> <p>Paleta de colors</p> <p>S'aconsella utilitzar les paletes del sistema, o un generador de paletes de colors com el que s'inclou a les refer\u00e8ncies de la unitat.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#332-text","title":"3.3.2. Text","text":"<p>Es recomana utilitzar les fonts predeterminades de la plataforma a qu\u00e8 va destinada l'aplicaci\u00f3 (per exemple, les fonts Segoe UI a Microsoft Windows o San Francisco a Apple macOS).</p> <p>La mida del text s'ha de determinar de manera que ajude l'usuari a establir la jerarquia entre els elements de la interf\u00edcie.</p> <p>Utilitzar les propietats del text (com la negreta, la cursiva o el subratllat) de forma consistent dins de l'aplicaci\u00f3, i tamb\u00e9 amb la resta d'aplicacions. Per exemple, els enlla\u00e7os sempre han d'estar subratllats.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#333-icones","title":"3.3.3. Icones","text":"<p>Com a regla general, no s'han d'usar etiquetes i icones alhora al mateix control. Cal triar una de les dues opcions. Es recomana utilitzar icones f\u00e0cilment identificables per l'usuari, que seguisquen les convencions de la resta d'aplicacions (per exemple, una paperera per a l'acci\u00f3 d'esborrar).</p> <p>Algunes icones s\u00f3n f\u00e0cilment reconeixibles dins d'un grup d'icones, per\u00f2 no fora del grup. Per exemple, una icona amb un quadrat negre representa l'acci\u00f3 de parar en un reproductor multim\u00e8dia, per\u00f2 dif\u00edcilment ser\u00e0 associada a aquesta acci\u00f3 fora del context.</p> <p>Conv\u00e9 adaptar-se a l'estil visual de les icones de cada plataforma, encara que actualment el m\u00e9s habitual \u00e9s utilitzar icones amb un disseny simple que representen clarament una acci\u00f3.</p>"},{"location":"unitats/2-intro-interficies/teoria/3%20-%20Pautes%20de%20Disseny/#34-missatges-a-lusuari","title":"3.4. Missatges a l'usuari","text":"<p>La majoria de les aplicacions necessiten mostrar diferents tipus de missatges a l'usuari amb diferents prop\u00f2sits. S\u00f3n molt habituals els missatges de confirmaci\u00f3, error o advert\u00e8ncia i les notificacions. </p> <p>A continuaci\u00f3 es llisten algunes recomanacions relacionades amb els missatges a l'usuari:</p> <p>Missatges a l'usuari</p> <ul> <li>Cal avisar l'usuari abans de comen\u00e7ar una acci\u00f3 irreversible i que podria causar una p\u00e8rdua d'informaci\u00f3.</li> <li>Cal evitar interrompre l'usuari amb missatges que no siguen importants.</li> <li>Sempre hem d'utilitzar un llenguatge proper a l'usuari, sense incloure informaci\u00f3 interna de l'aplicaci\u00f3 (com ara codis d'error que no siguen \u00fatils per a l'usuari).</li> <li>La manera d'expressar els missatges ha de ser respectuosa amb l'usuari, i utilitzar un estil d'escriptura directe i conc\u00eds. </li> </ul>"},{"location":"unitats/3-GUI-Flet/tasques/1%20-%20Activitats/","title":"1 - Activitats","text":""},{"location":"unitats/3-GUI-Flet/tasques/1%20-%20Activitats/#1-activitat-1-habilitacio-i-deshabilitacio-de-controls","title":"1. Activitat 1 - Habilitaci\u00f3 i deshabilitaci\u00f3 de controls","text":"<p>Partint del seg\u00fcent codi vist en la teoria:</p> Python<pre><code>import flet as ft\ndef main(page):\ndef add_clicked(e):\npage.add(ft.Checkbox(label=new_task.value))\nnew_task.value = \"\"\nnew_task.focus()\nnew_task.update()\nnew_task = ft.TextField(label=\"Tasca pendent\", width=300)\npage.add(ft.Row([new_task, ft.ElevatedButton(\"Afegir\", on_click=add_clicked)]))\nft.app(target=main)\n</code></pre> <p>Modifica'l per a que el bot\u00f3 <code>Afegir</code> es desactive sempre que la caixa de text new_task estiga en blanc.</p> <p>Pistes</p> <ul> <li>La caixa de text estar\u00e0 buida en diferents ocasions, al principi, en afegir una tasca i en borrar un text introdu\u00eft.</li> <li>Fes \u00fas de <code>disabled</code> per a canviar l'estat del control.</li> <li>Investiga quins esdeveniments es produixen al borrar el text. </li> </ul>"},{"location":"unitats/3-GUI-Flet/tasques/1%20-%20Activitats/#2-activitat-2-formulari","title":"2. Activitat 2 - Formulari","text":"<p>Fes un formulari d'alta d'usuari semblant al que es mostra a la seg\u00fcent imatge. Cada control de tipus caixa de text inclour\u00e0 un text d'ajuda. La contrasenya es mostrar\u00e0 oculta, excepte quan es pulse el bot\u00f3 per a mostrar-la.</p> <p>Inclou tamb\u00e9 un bot\u00f3 d'enviar, situat al final del formulari a la dreta i inicialment deshabilitat. El bot\u00f3 s'habilitar\u00e0 quan tots els controls tinguen informaci\u00f3 introdu\u00efda. Al donar-li al bot\u00f3 enviar, es comprovaran certes restriccions sobre la informaci\u00f3 intrudu\u00efda. Si es cumplixen totes les condicions, s'imprimir\u00e0 per consola el missatge Formulari enviat, en cas contrari indicar\u00e0 quin \u00e9s l'error que s'ha produ\u00eft, per exemple, La contrassenya ha de tindre almenys huit car\u00e0cters.</p> <p>Usuari:</p> <ul> <li>comen\u00e7a per lletra</li> <li>no cont\u00e9 espais</li> <li>no cont\u00e9 car\u00e0cters especials</li> </ul> <p>Contrasenya:</p> <ul> <li>\u00e9s almenys de llongitud 8</li> <li>t\u00e9 almenys una maj\u00fascula</li> <li>t\u00e9 almenys una min\u00fascula</li> <li>t\u00e9 almenys un n\u00famero</li> <li>t\u00e9 almenys un car\u00e0cter especial</li> </ul> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/tasques/1%20-%20Activitats/#3-activitat-3-layouts-niuats","title":"3. Activitat 3 - Layouts niuats","text":"<p>Un layout \u00e9s un control que a la vegada pot contindre altres controls. Aleshores, podem niuar diversos layouts per dissenyar la nostra aplicaci\u00f3 com desitgem.</p> <p>Desenvolupa una aplicaci\u00f3 on pugam canviar (modificant una variable al codi) el nombre d'elements en una columna i en una fila. El tamany de la finestra s'ha de calcular autom\u00e0ticament segons el nombre d'elements que definim, encara que despr\u00e9s es podr\u00e0 reassignar el seu tamany:</p> <p> </p> 10 elements en la columna i 10 en la fila <p> </p> 8 elements en la columna i 5 en la fila <p>Pista</p> <ul> <li>Per a canviar el tamany fes \u00fas de la propietat page.window_width i page.window_height.</li> <li>Pensa quants i de quin tipus s\u00f3n els layouts abans de comen\u00e7ar a desenvolupar.</li> </ul>"},{"location":"unitats/3-GUI-Flet/tasques/1%20-%20Activitats/#4-activitat-4-navegacio-entre-vistes","title":"4. Activitat 4 - Navegaci\u00f3 entre vistes","text":"<p>Partint del code viste en teoria:</p> <p>Navegaci\u00f3 entre dues rutes amb diferent vista</p> Python<pre><code>'''Exemple de navegaci\u00f3 entre vistes de Flet'''\nimport flet as ft\ndef main(page: ft.Page):\n'''Funci\u00f3 principal'''\npage.title = \"Routes Example\"\ndef route_change(route):\npage.views.clear()\npage.views.append(\nft.View(\n\"/\",\n[\nft.AppBar(title=ft.Text(\"Flet app\"), bgcolor=ft.colors.SURFACE_VARIANT),\nft.ElevatedButton(\"Visit Store\", on_click=lambda _: page.go(\"/store\")),\n],\n)\n)\nif page.route == \"/store\":\npage.views.append(\nft.View(\n\"/store\",\n[\nft.AppBar(title=ft.Text(\"Store\"), bgcolor=ft.colors.SURFACE_VARIANT),\nft.ElevatedButton(\"Go Home\", on_click=lambda _: page.go(\"/\")),\n],\n)\n)\npage.update()\ndef view_pop(view):\npage.views.pop()\ntop_view = page.views[-1]\npage.go(top_view.route)\npage.on_route_change = route_change\npage.on_view_pop = view_pop\npage.go(page.route)\nft.app(target=main, view='web_browser', port=8080)\n</code></pre> <p>Fes les modificacions pertinents per a que el comportament siga el que es mostra al seg\u00fcent v\u00eddeo (simula una tenda amb un carro, es pot tornar sempre al home amb el bot\u00f3, des del carro tamb\u00e9 es pot tornar a la tenda, i amb el bot\u00f3 autom\u00e0tic de l'AppBar, es pot seguir el cam\u00ed Carro -&gt; Tenda -&gt; Home):</p> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/tasques/2%20-%20Practiques/","title":"2 - Pr\u00e0ctiques","text":""},{"location":"unitats/3-GUI-Flet/tasques/2%20-%20Practiques/#1-practica-1-troba-el-numero","title":"1. Pr\u00e0ctica 1 - \"Troba el n\u00famero\"","text":"<p>Es pret\u00e9n implementar un joc l'objectiu del qual \u00e9s trobar el n\u00famero buscat. A la pantalla es veuran una s\u00e8rie de n\u00fameros que al clicar sobre ells et portaran a una nova vista indicant si \u00e9s el n\u00famero trobat o per contra no \u00e9s el n\u00famero que es buscava. El joc acabar\u00e0 en trobar el n\u00famero buscat, moment en qu\u00e8 es ja no es podr\u00e0 clicar sobre estos i apareixer\u00e0 un bot\u00f3 per reiniciar el joc. El n\u00famero de \u00edtems es podr\u00e0 canviar program\u00e0ticament simplement canviant el valor d'una de les variables al codi.</p> <p>Aplica la POO</p> <p>Fins ara hem utilitzat la programaci\u00f3 estructurada per als nostres desenvolupaments amb Flet. Passa al paradigma de programaci\u00f3 orientat a objectes per a facilitar el desenvolupament del joc.</p> Python<pre><code>import flet as ft\nclass App:\ndef __init__(self) -&gt; None:\n...\ndef main(page: ft.Page):\napp = App()\npage.title = \"Flet APP\"\npage.add(app)\nif __name__ == \"__main__\":\nft.app(target=main)\n</code></pre> <p>Observeu el seg\u00fcent v\u00eddeo on es mostra el comportament del joc:</p> <p></p> <p> Dark Theme </p> <p></p> <p></p> <p> Light Theme </p> <p></p>"},{"location":"unitats/3-GUI-Flet/tasques/2%20-%20Practiques/#2-projecte-todo-app","title":"2. Projecte ToDo APP","text":"<p>Anem a desenvolupar, a trav\u00e9s d'una s\u00e8rie de pr\u00e0ctiques, una aplicaci\u00f3 completa ToDo. </p>"},{"location":"unitats/3-GUI-Flet/tasques/2%20-%20Practiques/#21-practica-2-editar-i-modificar-tasques","title":"2.1. Pr\u00e0ctica 2 - Editar i modificar tasques","text":"<p>Partint del teu codi de l'activitat 1, anem a afegir la funcionalitat de destacar la tasca (de moment no far\u00e0 res), editar-la i eliminar-la, tal com es mostra a continuaci\u00f3:</p> <p></p> <p></p> <p></p> <p>Fixeu-se que abans d'eliminar la tasca, l'usuari ha de confirmar que la vol eliminar.</p> <p>Fes que no calga utilitzar el clic a <code>Afegir</code> per a afegir la tasca, ni fer el clic al <code>check</code> per a confirmar el canvi en la descripci\u00f3 de la tasca. En els dos casos, s'ha d'executar autom\u00e0ticament en donar-li a la tecla <code>Enter</code>.</p> <p>Pulsaci\u00f3 de Enter en un TextField</p> <p>El control TextField llan\u00e7a un esdeveniment on_submit en donar-li a la tecla <code>Enter</code>.</p> <p>Focus</p> <p>Fes que el focus vagen adoptant-lo els controls adequats en cada situaci\u00f3. Per exemple, en editar el nom de la tasca, el textfield deuria prendre el focus per evitar que l'usuari haja de fer clic per a comen\u00e7ar a escriure. Idem per a botons en dialegs,...</p> <p>Aplica la POO</p> <p>Defineix una classe Task (o Tasca) que herede de ft.ControlUser i retorne la seg\u00fcent interf\u00edcie:</p> <p></p> <p>Defineix una classe TodoApp per a construir l'aplicaci\u00f3 principal, que importar\u00e0 la classe Task. Esta contindr\u00e0 una llista de tasques. Al fer clic al control de la paperera, s'eliminar\u00e0 de l'aplicaci\u00f3 TodoApp la tasca sobre la que s'ha fet clic. Per tant necessitem en TodoApp una llista de tasques, i en la classe tasques, necessitem una refer\u00e8ncia a TodoApp per poder accedir a aquesta llista.</p> <p>Tradu\u00eft a programaci\u00f3:</p> Python<pre><code>class Task(ft.UserControl):\ndef __init__(self, ..., todo_app) -&gt; None:\nsuper().__init__()\nself.text = text\nself.todo_app = todo_app\n...\ndef remove_task(self, e):\n...\nself.todo_app.tasks.remove(self)\n...\n</code></pre> <p>Utilitza el decorador @property</p> <p>L'\u00fas del decorador property ser\u00e0 molt \u00fatil, o millor dit  quasi imprescindible, en els nostres desenvolupaments. Ens serviran per a mantindre l'estat intern de l'aplicaci\u00f3 en conson\u00e0ncia amb la interf\u00edcie.</p> <p>Vos pose un exemple:</p> <p>En la classe Task tindrem una propietat featured que ens indica si la tasca est\u00e0 marcada com a destacada o no. \u00cddem per a completada a trav\u00e9s del seu checkbox. </p> <p>Aleshores, la millor forma de gestionar la interf\u00edcie, per a que reflectisca el valor de les propietats, \u00e9s utilitzar una propietat privada i a trav\u00e9s del seu setter, definit utilitzant els decoradors @propietat.setter, fer que la propietat canvie al fer un clic sobre la interf\u00edcie i viceversa, fer que canvie  la interf\u00edcie al canviar el valor de la propietat.</p> <p>Tradu\u00eft a codi:</p> Python<pre><code>@completed.setter\ndef completed(self, value):\nself._completed = value\n# canviem el valor del checkbox per a que es corresponga amb el valor de _completed\nself.completed_checkbox.value = self._completed\nself.update()\n@featured.setter\ndef featured(self, value):\nself._featured = value\n# canviem la interf\u00edcie\n... \nself.update()\n</code></pre>"},{"location":"unitats/3-GUI-Flet/tasques/2%20-%20Practiques/#22-practica-3-organitzem-les-tasques","title":"2.2. Pr\u00e0ctica 3 - Organitzem les tasques","text":"<p>La funcionalitat principal de l'aplicaci\u00f3 est\u00e0 m\u00e9s o menys desenvolupada. En esta pr\u00e0ctica anem a desenvolupar la resta de la interf\u00edcie gr\u00e0fica.</p> <p>El primer canvi ser\u00e0 afegir un text al final per a indicar quantes tasques ens queden pendents. Per a implementar este canvi \u00e9s recomanable tamb\u00e9 utilitzar el decorador property a una nova propietat de TodoApp que continga quantes tasques tenim pendents. En canviar el valor d'esta propietat, canviar\u00e0 la interf\u00edcie per a indicar el nou valor.</p> <p>El segon canvi que farem ser\u00e0 afegir un bot\u00f3 per a borrar les tasques completades. De nou, necessitarem confirmaci\u00f3 de l'usuari ja que estem davant un esdeveniment que destruir\u00e0 informaci\u00f3 (almenys de moment).</p> <p>El tercer canvi ser\u00e0 afegir a la interf\u00edcie unes pestanyes a mode de filtre per tal de poder veure totes les tasques o nom\u00e9s les destacades.</p> <p>El seg\u00fcent gif mostra el comportament de l'aplicaci\u00f3:</p> <p></p>"},{"location":"unitats/3-GUI-Flet/tasques/2%20-%20Practiques/#23-practica-4-organitzem-les-tasques-opcional","title":"2.3. Pr\u00e0ctica 4 - Organitzem les tasques (opcional)","text":"<p>En esta pr\u00e0ctica anem a modificar la nostra aplicaci\u00f3 per a organitzar encara m\u00e9s les nostres tasques. En esta ocasi\u00f3 afegirem la possibilitat de crear una llista de tasques per tem\u00e0tica. Per exemple, si la utilitza un alumne de 2n de DAM, podria organitzar-se les tasques per m\u00f2duls (DI, AD, SGE,...). D'esta forma afegim un nou filtre dinformaci\u00f3 per tem\u00e0tica. \u00c9s a dir, en seleccionar per tem\u00e0tica (tamb\u00e9 inclourem l'opci\u00f3 totes), i en filtrar per totes/destacades.</p> <p>Tingau en compte que haureu de filtrar correctament. Per exemple, si tinc una tem\u00e0tica DI (Desenvolupament d'interf\u00edcies) i seleccionem la pestanya totes, ens mostrar\u00e0 totes les tasques de tem\u00e0tica DI. Si seleccionem destacades, ens mostrar\u00e0 les de tem\u00e0tica DI destacades.</p> <p>En esta ocasi\u00f3 el disseny de la interf\u00edcie ser\u00e0 lliure. Seleccioneu correctament els controls i no oblideu fer proves al vostre desenvolupament.</p>"},{"location":"unitats/3-GUI-Flet/tasques/2%20-%20Practiques/#24-practica-5-login-mitjancant-google","title":"2.4. Pr\u00e0ctica 5 - Login mitjan\u00e7ant google","text":""},{"location":"unitats/3-GUI-Flet/teoria/1%20-%20Introducci%C3%B3/","title":"1 - Introducci\u00f3","text":""},{"location":"unitats/3-GUI-Flet/teoria/1%20-%20Introducci%C3%B3/#1-aplicacions-multiplataforma","title":"1. Aplicacions multiplataforma","text":"<p>S\u00f3n aquelles aplicacions que s\u00f3n desenvolupades en un \u00fanic llenguatge o framework i que faciliten la seua exportaci\u00f3 i execuci\u00f3 a diversos dispositiu, de manera independent al sistema operatiu.</p>"},{"location":"unitats/3-GUI-Flet/teoria/1%20-%20Introducci%C3%B3/#11-aproximacions","title":"1.1. Aproximacions","text":"<p>Per tal de minimitzar el desenvolupament espec\u00edfic par a cada plataforma, i el cost que aix\u00f2 suposa, apareixen diverses tecnolog\u00edes, centrades sobretot en tecnolog\u00edes web. Dins d\u2019aquestes, disposem d\u2019un gran ventall de possibilitats:</p> <ul> <li> <p>Aplicacions web responsives: Es tracta d\u2019aplicacions basades en tecnologia web: HTML, CSS i JavaScript, que adapten la seua interf\u00edcie a qualsevol dispositiu (disseny responsive). Aquestes aplicacions no requereixen de cap desenvolupament natiu, ja que s\u2019executen sobre el propi navegador web del sistema. Aix\u00ed doncs, disposem d\u2019\u00fan codi \u00fanic, per\u00f2 que no ofereixen una experi\u00e8ncia d\u2019usuari tan flu\u00efda com les aplicacions natives, ni permeten l\u2019acc\u00e9s a tots els components del sistema.</p> </li> <li> <p>Aplicacions h\u00edbrides: Es tracta d\u2019aplicacions web responsives que es carreguen dins un component de tipus WebView del sistema, que no \u00e9s m\u00e9s que un navegador sense la barra de navegaci\u00f3, pel que presenta l\u2019aparen\u00e7a d\u2019una aplicaci\u00f3 nativa. Aquestes aplicacions, a m\u00e9s, tamb\u00e9 permeten l\u2019acc\u00e9s a trav\u00e9s del WebView a algunes caracter\u00edstiques del dispositiu, com la ubicaci\u00f3 o l\u2019acceler\u00f2metre. El framework per al desenvolupament d\u2019aplicacions h\u00edbrides m\u00e9s popular \u00e9s Ionic, que permet el desenvolupament amb altres frameworks web com React, Angular o Vue.</p> </li> <li> <p>Aplicacions web progressives (PWAs): Les PWAs segueixen sent aplicacions web, per\u00f2 que gr\u00e0cies a determinats components, com els Service Workers i altres tecnologies estan m\u00e9s a prop de les aplicacions natives, de manera que permeten traure major potencial d\u2019aquestes, accedint al maquinari, treballar amb poca connexi\u00f3 o sense ella, o oferir notificaions del sistema. Existeixen diversos frameworks per al desenvolupament de PWAs, entre els quals es troben React PWA Library, Angular PWA Framework, Vue PWA Framework, Ionic PWA Framework, Svelte, PWA Builder o Polymer.</p> </li> </ul> <p>Com hem comentat, aquests tres tipus d\u2019aplicacions es basen en l\u2019\u00fas de tecnolog\u00edes web i algun component, b\u00e9 siga el propi navegador o un WebView. Tot i que hi ha apliccions molt bones basades en aquestes tecnolog\u00edes, no aporten totes les funcionalitats ni la flu\u00efdesa d\u2019una aplicaci\u00f3 nativa.</p> <p>Un pas m\u00e9s enll\u00e0 en el desenvolupament multiplataforma es troben els frameworks que, partint d\u2019un mateix codi base, generen aplicacions compilades de forma nativa per als diferents sistemes operatius. Algunes de les tecnologies m\u00e9s utilitzades en aquest tipus d\u2019aplicacions s\u00f3n:</p> <ul> <li> <p>React Native i Native Script: Que utilitzen com a base el llenguatge de programaci\u00f3 JavaScript, per\u00f2 en lloc de construir les interf\u00edcies mitjan\u00e7ant HTML, utilitzen components propis del framework que s\u00f3n compilats a codi natiu, fent ja innecessari utilitzar un WebView com a intermediari.</p> </li> <li> <p>Flutter: Aquest framework, creat i mantingut per Google permet el desenvolupament d\u2019aplicacions multiplataforma mitjan\u00e7ant el llenguatge Dart. Aquestes aplicacions s\u00f3n compilades a codi natiu dels diferents sistemes operatius (Android, iOS, Linux, Windows) i fins i tot web. Flutter, \u00e9s a m\u00e9s la tecnolog\u00eda nativa del sistema operatiu Google Fuchsia, basat en el seu propi microkernel Zircon, i que a mitj\u00e0 o llarg termini podria ser el reempla\u00e7 d\u2019Android.</p> </li> </ul>"},{"location":"unitats/3-GUI-Flet/teoria/1%20-%20Introducci%C3%B3/#2-introduccio","title":"2. Introducci\u00f3","text":"<p>En aquest primer apartat de la unitat introduirem les tecnologies que utilitzarem per als nostres desenvolupaments, Python, Flutter i Flet.</p>"},{"location":"unitats/3-GUI-Flet/teoria/1%20-%20Introducci%C3%B3/#21-python","title":"2.1. Python","text":"<p>\u2122/\u00aePython Software Foundation, GPL http://www.gnu.org/licenses/gpl.html, via Wikimedia Commons</p> <p>Python \u00e9s un llenguatge de programaci\u00f3 multiparadigma, interpretat, multiplataforma i lliure. Va n\u00e0ixer de la m\u00e0 de Guido Van Rossum, un programador holand\u00e9s, i la seua primera versi\u00f3 va ser publicada el 1991. </p> <p>Caracter\u00edstiques:</p> <ul> <li>D'alt nivell: proper a llenguatge de l'\u00e9sser hum\u00e0 i no al llenguatge m\u00e0quina binari.</li> <li>Interpretat: s'executa en qualsevol m\u00e0quina que tinga un int\u00e8rpret de Python. Aix\u00f2 suposa un gran avantatge a l'hora de fer petits canvis de forma r\u00e0pida, ja que elimina la necessitat de recompilar el codi.</li> <li>Multiparadigma: podem fer servir la programaci\u00f3 modular, estructurada o l'orientaci\u00f3 a objectes segons les nostres necessitats.</li> <li>Multiplataforma: permet que el codi siga executat en diferents sistemes operatius.</li> <li>Lliure: \u00e9s propietat de la Python Software Foundation i est\u00e0 publicat sota llic\u00e8ncia PSF-License que \u00e9s compatible amb GPL (General Public License), la qual cosa significa que \u00e9s de lliure \u00fas i distribuci\u00f3, fins i tot per a \u00fas comercial.</li> <li>Net i llegible: posa l'accent en la seua llegibilitat, cosa que ho fa f\u00e0cilment comprensible i f\u00e0cil d'aprendre. Si ja heu treballat amb qualsevol altre llenguatge de programaci\u00f3, us resultar\u00e0 f\u00e0cil l'\u00fas de Python.</li> <li>Tipat fort i din\u00e0mic: encara que les variables s\u00f3n d'un tipus concret, no tenim la necessitat de declarar-los, sin\u00f3 que l'assignaci\u00f3 de tipus s'anir\u00e0 en temps d'execuci\u00f3.</li> <li>\u00c0mplia comunitat: gr\u00e0cies a la seua popularitat compta amb un ampli suport i es pot trobar f\u00e0cilment molta documentaci\u00f3, esdeveniments, confer\u00e8ncies, etc.</li> </ul> <p>Actualment ocupa el primer lloc al r\u00e0nquing TIOBE, que \u00e9s un prestigi\u00f3s indicador de la popularitat dels llenguatges de programaci\u00f3 que s'actualitza un cop al mes. No nom\u00e9s aix\u00f2, sin\u00f3 que a m\u00e9s mostra una tend\u00e8ncia creixent davant de llenguatges com C o Java, que mostren la tend\u00e8ncia contr\u00e0ria. Aix\u00f2 \u00e9s degut en gran manera al seu \u00fas majoritari en camps com la Intel\u00b7lig\u00e8ncia Artificial, el Big Data, el Machine Learning o la Ciberseguretat, \u00e0rees predominants en un futur proper. </p> <p>TIOBE</p> <p>\u00c9s important assenyalar que l'\u00edndex TIOBE no tracta d'escollir el millor llenguatge de programaci\u00f3 o el llenguatge en qu\u00e8 s'han escrit la majoria de les l\u00ednies de codi.</p> <p>Tot aix\u00f2 ens ha portat a escollir aquest llenguatge de programaci\u00f3 per al present curs.</p> <p>Vegem la comparaci\u00f3 entre \u201cHola M\u00f3n!\u201d de Java i de Python</p> JavaPython Java<pre><code>public class HolaM\u00f3n {\npublic static void main(String[] args) {\nSystem.out.println(\"Hola M\u00f3n!\");\n}\n}\n</code></pre> Python<pre><code>print(\"Hola m\u00f3n!\")\n</code></pre> <p>Versions de Python</p> <p>Hi ha dues versions de python no compatibles entre elles, la versi\u00f3 2 i la versi\u00f3 3. Nosaltres utilitzarem la versi\u00f3 3 de python.</p>"},{"location":"unitats/3-GUI-Flet/teoria/1%20-%20Introducci%C3%B3/#22-flutter","title":"2.2. Flutter","text":"<p>Flutter \u00e9s un framework de codi obert desenvolupat per Google que es fa servir per a la creaci\u00f3 d'aplicacions m\u00f2bils per a diferents plataformes, com Android i iOS, aix\u00ed com per a aplicacions per a la web i escriptori. Les seves principals caracter\u00edstiques s\u00f3n les seg\u00fcents:</p> <ul> <li> <p>Desenvolupament multiplataforma: Flutter permet als desenvolupadors crear una sola base de codi que pot ser utilitzada per a desplegar aplicacions en diverses plataformes. Aix\u00f2 significa que pots desenvolupar una aplicaci\u00f3 i fer-la funcionar en dispositius Android, iOS, la web i fins i tot en altres plataformes com Windows o macOS.</p> </li> <li> <p>Llenguatge de programaci\u00f3 Dart: Flutter fa servir el llenguatge de programaci\u00f3 Dart com a base. Dart \u00e9s un llenguatge modern i eficient que es compila a codi nativo, la qual cosa millora l'efici\u00e8ncia de l'aplicaci\u00f3 i el seu rendiment.</p> </li> <li> <p>Widgets personalitzats: Flutter ofereix una \u00e0mplia gamma de widgets personalitzats que es poden utilitzar per a crear una interf\u00edcie d'usuari atractiva i din\u00e0mica. Aquests widgets s\u00f3n altament personalitzables i permeten als desenvolupadors dissenyar aplicacions amb un aspecte i comportament \u00fanic.</p> </li> <li> <p>R\u00e0pides actualitzacions d'UI: Flutter utilitza un sistema de composici\u00f3 de l'interf\u00edcie d'usuari (UI) basat en widgets que permet actualitzacions r\u00e0pides i eficients de la UI. Aix\u00f2 significa que les animacions i les interaccions s\u00f3n suaus i responsives.</p> </li> <li> <p>Hot Reload: Aquesta caracter\u00edstica permet als desenvolupadors veure els canvis immediatament a mesura que editen el codi font, sense necessitat de reiniciar l'aplicaci\u00f3. Aix\u00f2 accelera el proc\u00e9s de desenvolupament i la depuraci\u00f3.</p> </li> <li> <p>Suport de tercers: Flutter t\u00e9 un ecosistema actiu i en creixement de paquets i extensions que faciliten l'acc\u00e9s a funcionalitats i integracions diverses. Aix\u00f2 fa que sigui f\u00e0cil d'integrar amb altres serveis i biblioteques.</p> </li> <li> <p>Altes prestacions i rendiment: Gr\u00e0cies a la compilaci\u00f3 a codi natiu, les aplicacions Flutter solen tenir un bon rendiment i una c\u00e0rrega r\u00e0pida.</p> </li> <li> <p>Comunitat activa: Flutter t\u00e9 una comunitat \u00e0mplia i actiu, amb molts recursos en l\u00ednia, tutorials i ajuda disponible per a desenvolupadors.</p> </li> </ul> <p>En resum, Flutter \u00e9s una opci\u00f3 atractiva per a desenvolupadors que volen crear aplicacions m\u00f2bils i multiplataforma amb un aspecte i comportament personalitzats, aix\u00ed com un alt rendiment i un cicle de desenvolupament eficient. La seva versatilitat i la seva creixent popularitat han fet que sigui una eina rellevant en el m\u00f3n del desenvolupament d'aplicacions.</p>"},{"location":"unitats/3-GUI-Flet/teoria/1%20-%20Introducci%C3%B3/#23-flet","title":"2.3. Flet","text":"<p>Flet \u00e9s un framework que permet crear aplicacions GUI tant web, com d'escriptori com per a m\u00f2bils. Tot i que el projecte vol incorporar la possibilitat d'utilitzar diversos llenguatges de programaci\u00f3 com C++ o Go, actualment sols permet la creaci\u00f3 d'aplicacions amb Python.</p> <p>Els controls de Flet es basen en els controls Flutter de Google, combinant controls m\u00e9s menuts, ocultant complexitats i aplicant valors predeterminats raonables per garantir que les nostres aplicacions tinguen un aspecte professional sense molts esfor\u00e7os.</p> <p>En definitiva, farem \u00fas dels controls de Flutter des de Python.</p>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/","title":"2 - Comencem amb Flet","text":""},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#1-components-de-programari","title":"1. Components de programari","text":"<p>En el desenvolupament de circuits electr\u00f2nics, el grau de reutilitzaci\u00f3 de components \u00e9s molt alt, de manera que la construcci\u00f3 d'un circuit electr\u00f2nic es limita a la integraci\u00f3 i acoblament de diferents components comercials. Per exemple, una placa base cont\u00e9 components com resist\u00e8ncies, condensadors, rel\u00e9s, xips\u2026, que no han estat fabricats pel fabricant de la placa. Aix\u00ed que, hi ha fabricants especialitzats en components i altres en producte final. Aix\u00f2 permet reduir costos quant a temps i diners es refereix.</p> <p>En el desenvolupament de programari, la reutilitzaci\u00f3 de codi continua sent relativament escassa, per\u00f2 amb la utilitzaci\u00f3 de components aquest problema es redueix, reduint alhora el temps de desenvolupament, el cost econ\u00f2mic i els errors de programaci\u00f3.</p> <p>El desenvolupament de la interf\u00edcie d'una aplicaci\u00f3 es basa en la construcci\u00f3 d'una aplicaci\u00f3 a partir de components programari ja existents, anomenats normalment controls, limitant al m\u00ednim necessari el desenvolupament de codi nou. Podem imaginar-nos els components com les peces d'un Lego que podem connectar entre ells en una jerarquia d'arbre. Qualsevol aplicaci\u00f3 pot estar composta per m\u00faltiples components, i els components principals tenen components secundaris niats dins seu. </p> <p>Vam veure una llista dels principals controls d'usuari a la unitat anterior. En aquesta unitat posarem en pr\u00e0ctica l'\u00fas dels controls o components esmentats amb Flet.</p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#2-installacio-de-flet","title":"2. Instal\u00b7laci\u00f3 de Flet","text":"<p>Flet necessita com a m\u00ednim la versi\u00f3 3.7 de Python, aix\u00ed que el que recomanem \u00e9s crear un entorn virtual conda amb l'\u00faltima versi\u00f3 de Python. Una vegada creat i activat, instal\u00b7larem flet. </p>Bash<pre><code>$ conda create --name NOM python=3.11\n$ conda activate NOM\n$ conda install -c conda-forge flet\n</code></pre> \u00das de Flet amb WSL <p>Si executeu Flet amb WSL i obteniu l'error <code>error while loading shared libraries: libgstapp-1.0.so.0: cannot open shared object file: No such file or directory</code>, necessitareu instal\u00b7lar les llibreries GStreamer.</p> Bash<pre><code>$ sudo apt update\n$ sudo apt-get install libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#3-estructura-basica-dun-programa-flet","title":"3. Estructura b\u00e0sica d'un programa Flet","text":"<p>L'estructura m\u00ednima d'un programa Flet \u00e9s la seg\u00fcent:</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\n# add/update controls on Page\npass\nft.app(target=main)\n</code></pre> <p>Un programa t\u00edpic de Flet acaba amb una crida a flet.app() on comen\u00e7a l'aplicaci\u00f3 esperant noves sessions d'usuari. La funci\u00f3 main() \u00e9s el punt d'entrada de l'aplicaci\u00f3. Per a cada sessi\u00f3 d'usuari es crear\u00e0 un fil d'execuci\u00f3, que se li passar\u00e0 la inst\u00e0ncia de Page. </p> <p>Quan s'executa l'aplicaci\u00f3 Flet al navegador, s'inicia una nova sessi\u00f3 d'usuari per a cada pestanya o p\u00e0gina oberta. Quan s'executa com a aplicaci\u00f3 d'escriptori, nom\u00e9s es crea una sessi\u00f3.</p> <p>Page \u00e9s com un llen\u00e7 espec\u00edfic per a cada usuari, un estat visual d'una sessi\u00f3 d'usuari. Per crear una GUI, afegim i suprimim controls a una p\u00e0gina.</p> <p>Per defecte, l'aplicaci\u00f3 Flet s'inicia en una finestra del sistema operatiu natiu, per\u00f2, podem obrir-la en una finestra del navegador modificant la crida a flet.app() i indicant el port desitjat (aleatori en cas de no especificar-lo):</p> Python<pre><code>ft.app(target=main, view=\"web_browser\", port=8080)\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#31-hello-world","title":"3.1. Hello world!!","text":"<p>Els controls s\u00f3n els elements b\u00e0sics i principals per crear interf\u00edcies d'usuari a Flutter. Podeu mostrar informaci\u00f3, rebre informaci\u00f3 de l'usuari i organitzar altres controls de forma agrupada. </p> <p>Exemple</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"Hello world with Flet!!\"\npage.vertical_alignment = ft.MainAxisAlignment.CENTER\npage.horizontal_alignment = ft.CrossAxisAlignment.CENTER\ntext = ft.Text(value='Hello world with Flet!!', text_align=ft.TextAlign.LEFT)\npage.add(\ntext\n)\nft.app(target=main)\n</code></pre> <p>Si executem el codi anterior obtindrem una aplicaci\u00f3 com la seg\u00fcent:</p> <p></p> <p>Dins la finestra estar\u00e0 continguda tota la interf\u00edcie de l'usuari. En aquest cas, nom\u00e9s cont\u00e9 un component Text centrar tant verticalment com horitzontalment, sense interacci\u00f3 possible. Cada aplicaci\u00f3 gr\u00e0fica tindr\u00e0 almenys una finestra, per\u00f2 en podr\u00e0 tenir m\u00e9s. Aix\u00f2 ho veurem en seccions posteriors de la unitat. Normalment una aplicaci\u00f3 acabar\u00e0 en tancar la darrera de les finestres.</p>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#4-controls","title":"4. Controls","text":"<p>La interf\u00edcie d'usuari est\u00e0 feta de controls (tamb\u00e9 coneguts com widgets). Per fer visibles els controls per a un usuari, s'han d'afegir a un Page o dins d'altres controls que ja siguen visibles. La p\u00e0gina \u00e9s el control superior, i la resta de controls pengen d'aquesta arrel formant una estructura d'arbre.</p> <p>Els controls s\u00f3n classes de Python, simplement els instanciarem mitjan\u00e7ant els seus constructors amb els par\u00e0metres que ens convinga, per exemple:</p> Python<pre><code>text = ft.Text(value=\"Hello, world!\", color=\"green\")\n</code></pre> <p>Per mostrar el control anterior, l'afegim a la llista de controls de Page i fem una crida a page.update() per enviar els canvis de p\u00e0gina a un navegador o client d'escriptori:</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\nt = ft.Text(value=\"Hello, world!\", color=\"green\")\npage.controls.append(t)\npage.update()\nft.app(target=main)\n</code></pre> <p>Podem modificar les propietats del control i la interf\u00edcie d'usuari s'actualitzar\u00e0 en la seg\u00fcent crida a page.update():</p> Python<pre><code>t = ft.Text()\npage.add(t) # \u00e9s una abreviatura de page.controls.append(t) i page.update()\nfor i in range(10):\nt.value = f\"Pas n\u00famero {i}\"\npage.update()\ntime.sleep(1)\n</code></pre> Actualitzaci\u00f3 de controls <p>El m\u00e8tode Page.update() nom\u00e9s actualitzar\u00e0 els canvis fets des de l'\u00faltima crida al mateix m\u00e8tode. Podeu afegir, eliminar o modificar tants controls com vulgau abans de la seua crida, de forma que l'actualitzaci\u00f3 siga en lot.    </p> <p>Alguns controls s\u00f3n contenidor d'altres controls (com Page). Per exemple, el control Row permet organitzar els controls en fila:</p> Python<pre><code>page.add(\nft.Row(controls=[\nft.TextField(label=\"Your name\"),\nft.ElevatedButton(text=\"Send\")\n])\n)\n</code></pre> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#41-esdeveniments","title":"4.1. Esdeveniments","text":"<p>Cada interacci\u00f3 de l'usuari amb la interf\u00edcie, per exemple un clic de ratol\u00ed, un doble clic, l'\u00fas d'una tecla, etc. generar\u00e0 un esdeveniment. Aquest esdeveniment ser\u00e0 afegit a la cua d'esdeveniments (event queue) per ser gestionat.</p> <p>El bucle d'esdeveniments (event loop), que \u00e9s un bucle infinit, comprovar\u00e0 a cada iteraci\u00f3 si hi ha esdeveniments pendents de ser gestionats. En cas de ser aix\u00ed, l'esdeveniment ser\u00e0 gestionat pel gestor d'esdeveniments (event handler) que executar\u00e0 el vostre controlador. Quan aquest acaba, el control torna al bucle d'esdeveniments per esperar m\u00e9s esdeveniments. A\u00e7\u00f2 ja ho vam utilitzar al joc que desenvoluparem amb PyGame.</p> <p>Tot aquest proc\u00e9s complex, s'oculta al programados, que simplement haur\u00e0 de programar quina funcionalitat s'executa en produir-se cert esdeveniment. </p> Python<pre><code>import flet as ft\ndef main(page):\ndef add_clicked(e):\npage.add(ft.Checkbox(label=new_task.value))\nnew_task.value = \"\"\nnew_task.focus()\nnew_task.update()\nnew_task = ft.TextField(hint_text=\"Tasca pendent\", width=300)\npage.add(ft.Row([new_task, ft.ElevatedButton(\"Afegir\", on_click=add_clicked)]))\nft.app(target=main)\n</code></pre> Flet vs Flutter <p>Flet implementa un model d'interf\u00edcie d'usuari imperatiu on creeu \"manualment\" la interf\u00edcie d'usuari de l'aplicaci\u00f3 amb controls d'estat i despr\u00e9s la modifiqueu actualitzant les propietats de control. En canvi, Flutter implementa un model declaratiu on la interf\u00edcie d'usuari es reconstrueix autom\u00e0ticament amb els canvis de dades de l'aplicaci\u00f3. La gesti\u00f3 de l'estat de l'aplicaci\u00f3 a les aplicacions frontend modernes \u00e9s una tasca inherentment complexa i l'enfocament de la vella escola de Flet \u00e9s m\u00e9s atractiu i simple per als programadors sense experi\u00e8ncia en el frontend.</p> Propietat visible <p>Cada control t\u00e9 la propietat visible que \u00e9s True per defecte. La configuraci\u00f3 visible a False impedeix que el control (i tots els seus fills, si hi ha) es mostren. Els controls ocults no es poden enfocar, ni seleccionar amb un teclat o ratol\u00ed i no emeten cap esdeveniment.</p> Propietat disabled <p>Cada control t\u00e9 la propietat disabled que \u00e9s False per defecte, el control i tots els seus fills estan habilitats. S'utilitza principalment amb controls d'entrada de dades com els botons, TextField, Dropdown, Checkbox,... Tanmateix, disabled es podria establir en un control pare i el seu valor es propagar\u00e0 a tots els fills de forma recursiva.</p> Python<pre><code>first_name = ft.TextField()\nlast_name = ft.TextField()\ncolumn = ft.Column(controls=[\nfirst_name,\nlast_name\n])\ncolumn.disabled = True\npage.add(c)\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#42-referencies-a-controls","title":"4.2. Refer\u00e8ncies a Controls","text":"<p>Els controls Flet s\u00f3n objectes i per accedir a les seves propietats hem de mantenir les refer\u00e8ncies (variables) a aquests objectes. Quan s'afegeixen molts controls i controladors d'esdeveniments, es fa dif\u00edcil mantindre totes les definicions de control en un sol lloc, de manera que es dispersen pel cos del main(). Mirant els par\u00e0metres de page.add(), \u00e9s dif\u00edcil imaginar (sense mirar constantment a les definicions de variables) com seria la forma final de la interf\u00edcie (ah\u00ed pot ajudar molt el nom de la variable).</p> Python<pre><code>page.add(\nfirst_name,\nlast_name,\nft.ElevatedButton(\"Say hello!\", on_click=btn_click),\ngreetings,\n)\n</code></pre> <p>Flet proporciona una classe Ref que permet definir una refer\u00e8ncia al control, utilitzar aquesta refer\u00e8ncia als controladors d'esdeveniments i establir la refer\u00e8ncia a un control.</p> <p>Per definir una nova refer\u00e8ncia a un control:</p> Python<pre><code>first_name = ft.Ref[ft.TextField]()\n</code></pre> <p>Per accedir al control referenciat (desrefer\u00e8ncia del control), utilitzem la propietat Ref.current: </p>Python<pre><code>first_name.current.value = \"\"\n</code></pre> <p>Per utilitzar la refer\u00e8ncia al control:</p> Python<pre><code>page.add(\nft.TextField(ref=first_name, label=\"First name\", autofocus=True)\n)\n</code></pre> <p>Compareu els seg\u00fcents fragments de codi:</p> <p>Variables de control vs Refer\u00e8ncies a controls</p> <p>Sense Refs </p>Python<pre><code>import flet as ft\ndef main(page):\nfirst_name = ft.TextField(label=\"First name\", autofocus=True)\nlast_name = ft.TextField(label=\"Last name\")\ngreetings = ft.Column()\ndef btn_click(e):\ngreetings.controls.append(ft.Text(f\"Hello, {first_name.value} {last_name.value}!\"))\nfirst_name.value = \"\"\nlast_name.value = \"\"\npage.update()\nfirst_name.focus()\npage.add(\nfirst_name,\nlast_name,\nft.ElevatedButton(\"Say hello!\", on_click=btn_click),\ngreetings,\n)\nft.app(target=main)\n</code></pre> <p>Amb Refs </p>Python<pre><code>import flet as ft\ndef main(page):\nfirst_name = ft.Ref[ft.TextField]()\nlast_name = ft.Ref[ft.TextField]()\ngreetings = ft.Ref[ft.Column]()\ndef btn_click(e):\ngreetings.current.controls.append(\nft.Text(f\"Hello, {first_name.current.value} {last_name.current.value}!\")\n)\nfirst_name.current.value = \"\"\nlast_name.current.value = \"\"\npage.update()\nfirst_name.current.focus()\npage.add(\nft.TextField(ref=first_name, label=\"First name\", autofocus=True),\nft.TextField(ref=last_name, label=\"Last name\"),\nft.ElevatedButton(\"Say hello!\", on_click=btn_click),\nft.Column(ref=greetings),\n)\nft.app(target=main)\n</code></pre> <p>En este punt pots realitzar l'activitat 1.</p>"},{"location":"unitats/3-GUI-Flet/teoria/2%20-%20Flet-app/#5-principals-controls-en-formularis","title":"5. Principals controls en formularis","text":"<p>A la primera unitat vam veure un llistat de controls habituals juntament amb el seu \u00fas habitual. Farem un llistat amb els controls m\u00e9s habituals de Flet usats en formularis, juntament amb algun dels seus esdeveniments. Practicarem amb exemples i exercicis en altres apartats de la unitat. Per obtenir una llista completa i m\u00e9s informaci\u00f3 de cadascun, cal consultar la documentaci\u00f3 de Flet.</p> <p>Controls</p> QCheckBoxTextDropdownRadioGroupTextButtonTabsTextFieldSliderSwitchFilePicker Python<pre><code>import flet as ft\ndef main(page):\ndef checkbox_changed(e):\noutput_text.value = (\nf\"You have learned how to ski :  {todo_check.value}.\"\n)\npage.update()\noutput_text = ft.Text()\ntodo_check = ft.Checkbox(label=\"ToDo: Learn how to use ski\", value=False, on_change=checkbox_changed)\npage.add(todo_check, output_text)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"Hello world with Flet!!\"\npage.vertical_alignment = ft.MainAxisAlignment.CENTER\npage.horizontal_alignment = ft.CrossAxisAlignment.CENTER\ntext = ft.Text(value='Hello world with Flet!!', text_align=ft.TextAlign.LEFT)\npage.controls.append(\ntext\n)\npage.update()\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef button_clicked(e):\noutput_text.value = f\"Dropdown value is:  {color_dropdown.value}\"\npage.update()\noutput_text = ft.Text()\nsubmit_btn = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\ncolor_dropdown = ft.Dropdown(\nwidth=100,\noptions=[\nft.dropdown.Option(\"Red\"),\nft.dropdown.Option(\"Green\"),\nft.dropdown.Option(\"Blue\"),\n],\n)\npage.add(color_dropdown, submit_btn, output_text)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page):\ndef button_clicked(e):\nt.value = f\"Your favorite color is:  {cg.value}\"\npage.update()\nt = ft.Text()\nb = ft.ElevatedButton(text='Submit', on_click=button_clicked)\ncg = ft.RadioGroup(content=ft.Column([\nft.Radio(value=\"red\", label=\"Red\"),\nft.Radio(value=\"green\", label=\"Green\"),\nft.Radio(value=\"blue\", label=\"Blue\")]))\npage.add(ft.Text(\"Select your favorite color:\"), cg, b, t)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"Text button with 'click' event\"\ndef button_clicked(e):\nb.data += 1\nt.value = f\"Button clicked {b.data} time(s)\"\npage.update()\nb = ft.TextButton(\"Button with 'click' event\", on_click=button_clicked, data=0)\nt = ft.Text()\npage.add(b, t)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\nt = ft.Tabs(\nselected_index=1,\nanimation_duration=300,\ntabs=[\nft.Tab(\ntext=\"Tab 1\",\ncontent=ft.Container(\ncontent=ft.Text(\"This is Tab 1\"), alignment=ft.alignment.center\n),\n),\nft.Tab(\ntab_content=ft.Icon(ft.icons.SEARCH),\ncontent=ft.Text(\"This is Tab 2\"),\n),\nft.Tab(\ntext=\"Tab 3\",\nicon=ft.icons.SETTINGS,\ncontent=ft.Text(\"This is Tab 3\"),\n),\n],\nexpand=1,\n)\npage.add(t)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef button_clicked(e):\nt.value = f\"Textboxes values are:  '{tb1.value}', '{tb2.value}', '{tb3.value}', '{tb4.value}', '{tb5.value}'.\"\npage.update()\nt = ft.Text()\ntb1 = ft.TextField(label=\"Standard\")\ntb2 = ft.TextField(label=\"Disabled\", disabled=True, value=\"First name\")\ntb3 = ft.TextField(label=\"Read-only\", read_only=True, value=\"Last name\")\ntb4 = ft.TextField(label=\"With placeholder\", hint_text=\"Please enter text here\")\ntb5 = ft.TextField(label=\"With an icon\", icon=ft.icons.EMOJI_EMOTIONS)\nb = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\npage.add(tb1, tb2, tb3, tb4, tb5, b, t)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page):\ndef slider_changed(e):\nt.value = f\"Slider changed to {e.control.value}\"\npage.update()\nt = ft.Text()\npage.add(\nft.Text(\"Slider with 'on_change' event:\"),\nft.Slider(min=0, max=100, divisions=10, label=\"{value}%\", on_change=slider_changed), t)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page):\ndef button_clicked(e):\nt.value = (\nf\"Switch values are:  {c1.value}, {c2.value}, {c3.value}, {c4.value}.\"\n)\npage.update()\nt = ft.Text()\nc1 = ft.Switch(label=\"Unchecked switch\", value=False)\nc2 = ft.Switch(label=\"Checked switch\", value=True)\nc3 = ft.Switch(label=\"Disabled switch\", disabled=True)\nc4 = ft.Switch(\nlabel=\"Switch with rendered label_position='left'\", label_position=ft.LabelPosition.LEFT\n)\nb = ft.ElevatedButton(text=\"Submit\", on_click=button_clicked)\npage.add(c1, c2, c3, c4, b, t)\nft.app(target=main)\n</code></pre> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef pick_files_result(e: ft.FilePickerResultEvent):\nselected_files.value = (\n\", \".join(map(lambda f: f.name, e.files)) if e.files else \"Cancelled!\"\n)\nselected_files.update()\npick_files_dialog = ft.FilePicker(on_result=pick_files_result)\nselected_files = ft.Text()\npage.overlay.append(pick_files_dialog)\npage.add(\nft.Row(\n[\nft.ElevatedButton(\n\"Pick files\",\nicon=ft.icons.UPLOAD_FILE,\non_click=lambda _: pick_files_dialog.pick_files(\nallow_multiple=True\n),\n),\nselected_files,\n]\n)\n)\nft.app(target=main)\n</code></pre> <p>En este punt pots realitzar l'activitat 2.</p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/","title":"3 - Contenidors de components. Layouts","text":""},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#1-layouts","title":"1. Layouts","text":"<p>Els controls tipus layout s\u00f3n controls especials que servixen per a contindre i organitzar la resta de controls a la interf\u00edcie. Veurem els principals controls tipus layout a esta secci\u00f3.</p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#2-container","title":"2. Container","text":"<p>El contenidor permet decorar un control amb color de fons i vora i posicionar-lo amb farciment, marge i alineaci\u00f3. Tamb\u00e9 permet decorar-lo amb gradients radials o linials, animar-lo,...</p> <p>Exemple de Container</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"Containers - clickable and not\"\npage.vertical_alignment = ft.MainAxisAlignment.CENTER\npage.horizontal_alignment = ft.CrossAxisAlignment.CENTER\npage.add(\nft.Row(\n[\nft.Container(\ncontent=ft.Text(\"Non clickable\"),\nmargin=10,\npadding=10,\nalignment=ft.alignment.center,\nbgcolor=ft.colors.AMBER,\nwidth=150,\nheight=150,\nborder_radius=10,\n),\nft.Container(\ncontent=ft.Text(\"Clickable without Ink\"),\nmargin=10,\npadding=10,\nalignment=ft.alignment.center,\nbgcolor=ft.colors.GREEN_200,\nwidth=150,\nheight=150,\nborder_radius=10,\non_click=lambda e: print(\"Clickable without Ink clicked!\"),\n),\nft.Container(\ncontent=ft.Text(\"Clickable with Ink\"),\nmargin=10,\npadding=10,\nalignment=ft.alignment.center,\nbgcolor=ft.colors.CYAN_200,\nwidth=150,\nheight=150,\nborder_radius=10,\nink=True,\non_click=lambda e: print(\"Clickable with Ink clicked!\"),\n),\nft.Container(\ncontent=ft.Text(\"Clickable transparent with Ink\"),\nmargin=10,\npadding=10,\nalignment=ft.alignment.center,\nwidth=150,\nheight=150,\nborder_radius=10,\nink=True,\non_click=lambda e: print(\"Clickable transparent with Ink clicked!\"),\n),\n],\nalignment=ft.MainAxisAlignment.CENTER,\n),\n)\nft.app(target=main)\n</code></pre> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#3-row","title":"3. Row","text":"<p>Un control que mostra els seus fills en una matriu horitzontal. </p> <p>Amb les seues propietats es poden modificar la forma en que es col\u00b7loquen, l'espai entre els components,...</p> <p>Espai entre controls</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef items(count):\nitems = []\nfor i in range(1, count + 1):\nitems.append(\nft.Container(\ncontent=ft.Text(value=str(i)),\nalignment=ft.alignment.center,\nwidth=50,\nheight=50,\nbgcolor=ft.colors.AMBER,\nborder_radius=ft.border_radius.all(5),\n)\n)\nreturn items\ndef gap_slider_change(e):\nrow.spacing = int(e.control.value)\nrow.update()\ngap_slider = ft.Slider(\nmin=0,\nmax=50,\ndivisions=50,\nvalue=0,\nlabel=\"{value}\",\non_change=gap_slider_change,\n)\nrow = ft.Row(spacing=0, controls=items(10))\npage.add(ft.Column([ ft.Text(\"Spacing between items\"), gap_slider]), row)\nft.app(target=main)\n</code></pre> <p></p> <p>Ampl\u00e0ria de la fila</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef items(count):\nitems = []\nfor i in range(1, count + 1):\nitems.append(\nft.Container(\ncontent=ft.Text(value=str(i)),\nalignment=ft.alignment.center,\nwidth=50,\nheight=50,\nbgcolor=ft.colors.AMBER,\nborder_radius=ft.border_radius.all(5),\n)\n)\nreturn items\ndef slider_change(e):\nrow.width = float(e.control.value)\nrow.update()\nwidth_slider = ft.Slider(\nmin=0,\nmax=page.window_width,\ndivisions=20,\nvalue=page.window_width,\nlabel=\"{value}\",\non_change=slider_change,\n)\nrow = ft.Row(\nwrap=True,\nspacing=10,\nrun_spacing=10,\ncontrols=items(30),\nwidth=page.window_width,\n)\npage.add(\nft.Column(\n[\nft.Text(\n\"Change the row width to see how child items wrap onto multiple rows:\"\n),\nwidth_slider,\n]\n),\nrow,\n)\nft.app(target=main)\n</code></pre> <p></p> <p>Aliniaci\u00f3 horitzontal</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef items(count):\nitems = []\nfor i in range(1, count + 1):\nitems.append(\nft.Container(\ncontent=ft.Text(value=str(i)),\nalignment=ft.alignment.center,\nwidth=50,\nheight=50,\nbgcolor=ft.colors.AMBER_500,\n)\n)\nreturn items\ndef row_with_alignment(align: ft.MainAxisAlignment):\nreturn ft.Column(\n[\nft.Text(str(align), size=16),\nft.Container(\ncontent=ft.Row(items(3), alignment=align),\nbgcolor=ft.colors.AMBER_100,\n),\n]\n)\npage.add(\nrow_with_alignment(ft.MainAxisAlignment.START),\nrow_with_alignment(ft.MainAxisAlignment.CENTER),\nrow_with_alignment(ft.MainAxisAlignment.END),\nrow_with_alignment(ft.MainAxisAlignment.SPACE_BETWEEN),\nrow_with_alignment(ft.MainAxisAlignment.SPACE_AROUND),\nrow_with_alignment(ft.MainAxisAlignment.SPACE_EVENLY),\n)\nft.app(target=main)\n</code></pre> <p></p> <p><code>expand</code> igual a True</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\nrow = ft.Row([\nft.TextField(hint_text=\"Enter your name\", expand=True),\nft.ElevatedButton(text=\"Join chat\")\n])\npage.add(\nrow\n)\nft.app(target=main)\n</code></pre> <p></p> <p>Expanci\u00f3 proporcional</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\nrow = ft.Row([\nft.Container(bgcolor=ft.colors.YELLOW, expand=2, content=ft.Text(\n\"expand = 2\", text_align=ft.TextAlign.CENTER)),\nft.Container(bgcolor=ft.colors.RED, expand=3, content=ft.Text(\n\"expand = 3\", text_align=ft.TextAlign.CENTER)),\nft.Container(bgcolor=ft.colors.PURPLE, expand=1, content=ft.Text(\n\"expand = 1\", text_align=ft.TextAlign.CENTER))\n])\npage.add(\nrow\n)\nft.app(target=main)\n</code></pre> <p></p> <p>M\u00e9s informaci\u00f3</p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#4-column","title":"4. Column","text":"<p>Un control que mostra els seus fills en una matriu vertical. El funcionament \u00e9s molt similar a Row, on el width de Row ser\u00e0 el height de Column.</p> <p>Scroll infinit</p> <p></p>Python<pre><code>import threading\nimport flet as ft\nclass State:\ni = 0\ns = State()\nsem = threading.Semaphore()\ndef main(page: ft.Page):\ndef on_scroll(e: ft.OnScrollEvent):\nif e.pixels &gt;= e.max_scroll_extent - 100:\nif sem.acquire(blocking=False):\ntry:\nfor i in range(0, 10):\ncl.controls.append(ft.Text(f\"Text line {s.i}\", key=str(s.i)))\ns.i += 1\ncl.update()\nfinally:\nsem.release()\ncl = ft.Column(\nspacing=10,\nheight=200,\nwidth=200,\nscroll=ft.ScrollMode.ALWAYS,\non_scroll_interval=0,\non_scroll=on_scroll,\n)\nfor i in range(0, 50):\ncl.controls.append(ft.Text(f\"Text line {s.i}\", key=str(s.i)))\ns.i += 1\npage.add(ft.Container(cl, border=ft.border.all(1)))\nft.app(main)\n</code></pre> <p>M\u00e9s informaci\u00f3</p> <p>En este punt pots realitzar l'activitat 3. </p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#5-stack","title":"5. Stack","text":"<p>Un control que situa els seus fills uns sobre els altres, apilats.</p> <p>Aquest control \u00e9s \u00fatil si volem superposar diversos fills d'una manera senzilla, per exemple, tenint text i una imatge.</p> <p>Stack tamb\u00e9 \u00e9s \u00fatil si voleu implementar animacions impl\u00edcites que requereixen con\u00e8ixer la posici\u00f3 absoluta d'un valor objectiu.</p> <p>Layout apilat</p> <p></p>Python<pre><code>import flet as ft\ndef main(page: ft.Page):\nst = ft.Stack(\n[\nft.Image(\nsrc=f\"https://picsum.photos/300/300\",\nwidth=300,\nheight=300,\nfit=ft.ImageFit.CONTAIN,\n),\nft.Row(\n[\nft.Text(\n\"Image title\",\ncolor=\"white\",\nsize=40,\nweight=\"bold\",\nopacity=0.5,\n)\n],\nalignment=ft.MainAxisAlignment.CENTER,\n),\n],\nwidth=300,\nheight=300,\n)\npage.add(st)\nft.app(target=main)\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#6-listview","title":"6. ListView","text":"<p>ListView \u00e9s el control de despla\u00e7ament m\u00e9s utilitzat. Mostra els seus fills un darrere l'altre en la direcci\u00f3 de despla\u00e7ament.</p> <p>Exemple de ListView</p> <p></p>Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"ListView\"\nlistview = ft.ListView(expand=1, spacing=10, padding=20, auto_scroll=False)\npage.add(listview)\nfor i in range(0, 60):\nlistview.controls.append(ft.Text(f\"Element {i}\"))\npage.update()\nft.app(target=main)\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#7-listtile","title":"7. ListTile","text":"<p>Una \u00fanica fila d'alturaa fixa que normalment cont\u00e9 text, aix\u00ed com una icona inicial o final.</p> <p>ListTile</p> <p></p>Python<pre><code>import flet as ft\ndef main(page):\npage.title = \"ListTile Examples\"\npage.add(\nft.Card(\ncontent=ft.Container(\nwidth=500,\ncontent=ft.Column(\n[\nft.ListTile(\ntitle=ft.Text(\"One-line list tile\"),\n),\nft.ListTile(title=ft.Text(\"One-line dense list tile\"), dense=True),\nft.ListTile(\nleading=ft.Icon(ft.icons.SETTINGS),\ntitle=ft.Text(\"One-line selected list tile\"),\nselected=True,\n),\nft.ListTile(\nleading=ft.Image(src=\"/icons/icon-192.png\", fit=\"contain\"),\ntitle=ft.Text(\"One-line with leading control\"),\n),\nft.ListTile(\ntitle=ft.Text(\"One-line with trailing control\"),\ntrailing=ft.PopupMenuButton(\nicon=ft.icons.MORE_VERT,\nitems=[\nft.PopupMenuItem(text=\"Item 1\"),\nft.PopupMenuItem(text=\"Item 2\"),\n],\n),\n),\nft.ListTile(\nleading=ft.Icon(ft.icons.ALBUM),\ntitle=ft.Text(\"One-line with leading and trailing controls\"),\ntrailing=ft.PopupMenuButton(\nicon=ft.icons.MORE_VERT,\nitems=[\nft.PopupMenuItem(text=\"Item 1\"),\nft.PopupMenuItem(text=\"Item 2\"),\n],\n),\n),\nft.ListTile(\nleading=ft.Icon(ft.icons.SNOOZE),\ntitle=ft.Text(\"Two-line with leading and trailing controls\"),\nsubtitle=ft.Text(\"Here is a second title.\"),\ntrailing=ft.PopupMenuButton(\nicon=ft.icons.MORE_VERT,\nitems=[\nft.PopupMenuItem(text=\"Item 1\"),\nft.PopupMenuItem(text=\"Item 2\"),\n],\n),\n),\n],\nspacing=0,\n),\npadding=ft.padding.symmetric(vertical=10),\n)\n)\n)\nft.app(target=main)\n</code></pre> List Tile"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#8-gridview","title":"8. GridView","text":"<p>Es tracta d'un layout en forma de graella.</p> <p>Informaci\u00f3</p> <p>GridView \u00e9s molt eficient per a llistes grans (milers d'elements). Pot substituir el niuament de layouts tipus Row i Column.</p> <p>Exemple de GridView</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"GridView Example\"\npage.theme_mode = ft.ThemeMode.DARK\npage.padding = 50\npage.update()\nimages = ft.GridView(\nexpand=1,\nruns_count=5,\nmax_extent=150,\nchild_aspect_ratio=1.0,\nspacing=5,\nrun_spacing=5,\n)\npage.add(images)\nfor i in range(0, 60):\nimages.controls.append(\nft.Image(\nsrc=f\"https://picsum.photos/150/150?{i}\",\nfit=ft.ImageFit.NONE,\nrepeat=ft.ImageRepeat.NO_REPEAT,\nborder_radius=ft.border_radius.all(10),\n)\n)\npage.update()\nft.app(target=main)\n</code></pre> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#9-responsive-row","title":"9. Responsive Row","text":"<p>ResponsiveRow pren la idea del disseny en quadr\u00edcula de Bootstrap. Permet alinear els controls en columnes virtuals. Per defecte, una quadr\u00edcula virtual t\u00e9 12 columnes, per\u00f2 que es poden personalitzar amb la propietat ResponsiveRow.columns.</p> <p>De manera similar a  la propietat <code>expand</code>, cada control ara t\u00e9 la propietat <code>col</code> que permet especificar quantes columnes ha d'abastar un control. Per exemple, per fer un disseny format per dues columnes que abasten 6 columnes virtuals cadascuna:</p> Python<pre><code>ft.ResponsiveRow([\nft.Column(col=6, controls=[ft.Text(\"Column 1\")]),\nft.Column(col=6, controls=[ft.Text(\"Column 2\")])\n])\n</code></pre> <p><code>ResponsiveRow</code> \u00e9s responsiu perqu\u00e8 pot adaptar la mida dels seus fills a una mida de pantalla (p\u00e0gina, finestra) din\u00e0mica o canviant. La propietat <code>col</code> de l'exemple anterior \u00e9s un nombre constant, la qual cosa significa que el control ocupar\u00e0 6 columnes per a qualsevol mida de pantalla.</p> <p>Si als descendents en l'arbre de controls no tenen especificada la propietat col, ocuparan el nombre m\u00e0xim de columnes.</p> <p>col es pot configurar per tenir un valor diferent per a \"punts d'interrupci\u00f3\" espec\u00edfics. Els punts d'interrupci\u00f3 s'anomenen intervals de dimensions:</p> <p></p> Punt d'interrupci\u00f3 Dimensi\u00f3 xs &lt;576 p\u00edxels sm \u2265576px md \u2265768px lg \u2265992px xl \u22651200px xxl \u22651400px <p></p> <p>Exemple amb <code>ResponsiveRow</code></p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef page_resize(e):\nif page.width &lt; 576:\nsize = \"XS\"\nelif page.width &lt; 768:\nsize = \"SM\"\nelif page.width &lt; 992:\nsize = \"MD\"\nelif page.width &lt; 1200:\nsize = \"LG\"\nelif page.width &lt; 1400:\nsize = \"XL\"\nelse:\nsize = \"XXL\"\npw.value = f\"Tamany de pantalla: {size} -&gt; {page.width} px\"\npw.update()\npage.on_resize = page_resize\npw = ft.Text(bottom=50, right=50, style=\"displaySmall\")\npage.overlay.append(pw)\npage.add(\nft.ResponsiveRow(\n[\nft.Container(\nft.Text(\"Column 1\"),\npadding=5,\nbgcolor=ft.colors.YELLOW,\ncol={\"sm\": 6, \"md\": 4, \"xl\": 2},\n),\nft.Container(\nft.Text(\"Column 2\"),\npadding=5,\nbgcolor=ft.colors.GREEN,\ncol={\"sm\": 6, \"md\": 4, \"xl\": 2},\n),\nft.Container(\nft.Text(\"Column 3\"),\npadding=5,\nbgcolor=ft.colors.BLUE,\ncol={\"sm\": 6, \"md\": 4, \"xl\": 2},\n),\nft.Container(\nft.Text(\"Column 4\"),\npadding=5,\nbgcolor=ft.colors.PINK_300,\ncol={\"sm\": 6, \"md\": 4, \"xl\": 2},\n),\n],\n),\nft.ResponsiveRow(\n[\nft.TextField(label=\"TextField 1\", col={\"md\": 4}),\nft.TextField(label=\"TextField 2\", col={\"md\": 4}),\nft.TextField(label=\"TextField 3\", col={\"md\": 4}),\n],\nrun_spacing={\"xs\": 12},\n),\n)\npage_resize(None)\nft.app(target=main)\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#10-datatable","title":"10. DataTable","text":"<p>Una taula de dades, \u00e9s un control per a mostrar informaci\u00f3 de forma ordenada.</p> <p>Exemple de taula</p> <p></p>Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.add(\nft.DataTable(\ncolumns=[\nft.DataColumn(ft.Text(\"First name\")),\nft.DataColumn(ft.Text(\"Last name\")),\nft.DataColumn(ft.Text(\"Age\"), numeric=True),\n],\nrows=[\nft.DataRow(\ncells=[\nft.DataCell(ft.Text(\"John\")),\nft.DataCell(ft.Text(\"Smith\")),\nft.DataCell(ft.Text(\"43\")),\n],\n),\nft.DataRow(\ncells=[\nft.DataCell(ft.Text(\"Jack\")),\nft.DataCell(ft.Text(\"Brown\")),\nft.DataCell(ft.Text(\"19\")),\n],\n),\nft.DataRow(\ncells=[\nft.DataCell(ft.Text(\"Alice\")),\nft.DataCell(ft.Text(\"Wong\")),\nft.DataCell(ft.Text(\"25\")),\n],\n),\n],\n),\n)\nft.app(target=main)\n</code></pre> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#11-tabs","title":"11. Tabs","text":"<p>El control <code>Tab</code> s'utilitza per navegar per categories de continguts diferents d'acc\u00e9s freq\u00fcent. Les pestanyes permeten la navegaci\u00f3 entre dues o m\u00e9s visualitzacions de contingut i es basen en les cap\u00e7aleres de text per articular les diferents seccions de contingut.</p> <p>Exemple amb Tabs</p> <p></p>Python<pre><code>import flet as ft\ndef main(page: ft.Page):\nt = ft.Tabs(\nselected_index=1,\nanimation_duration=300,\ntabs=[\nft.Tab(\ntext=\"Tab 1\",\ncontent=ft.Container(\ncontent=ft.Text(\"This is Tab 1\"), alignment=ft.alignment.center\n),\n),\nft.Tab(\ntab_content=ft.Icon(ft.icons.SEARCH),\ncontent=ft.Text(\"This is Tab 2\"),\n),\nft.Tab(\ntext=\"Tab 3\",\nicon=ft.icons.SETTINGS,\ncontent=ft.Text(\"This is Tab 3\"),\n),\n],\nexpand=1,\n)\npage.add(t)\nft.app(target=main)\n</code></pre> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#12-card","title":"12. Card","text":"<p>El control de targeta \u00e9s un panell amb vore lleugerament arrodonides i una ombra d'elevaci\u00f3.</p> <p>Exemple de <code>card</code></p> Python<pre><code>import flet as ft\ndef main(page):\npage.title = \"Card Example\"\npage.add(\nft.Card(\ncontent=ft.Container(\ncontent=ft.Column(\n[\nft.ListTile(\nleading=ft.Icon(ft.icons.ALBUM),\ntitle=ft.Text(\"The Enchanted Nightingale\"),\nsubtitle=ft.Text(\n\"Music by Julie Gable. Lyrics by Sidney Stein.\"\n),\n),\nft.Row(\n[ft.TextButton(\"Buy tickets\"), ft.TextButton(\"Listen\")],\nalignment=ft.MainAxisAlignment.END,\n),\n]\n),\nwidth=400,\npadding=10,\n)\n)\n)\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/3%20-%20Layouts/#13-divisor-horitzontal-o-vertical","title":"13. Divisor (horitzontal o vertical)","text":"<p>Una l\u00ednia horitzontal fina, amb encoixinat a banda i banda.</p> <p>Poden ser: - Horitzontals: <code>Divider</code> - Verticals: <code>VerticalDivider</code></p> <p>Exemple de <code>Divisor</code></p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.add(\nft.Column(\n[\nft.Container(\nbgcolor=ft.colors.AMBER,\nalignment=ft.alignment.center,\nexpand=True,\n),\nft.Divider(),\nft.Container(bgcolor=ft.colors.PINK, alignment=ft.alignment.center, expand=True),\nft.Divider(height=1, color=\"white\"),\nft.Container(\nbgcolor=ft.colors.BLUE_300,\nalignment=ft.alignment.center,\nexpand=True,\n),\nft.Divider(height=9, thickness=3),\nft.Container(\nbgcolor=ft.colors.DEEP_PURPLE_200,\nalignment=ft.alignment.center,\nexpand=True,\n),\n],\nspacing=0,\nexpand=True,\n),\n)\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/","title":"4 - Navegaci\u00f3","text":""},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#1-navegacio-i-enrutament","title":"1. Navegaci\u00f3 i enrutament.","text":"<p>La navegaci\u00f3 i l'enrutament \u00e9s una caracter\u00edstica essencial de les aplicacions de p\u00e0gina \u00fanica (SPA) que permet organitzar la interf\u00edcie d'usuari de l'aplicaci\u00f3 en p\u00e0gines virtuals (views) i navegar entre elles mentre que l'URL de l'aplicaci\u00f3 reflecteix l'estat actual de l'aplicaci\u00f3.</p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#11-route-de-page","title":"1.1. <code>Route</code> de Page","text":"<p>La ruta de l'aplicaci\u00f3 per defecte, si l'usuari no la redefineix, \u00e9s /. Totes les rutes comencen per /, per exemple /store, /authors/1/books/2. Es pot obtenir llegint la propietat <code>page.route</code>.</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.add(ft.Text(f\"Ruta inicial: {page.route}\"))\nft.app(target=main, view='web_browser', port=8080)\n</code></pre> <p>Executeu l'anterior codi a un navegador. Obriu una nova pestanya o finestra i afegiu a la URL del navegador la paraula prova, per exemple: http://127.0.0.1:8080/prova. </p> <p>El resultat ara ser\u00e0 <code>Ruta inicial: /prova</code></p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#12-lesdeveniment-on_route_change","title":"1.2. L'esdeveniment <code>on_route_change</code>","text":"<p>Cada vegada que es canvia la ruta a l'URL, ja siga editant l'URL o navegant per l'historial del navegador amb els botons Enrere/Endavant, Flet crida al controlador de l'esdeveniment  <code>page.on_route_change</code>:</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.add(ft.Text(f\"Ruta inicial: {page.route}\"))\ndef route_change(e: ft.RouteChangeEvent):\npage.add(ft.Text(f\"Nova ruta: {e.route}\"))\npage.on_route_change = route_change\npage.update()\nft.app(target=main, view='web_browser', port=8080)\n</code></pre> <p>La ruta tamb\u00e9 es pot canviar per codi, assignant la propietat <code>page.route</code>.</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.add(ft.Text(f\"Ruta inicial: {page.route}\"))\ndef route_change(e: ft.RouteChangeEvent):\npage.add(ft.Text(f\"Nova ruta: {e.route}\"))\ndef go_store(e):\npage.route = \"/store\"\npage.update()\npage.on_route_change = route_change\npage.add(ft.ElevatedButton(\"Go to Store\", on_click=go_store))\nft.app(target=main, view='web_browser', port=8080)\n</code></pre> <p>Fem clic al bot\u00f3 \"Anar a la tenda\" i veurem que l'URL de l'aplicaci\u00f3 canvia i s'introdueix un element nou a l'historial del navegador. Ara tamb\u00e9 podem utilitzar el bot\u00f3 \"Enrere\" del navegador per navegar a una ruta anterior.</p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#2-page-views-vistes","title":"2. Page views (vistes)","text":"<p>Ara <code>Page</code> no \u00e9s nom\u00e9s una p\u00e0gina \u00fanica, sin\u00f3 un contenidor per a les diferents vistes, apilades en capes una sobre l'altra com un sandvitx:</p> <p></p> <p></p> <p></p> <p>L'historial de navegaci\u00f3 \u00e9s una llista de vistes. <code>Page</code> t\u00e9 la propietat <code>page.views</code> per accedir a aquesta llista.</p> <p>L'\u00faltima vista de la llista \u00e9s la que es mostra actualment, i la llista de visualitzacions ha de tindre almenys un element (vista arrel).</p> <p>Per simular una transici\u00f3 entre p\u00e0gines canviem <code>page.route</code> i afegim una nova vista al final de la llista <code>page.views</code>.</p> <p>Obrim l'\u00faltima vista de la col\u00b7lecci\u00f3 i canviem la ruta a una anterior al controlador <code>page.on_view_pop</code> per tornar enrere.</p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#21-navegacio-entre-vistes-control-appbar","title":"2.1. Navegaci\u00f3 entre vistes. Control AppBar","text":"<p>Per construir una navegaci\u00f3 fiable, ha d'haver un \u00fanic lloc al programa que construisca la llista de vistes en funci\u00f3 de la ruta actual. En altres paraules, la pila d'historial de navegaci\u00f3 (representada per la llista de visualitzacions) ha de ser una funci\u00f3 d'una ruta. El lloc adequat per fer-ho ser\u00e0 el controlador d'esdeveniments <code>page.on_route_change</code>.</p> <p>Navegaci\u00f3 entre dues rutes amb diferent vista</p> Python<pre><code>'''Exemple de navegaci\u00f3 entre vistes de Flet'''\nimport flet as ft\ndef main(page: ft.Page):\n'''Funci\u00f3 principal'''\npage.title = \"Routes Example\"\ndef route_change(route):\npage.views.clear()\npage.views.append(\nft.View(\n\"/\",\n[\nft.AppBar(title=ft.Text(\"Flet app\"), bgcolor=ft.colors.SURFACE_VARIANT),\nft.ElevatedButton(\"Visit Store\", on_click=lambda _: page.go(\"/store\")),\n],\n)\n)\nif page.route == \"/store\":\npage.views.append(\nft.View(\n\"/store\",\n[\nft.AppBar(title=ft.Text(\"Store\"), bgcolor=ft.colors.SURFACE_VARIANT),\nft.ElevatedButton(\"Go Home\", on_click=lambda _: page.go(\"/\")),\n],\n)\n)\npage.update()\ndef view_pop(view):\npage.views.pop()\ntop_view = page.views[-1]\npage.go(top_view.route)\npage.on_route_change = route_change\npage.on_view_pop = view_pop\npage.go(page.route)\nft.app(target=main, view='web_browser', port=8080)\n</code></pre> <p>Proveu a navegar entre les p\u00e0gines mitjan\u00e7ant els botons <code>Visit Store</code> i <code>Go home</code>. Utilitzant els botons del navegador Enrere/Endavant i canviant manualment la ruta a l'URL funciona igualment.</p> <p><code>Page.go(route)</code></p> <p>Per navegar entre les p\u00e0gines hem utilitzat <code>page.go(route)</code>, un m\u00e8tode que ens ajuda actualitzar <code>page.route</code>, crida autom\u00e0ticament al controlador d'esdeveniments <code>page.on_route_change</code> per a actualitzar les vistes i, finalment, crida a <code>page.update()</code>.</p> <p>El controlador <code>page.on_view_pop</code></p> <p>Observeu l'\u00fas del controlador d'esdeveniments <code>page.on_view_pop</code>. S'activa quan l'usuari fa clic al bot\u00f3 autom\u00e0tic <code>Enrere</code> al control AppBar. Al controlador, eliminem l'\u00faltim element de la col\u00b7lecci\u00f3 de vistes i naveguem fins a l'arrel de la vista.</p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#3-plantilla-de-rutes-templateroute","title":"3. Plantilla de rutes (TemplateRoute)","text":"<p>La classe <code>TemplateRoute</code> \u00e9s una classe d'utilitat basada en la biblioteca <code>repath</code> que permet fer coincidir rutes semblants a ExpressJS i analitzar els seus par\u00e0metres, per exemple /account/:account_id/orders/:order_id.</p> <p>TemplateRoute s'integra molt b\u00e9 amb l'esdeveniment de canvi de ruta:</p> Python<pre><code>    def route_change(self, e):\ntroute = TemplateRoute(self.page.route)\nif troute.match(\"/\"):\nself.page.go(\"/notes\")\nelif troute.match(\"/notes/:id\"):\nif int(troute.id) &gt; len(self.get_notes()):\nself.page.go(\"/\")\nreturn\nself.layout.set_note_view(int(troute.id))\nelif troute.match(\"/notes\"):\nself.layout.set_all_notes_view()\nself.page.update()\n</code></pre> <p>A l'anterior codi, depenent de la ruta a la que es vol anar, es construiria una vista o una altra. Si anem a l'arrel o a <code>/notes</code>, veurem la vista de totes les notes, en canvi, si anem a la ruta <code>/notes/2</code> mostrar\u00e0 la segona nota.</p> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#4-controls-per-a-navegacio-i-accions","title":"4. Controls per a navegaci\u00f3 i accions","text":""},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#41-barra-deines-appbar","title":"4.1. Barra d'eines. AppBar.","text":"<p>\u00c9s una barra d'eines que ens facilita l'acc\u00e9s a les diferents opcions de l'aplicaci\u00f3. Apareix en la part superior de l'aplicaci\u00f3.</p> <p>Algunes de les seues propietats principals s\u00f3n:</p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#411-action","title":"4.1.1. action","text":"<p>Una llista de Controls per mostrar en una fila despr\u00e9s del control del t\u00edtol.</p> <p>Normalment, aquests controls solen ser IconButtons i representen operacions comunes. Per a operacions menys habituals, es sol utilitzar un PopupMenuButton en la \u00faltima de les posicions.</p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#412-leading","title":"4.1.2. leading","text":"<p>Control per mostrar abans del t\u00edtol de la barra. Normalment, el control \u00e9s una Icona un IconButton.</p> <p>Exemple</p> <p></p>Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef check_item_clicked(e):\ne.control.checked = not e.control.checked\npage.update()\npage.appbar = ft.AppBar(\nleading=ft.Icon(ft.icons.PALETTE),\nleading_width=40,\ntitle=ft.Text(\"AppBar Example\"),\ncenter_title=False,\nbgcolor=ft.colors.SURFACE_VARIANT,\nactions=[\nft.IconButton(ft.icons.WB_SUNNY_OUTLINED),\nft.IconButton(ft.icons.FILTER_3),\nft.PopupMenuButton(\nitems=[\nft.PopupMenuItem(text=\"Item 1\"),\nft.PopupMenuItem(),  # divider\nft.PopupMenuItem(\ntext=\"Checked item\", checked=False, on_click=check_item_clicked\n),\n]\n),\n],\n)\npage.add(ft.Text(\"Body!\"))\nft.app(target=main)\n</code></pre> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#42-navigationrail","title":"4.2. NavigationRail","text":"<p>Un control que est\u00e0 pensat per mostrar-se a l'esquerra o a la dreta d'una aplicaci\u00f3 per navegar entre un nombre redu\u00eft de vistes, normalment entre tres i cinc.</p> <p>Exemple</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\nrail = ft.NavigationRail(\nselected_index=0,\nlabel_type=ft.NavigationRailLabelType.ALL,\n# extended=True,\nmin_width=100,\nmin_extended_width=400,\nleading=ft.FloatingActionButton(icon=ft.icons.CREATE, text=\"Add\"),\ngroup_alignment=-0.9,\ndestinations=[\nft.NavigationRailDestination(\nicon=ft.icons.FAVORITE_BORDER, selected_icon=ft.icons.FAVORITE, label=\"First\"\n),\nft.NavigationRailDestination(\nicon_content=ft.Icon(ft.icons.BOOKMARK_BORDER),\nselected_icon_content=ft.Icon(ft.icons.BOOKMARK),\nlabel=\"Second\",\n),\nft.NavigationRailDestination(\nicon=ft.icons.SETTINGS_OUTLINED,\nselected_icon_content=ft.Icon(ft.icons.SETTINGS),\nlabel_content=ft.Text(\"Settings\"),\n),\n],\non_change=lambda e: print(\"Selected destination:\", e.control.selected_index),\n)\npage.add(\nft.Row(\n[\nrail,\nft.VerticalDivider(width=1),\nft.Column([ ft.Text(\"Body!\")], alignment=ft.MainAxisAlignment.START, expand=True),\n],\nexpand=True,\n)\n)\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/4%20-%20Navegacio/#43-barra-de-navegacio-navigationbar","title":"4.3. Barra de navegaci\u00f3. NavigationBar.","text":"<p>Exemple</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"NavigationBar Example\"\npage.navigation_bar = ft.NavigationBar(\ndestinations=[\nft.NavigationDestination(icon=ft.icons.EXPLORE, label=\"Explore\"),\nft.NavigationDestination(icon=ft.icons.COMMUTE, label=\"Commute\"),\nft.NavigationDestination(\nicon=ft.icons.BOOKMARK_BORDER,\nselected_icon=ft.icons.BOOKMARK,\nlabel=\"Explore\",\n),\n]\n)\npage.add(ft.Text(\"Body!\"))\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/5%20-%20Dialegs/","title":"5 - Di\u00e0legs, alertes i panells","text":""},{"location":"unitats/3-GUI-Flet/teoria/5%20-%20Dialegs/#dialegs-alertes-i-panells","title":"Di\u00e0legs, alertes i panells","text":""},{"location":"unitats/3-GUI-Flet/teoria/5%20-%20Dialegs/#alertdialog","title":"AlertDialog","text":"<p>\u00c9s un control per informar l'usuari sobre situacions que requereixen la seua atenci\u00f3 o intervenci\u00f3. T\u00e9 un t\u00edtol opcional i una llista d'accions, opcional tamb\u00e9. El t\u00edtol es mostra dalt del contingut i les accions es mostren baix del contingut.</p> <p>Exemple</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"AlertDialog examples\"\ndlg = ft.AlertDialog(\ntitle=ft.Text(\"Hello, you!\"), on_dismiss=lambda e: print(\"Dialog dismissed!\")\n)\ndef close_dlg(e):\ndlg_modal.open = False\npage.update()\ndlg_modal = ft.AlertDialog(\nmodal=True,\ntitle=ft.Text(\"Please confirm\"),\ncontent=ft.Text(\"Do you really want to delete all those files?\"),\nactions=[\nft.TextButton(\"Yes\", on_click=close_dlg),\nft.TextButton(\"No\", on_click=close_dlg),\n],\nactions_alignment=ft.MainAxisAlignment.END,\non_dismiss=lambda e: print(\"Modal dialog dismissed!\"),\n)\ndef open_dlg(e):\npage.dialog = dlg\ndlg.open = True\npage.update()\ndef open_dlg_modal(e):\npage.dialog = dlg_modal\ndlg_modal.open = True\npage.update()\npage.add(\nft.ElevatedButton(\"Open dialog\", on_click=open_dlg),\nft.ElevatedButton(\"Open modal dialog\", on_click=open_dlg_modal),\n)\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p> <p>Control Modal vs No modal</p> <p>Finestra Modal:</p> <ul> <li>Una finestra modal \u00e9s una finestra que bloqueja la interacci\u00f3 amb la resta de la interf\u00edcie de l'aplicaci\u00f3 mentre est\u00e0 oberta.</li> <li>Les finestres modals s\u00f3n \u00fatils quan es requereix l'atenci\u00f3 immediata de l'usuari o quan \u00e9s necessari obtenir informaci\u00f3 cr\u00edtica abans de continuar.</li> </ul> <p>Finestra No Modal:</p> <ul> <li>Una finestra no modal, d'altra banda, no bloqueja la interacci\u00f3 amb la resta de la interf\u00edcie.</li> </ul>"},{"location":"unitats/3-GUI-Flet/teoria/5%20-%20Dialegs/#banner","title":"Banner","text":"<p>Un b\u00e0ner mostra un missatge que requereix una acci\u00f3 de l'usuari. El missatge \u00e9s important i conc\u00eds, i ofereix accions als usuaris per acceptar (o descartar el b\u00e0ner). Es mostren a la part superior de la pantalla. S\u00f3n persistents i no modals, permetent a l'usuari ignorar-los o interactuar amb ells en qualsevol moment.</p> <p>Exemple</p> Python<pre><code>import flet as ft\ndef main(page):\ndef close_banner(e):\npage.banner.open = False\npage.update()\npage.banner = ft.Banner(\nbgcolor=ft.colors.AMBER_100,\nleading=ft.Icon(ft.icons.WARNING_AMBER_ROUNDED, color=ft.colors.AMBER, size=40),\ncontent=ft.Text(\n\"Oops, there were some errors while trying to delete the file. What would you like me to do?\"\n),\nactions=[\nft.TextButton(\"Retry\", on_click=close_banner),\nft.TextButton(\"Ignore\", on_click=close_banner),\nft.TextButton(\"Cancel\", on_click=close_banner),\n],\n)\ndef show_banner_click(e):\npage.banner.open = True\npage.update()\npage.add(ft.ElevatedButton(\"Show Banner\", on_click=show_banner_click))\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/5%20-%20Dialegs/#bottomsheet","title":"BottomSheet","text":"<p>Un BottomSheet \u00e9s una alternativa modal a un men\u00fa o un di\u00e0leg.</p> <p>Exemple</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\ndef bs_dismissed(e):\nprint(\"Dismissed!\")\ndef show_bs(e):\nbs.open = True\nbs.update()\ndef close_bs(e):\nbs.open = False\nbs.update()\nbs = ft.BottomSheet(\nft.Container(\nft.Column(\n[\nft.Text(\"This is sheet's content!\"),\nft.ElevatedButton(\"Close bottom sheet\", on_click=close_bs),\n],\ntight=True,\n),\npadding=10,\n),\nopen=True,\non_dismiss=bs_dismissed,\n)\npage.overlay.append(bs)\npage.add(ft.ElevatedButton(\"Display bottom sheet\", on_click=show_bs))\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/5%20-%20Dialegs/#snackbar","title":"SnackBar","text":"<p>Un missatge lleuger amb una acci\u00f3 opcional que es mostra breument a la part inferior de la pantalla.</p> <p>Exemple</p> Python<pre><code>import flet as ft\nclass Data:\ndef __init__(self) -&gt; None:\nself.counter = 0\nd = Data()\ndef main(page):\ndef on_click(e):\npage.snack_bar = ft.SnackBar(ft.Text(f\"Hello {d.counter}\"))\npage.snack_bar.open = True\nd.counter += 1\npage.update()\npage.add(ft.ElevatedButton(\"Open SnackBar\", on_click=on_click))\nft.app(target=main)\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/","title":"6 - Emmagatzematge d'informaci\u00f3 a trav\u00e9s de l'API de Flet","text":""},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#1-clientstorage","title":"1. ClientStorage","text":"<p>L'API d'emmagatzematge del client de Flet permet emmagatzemar dades en format clau-valor al client de forma persistent.</p> <p>El mecanisme d'emmagatzematge real dep\u00e8n de la plataforma on s'execute l'aplicaci\u00f3 Flet:</p> <ul> <li>Web - Emmagatzematge local.</li> <li>Escriptori: fitxer JSON.</li> <li>iOS - NSUserDefaults.</li> <li>Android - SharedPreferences. </li> </ul>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#11-escriptura","title":"1.1. Escriptura","text":"<p>Exemple</p> Python<pre><code># strings\npage.client_storage.set(\"key\", \"value\")\n# numbers, booleans\npage.client_storage.set(\"number.setting\", 12345)\npage.client_storage.set(\"bool_setting\", True)\n# lists\npage.client_storage.set(\"favorite_colors\", [\"read\", \"green\", \"blue\"])\n</code></pre> <p>Acc\u00e9s a la informaci\u00f3 guardada</p> <p>Cada aplicaci\u00f3 de Flutter que utilitza les shared_preferences  t\u00e9 el seu propi conjunt de prefer\u00e8ncies. Com que s'utilitza el mateix client Flet (que \u00e9s una aplicaci\u00f3 Flutter) per executar la interf\u00edcie d'usuari per a diverses aplicacions Flet, qualsevol valor emmagatzemat en una aplicaci\u00f3 Flet \u00e9s visible/disponible per a una altra aplicaci\u00f3 Flet executada pel mateix usuari.</p> <p>Per evitar este inconvenient i poder distingir la configuraci\u00f3 d'una aplicaci\u00f3 d'una altra, es recomana utilitzar algun prefix \u00fanic per a totes les claus d'emmagatzematge. Per exemple, per emmagatzemar el token d'una aplicaci\u00f3, podeu utilitzar la clau user1.app1.auth_token, en una altra aplicaci\u00f3 user1.app2.auth_token i en altra user2.app1.auth_token.</p> <p>Compte amb les dades sensibles!</p> <p>\u00c9s responsabilitat del desenvolupador d'aplicacions Flet encriptar o xifrar les dades sensibles abans d'enviar-les a un emmagatzematge del client, de manera que no es puguen llegir ni manipular per una altra aplicaci\u00f3 o usuari de l'aplicaci\u00f3. Ho veurem al final de l'apartat.</p>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#12-lectura","title":"1.2. Lectura","text":"<p>Exemple</p> Python<pre><code># The value is automatically converted back to the original type\nvalue = page.client_storage.get(\"key\")\ncolors = page.client_storage.get(\"favorite_colors\")\n# colors = [\"read\", \"green\", \"blue\"]\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#13-comprovacr-si-existeix","title":"1.3. Comprovacr si existeix","text":"<p>Exemple</p> Python<pre><code>page.client_storage.contains_key(\"key\") # True if the key exists\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#14-obtindre-totes-les-claus","title":"1.4. Obtindre totes les claus","text":"<p>Exemple</p> Python<pre><code>page.client_storage.get_keys(\"key-prefix.\")\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#15-esborrar-un-valor","title":"1.5. Esborrar un valor","text":"<p>Exemple</p> Python<pre><code>page.client_storage.remove(\"key\")\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#16-esborra-lemmagatzematge","title":"1.6. Esborra l'emmagatzematge","text":"Text Only<pre><code>!!! example \"Exemple\"\n\n```python\npage.client_storage.clear()\n```\n</code></pre> <p>Compte!</p> <p><code>clear()</code> \u00e9s una funci\u00f3 perillosa que elimina totes les prefer\u00e8ncies de totes les aplicacions Flet que haja executat el mateix usuari. Per tant, les dades permanents de les aplicacions no s'han d'emmagatzemar a l'emmagatzematge del client, sin\u00f3 a una base de dades, fitxer,...</p>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#2-sessionstorage","title":"2. SessionStorage","text":"<p>Flet proporciona una API per emmagatzemar dades clau-valor a la sessi\u00f3 de l'usuari en el servidor. La informaci\u00f3 estar\u00e0 disponible fins que l'usuari acabe la sessi\u00f3 (tanque l'aplicaci\u00f3 web o finalitze l'execuci\u00f3 en escriptori o m\u00f2bil). </p> <p>L'\u00fas \u00e9s id\u00e8ntic al de ClientStorage canviant client_storage per session.</p> <p>Compte!</p> <p>A la implementaci\u00f3 actual de Flet, les dades emmagatzemades no es conserven entre els reinicis de l'aplicaci\u00f3.</p>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#3-us-de-clientstorage-i-de-sessionstorage","title":"3. \u00das de ClientStorage i de SessionStorage","text":"<p>Els dos m\u00e8todes d'emmagatzematge tenen usos diferents i funcionen amb diferents cicles de vida. Quan utilitzar cadascun?</p> <ol> <li> <p>ClientStorage:</p> <ul> <li>Utilitza clientStorage quan vulguis emmagatzemar dades de forma persistent que persistiran m\u00e9s enll\u00e0 de les sessions.</li> <li>Les dades emmagatzemades amb clientStorage romanen disponibles fins que esborres expl\u00edcitament les dades amb remove o clear.</li> <li>\u00c9s \u00fatil per emmagatzemar prefer\u00e8ncies de l'usuari, configuracions, informaci\u00f3 de l'usuari, com ara nom d'usuari, o qualsevol altra dada que l'aplicaci\u00f3 necessite recordar entre sessions.</li> <li>T\u00e9 un \u00e0mbit global, cosa que significa que les dades emmagatzemades en clientStorage estan disponibles per a totes les aplicacions Flet, independentment de les finestres o pestanyes obertes.</li> </ul> </li> <li> <p>SessionStorage:</p> <ul> <li>Utilitza sessionStorage quan vulguis emmagatzemar dades temporalment durant la sessi\u00f3 actual. Aquestes dades s'esborraran quan s'acabe l'execuci\u00f3 actual.</li> <li>\u00c9s \u00fatil per a dades que nom\u00e9s s\u00f3n rellevants durant una sessi\u00f3 de navegaci\u00f3 determinada, com ara les dades del carret de compra en una botiga en l\u00ednia o les dades temporals d'un formulari web.</li> <li>Com clientStorage, tamb\u00e9 t\u00e9 un \u00e0mbit global i est\u00e0 disponible per a totes les aplicacions durant la sessi\u00f3 actual.</li> </ul> </li> </ol> <p>En resum, tria clientStorage quan necessitis emmagatzemar dades que han de ser persistents entre sessions i tria sessionStorage per emmagatzemar dades temporals que nom\u00e9s s\u00f3n rellevants durant la sessi\u00f3 actual del navegador.</p> <p>Exemple</p> <p>Imagina un token d'acc\u00e9s a una aplicaci\u00f3. Si el guardem a clientStorage, ens permetria mantindre'ns autenticats entre diferents sessions. En canvi, si ferem \u00fas de sessionStorage, ens obligaria a autenticar de nou en cada reinici o sessi\u00f3 nova.</p> <p>Tingues en compte que l'acc\u00e9s \u00e9s global, i que amb el token, es podrien llan\u00e7ar atacs en aplicacions basades en tokens.</p>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#4-encriptacio-de-dades","title":"4. Encriptaci\u00f3 de dades","text":"<p>Les dades sensibles, com ara fitxes, claus, n\u00fameros de targetes de cr\u00e8dit i altres secrets s'haurien d'emmagatzemar, ja siga en bases de dades, fitxers, emmagatzematge del client,... en forma xifrada per evitar atacs i usos fraudulents.</p> <p>Flet inclou m\u00e8todes per xifrar i desxifrar dades de text sensibles mitjan\u00e7ant algorisme sim\u00e8tric (on s'utilitza la mateixa clau per a xifrar i desxifrar).</p>"},{"location":"unitats/3-GUI-Flet/teoria/6%20-%20Emmagatzematge/#clau-secreta","title":"Clau secreta","text":"<p>La clau secreta de xifratge \u00e9s una cadena arbitr\u00e0ria semblant a una contrasenya configurada per un usuari i utilitzada per xifrar i desxifrar dades. L'algoritme de criptografia utilitza una clau secreta per obtindre la clau de xifratge de 32 bytes.</p> <p>Contrasenyes al codi</p> <p>No poseu mai contrasenyes al codi d'una aplicaci\u00f3. Podrien quedar exposades al p\u00fablic i ser utilitzades. Les podeu llegir d'un arxiu de configuraci\u00f3, d'una base de dades, d'un servei o d'una variable d'entorn.</p> <p>Incl\u00fas si distribuim l'aplicaci\u00f3 compilada, es podria fer ingenieria inversa i obtindre-la.</p> <p>A Lliurex, podem definir una variable d'entorn amb:</p> Bash<pre><code>$ export MY_APP_SECRET_KEY=\"contrasenya\"\n</code></pre> <p>Si la voleu fer persistent, la podeu afegir al bashrc, l'script que s'executa en iniciar sessi\u00f3.</p> <p>En Windows, ho podeu fer a trav\u00e9s del Tauler de Control o amb PowerShell:</p> PowerShell<pre><code>[Environment]::SetEnvironmentVariable(\"MY_APP_SECRET_KEY\", \"contrasenya\", [System.EnvironmentVariableTarget]::Machine)\n</code></pre> <p>Una vegada definida, la podem obtindre mitjan\u00e7ant os.getenv i utilitzar-la per xifrar o desxifrar, amb encrypt i decrypt.</p> <p>Exemple</p> Python<pre><code>import os\nimport flet.security as ft_sec\ncontrasenya = os.getenv(\"MY_APP_SECRET_KEY\")\ntext_sense_xifrar = \"Este \u00e9s un missatge secret!\"\ntext_xifrat = ft_sec.encrypt(text_sense_xifrar, contrasenya)\nprint(f\"\\nMissatge xifrat: {text_xifrat}\\n\")\ntext_desxifrat = ft_sec.decrypt(text_xifrat, contrasenya)\nprint(f\"Missatge desxifrat: {text_desxifrat}\\n\")\nif text_sense_xifrar == text_desxifrat:\nprint(\"El missatge s'ha desxifrat correctament!\")\n</code></pre> <p>Xifrfatge vs codificaci\u00f3</p> <p>No \u00e9s el mateix xifar que codificar. La finalitat del xifratge \u00e9s protegir la informaci\u00f3, mentre que la finalitat de la codificaci\u00f3 \u00e9s representar la mateixa informaci\u00f3 en un format diferent, per\u00f2 en ningun cas ocultar-la.</p> <p>Per exmeple, un token no est\u00e0 xifrat, sin\u00f3 codificat. En este enlla\u00e7 podeu codificar i decodificar tokens.</p>"},{"location":"unitats/3-GUI-Flet/teoria/7%20-%20Aplicacions%20multiusuari/","title":"7 - Aplicacions multiusuari","text":""},{"location":"unitats/3-GUI-Flet/teoria/7%20-%20Aplicacions%20multiusuari/#pubsub","title":"PubSub","text":"<p>Les aplicacions multiusuari estan dissenyades de forma que les accions d'un usuari en local es repliquen a la sessi\u00f3 d'un usuari remot. </p> <p>Pensem per exemple en una aplicaci\u00f3 de xat. Quan un usuari envia un missatge, s'hauria de transmetre a totes les altres sessions de l'aplicaci\u00f3 i mostrar-lo a les seves interf\u00edcies corresponents. Necessitem d'alguna manera, passar missatges d'usuari entre sessions.</p> <p>Flet proporciona un mecanisme senzill per a la comunicaci\u00f3 as\u00edncrona entre sessions anomenat PubSub.</p> <p>PubSub permet emetre missatges a totes les sessions d'aplicacions o enviar-los nom\u00e9s a subscriptors espec\u00edfics.</p> <p>El funcionament b\u00e0sic de PubSub \u00e9s:</p> <ul> <li>subscribe - a missatges de difusi\u00f3 o subscriu-te a un tema a l'inici de la sessi\u00f3 de l'aplicaci\u00f3.</li> <li>send - enviar missatges de difusi\u00f3 o enviar a un tema concret.</li> <li>unsubscribe - cancel\u00b7leu la subscripci\u00f3 als missatges de difusi\u00f3 o cancel\u00b7leu la subscripci\u00f3 a un tema.</li> <li>unsubscribe -  cancel\u00b7lem la subscripci\u00f3 de tot en tancar la sessi\u00f3, page.on_close.</li> </ul> <p>Xat</p> <p>Aquest \u00e9s un exemple d'una aplicaci\u00f3 de xat senzilla</p> Python<pre><code>import flet as ft\ndef main(page: ft.Page):\npage.title = \"Flet Chat\"\n# subscribe to broadcast messages\ndef on_message(msg):\nmessages.controls.append(ft.Text(msg))\npage.update()\npage.pubsub.subscribe(on_message)\ndef send_click(e):\npage.pubsub.send_all(f\"{user.value}: {message.value}\")\n# clean up the form\nmessage.value = \"\"\npage.update()\nmessages = ft.Column()\nuser = ft.TextField(hint_text=\"Your name\", width=150)\nmessage = ft.TextField(hint_text=\"Your message...\", expand=True)  # fill all the space\nsend = ft.ElevatedButton(\"Send\", on_click=send_click)\npage.add(messages, ft.Row(controls=[user, message, send]))\nft.app(target=main, view='web_browser')\n</code></pre> <p></p> <p></p> <p></p>"},{"location":"unitats/3-GUI-Flet/teoria/8%20-%20Controls%20definits%20per%20l%27usuari/","title":"8 - Controls definits per l'usuari","text":""},{"location":"unitats/3-GUI-Flet/teoria/8%20-%20Controls%20definits%20per%20l%27usuari/#creacio-de-nous-controls-per-codi","title":"Creaci\u00f3 de nous controls per codi.","text":"<p>Els controls s\u00f3n utilitzats, entre altres coses, per amagar la complexitat del programari i transformar-la en parts m\u00e9s manejables. Cada control amaga la seva complexitat darrere d'una interf\u00edcie formada per les seves propietats i m\u00e8todes a qu\u00e8 es t\u00e9 acc\u00e9s. Poden introduir-se i eliminar-se, fins i tot ser intercanviats com a part dun tot. </p> <p>Aix\u00f2 redueix la complexitat del desenvolupament programari i millora el seu manteniment, permetent que el mateix codi puga ser reutilitzat a diferents llocs. El resultat \u00e9s un bloc de codi encapsulat en una classe independent que passa a formar part del banc de peces disponibles per formar part de desenvolupaments m\u00e9s complexos.</p>"},{"location":"unitats/3-GUI-Flet/teoria/8%20-%20Controls%20definits%20per%20l%27usuari/#controls-que-hereden-daltres-controls","title":"Controls que hereden d'altres controls","text":"<p>Per comen\u00e7ar a desenvolupar un control propi, el m\u00e9s f\u00e0cil \u00e9s buscar un control des del qual partir, de manera que se n'hereten les propietats i m\u00e8todes i aix\u00ed poder utilitzar-los en el control que volem crear. </p> <p>Per exemple, si voleu un <code>Container</code> amb un identificador centrat, podem heretar de <code>flet.Container</code> i afegir una propietat id:</p> <p>Exemple</p> Python<pre><code>import flet as ft\nclass ContainerID(ft.Container): # Heredem de Container\ndef __init__(self, id: str):\nsuper().__init__()\nself.id = id # Definim la propietat id\n# Per defecte el creem amb l'identificador centrat, \n# color de fons AMBER, tamany 150x150 i arredonit\nself.content = ft.Text(id)\nself.alignment=ft.alignment.center\nself.width = 150\nself.height = 150\nself.border_radius = 5\nself.bgcolor = ft.colors.AMBER\ndef main(page: ft.Page):\ncontainer_id = ContainerID(\"Identificador\")\ncontainer_id.on_click = container_clicked\npage.add(container_id)\npage.update()\ndef container_clicked(e):\nprint(e.control.id) # Accedim a la propietat que hem definit\nft.app(target=main)\n</code></pre>"},{"location":"unitats/3-GUI-Flet/teoria/8%20-%20Controls%20definits%20per%20l%27usuari/#controls-que-hereden-dusercontrol","title":"Controls que hereden d'UserControl","text":"<p>En cas que el nostre control no guarde relaci\u00f3 estreta amb altres controls o siga una composici\u00f3 de diversos controls, el m\u00e9s adequat ser\u00e0 heretar de <code>ft.UserControl</code> directament, que \u00e9s la classe base des de la qual hereta la resta de Controls d'usuari. Aix\u00f2 ens permetr\u00e0 construir components reutilitzables combinant els controls Flet existents.</p> <p>Exemple m\u00ednim de control d'usuari</p> Python<pre><code>import flet as ft\nclass GreeterControl(ft.UserControl):\ndef build(self):\nreturn ft.Text(\"Hello!\")\ndef main(page):\npage.add(GreeterControl())\nft.app(target=main)\n</code></pre> <p>UserControl ha d'implementar el m\u00e8tode build() que es crida per crear la interf\u00edcie d'usuari del control i ha de retornar una \u00fanic objecte Control o una Llista de controls. UserControls hereda d'Stack, de manera que hi haur\u00e0 diversos fills els uns sobre els altres. Si necessiteu organitzar la interf\u00edcie d'usuari del control de manera diferent, podeu utilitzar Layouts  com Row o Column.</p> <p>Exemple</p> Python<pre><code>class GreeterControl(ft.UserControl):\ndef build(self):\nreturn ft.Column([\nft.TextField(label=\"Your name\"),\nft.ElevatedButton(\"Login\")\n])\n</code></pre> <p>Actualitzaci\u00f3 d'UserControl a la interf\u00edcie</p> <p>Quan es crida al m\u00e8tode update() del control principal, els canvis dins del UserControl no s'apliquen, i per tant, la seua vista no es refresca. UserControl hauria de cridar self.update() per enviar els seus canvis a una p\u00e0gina de Flet.</p> Python<pre><code>import flet as ft\nclass Counter(ft.UserControl):\ndef __init__(self):\nsuper().__init__()\nself.counter = 0\nself.text = ft.Text(str(self.counter))\ndef add_click(self, e):\nself.counter += 1\nself.text.value = str(self.counter)\nself.update() # Actualitzem la vista\ndef subtract_click(self, e):\nself.counter -= 1\nself.text.value = str(self.counter)\nself.update() # Actualitzem la vista\ndef build(self):\nreturn ft.Row([ft.IconButton(ft.icons.REMOVE, on_click=self.subtract_click), self.text, ft.IconButton(ft.icons.ADD, on_click=self.add_click)])\ndef main(page):\npage.add(Counter())\nft.app(target=main)\n</code></pre> <p>Fixeu-se que a les l\u00ednies 13 i 18, el control s'actualitza a ell mateix. Proveu a canviar per e.page.update() i comproveu el funcionament.</p>"},{"location":"unitats/4-GUI-PySide6/tasques/1%20-%20Activitats/","title":"1 - Activitats","text":""},{"location":"unitats/4-GUI-PySide6/tasques/1%20-%20Activitats/#2-components-dus-comu","title":"2. Components d'\u00fas com\u00fa","text":""},{"location":"unitats/4-GUI-PySide6/tasques/1%20-%20Activitats/#activitat-1-conexio-entre-senyals-i-ranures","title":"Activitat 1 - Conexi\u00f3 entre senyals i ranures","text":"<p>Desenvolupa una aplicaci\u00f3 amb una finestra que continga un QLineEdit i un QLabel. Assigna una mida m\u00e0xima de text de 5 car\u00e0cters al QLineEdit i una mida fixa de 50x30 p\u00edxels. El QLabel tamb\u00e9 tindr\u00e0 una mida fixa de 50x30 i es despla\u00e7ar\u00e0 50 p\u00edxels a la dreta per no solapar-se amb el QLineEdit. Quan canvieu el text del QLineEdit, l'etiqueta mostrar\u00e0 el text introdu\u00eft.</p> <p></p> <p>Documentaci\u00f3</p> <p>A la documentaci\u00f3 de cada component, es pot consultar si els seus senyals i ranures passen i reben arguments respectivament i de quin tipus s\u00f3n.</p>"},{"location":"unitats/4-GUI-PySide6/tasques/1%20-%20Activitats/#3-contenidors-de-components-disseny","title":"3. Contenidors de components. Disseny.","text":""},{"location":"unitats/4-GUI-PySide6/tasques/1%20-%20Activitats/#activitat-2-layouts-imbricats","title":"Activitat 2 - Layouts imbricats","text":"<p>Els layouts no nom\u00e9s poden contenir widgets, sin\u00f3 tamb\u00e9 altres layouts que al seu torn poden contenir widgets i layouts. Per afegir un layout com a layout fill, farem servir el m\u00e8tode addLayout del pare, i li passarem el layout fill com a argument.</p> <p>Desenvolupa una aplicaci\u00f3 que tinga l'aspecte seg\u00fcent:</p> <p></p>"},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/","title":"2 - Pr\u00e0ctiques","text":""},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#3-contenidors-de-components-disseny","title":"3. Contenidors de components. Disseny.","text":""},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-1-login","title":"Pr\u00e0ctica 1 - Login","text":"<p>Crearem una aplicaci\u00f3 que simule una finestra de login amb l'aspecte seg\u00fcent:</p> <p></p> <p>En cas d'introduir l'usuari \u201cadmin\u201d amb la contrasenya \u201cadmin\u201d, l'aspecte canviar\u00e0 al seg\u00fcent:</p> <p></p> <p>Si l'usuari o la contrasenya \u00e9s qualsevol altre, l'aspecte seria el seg\u00fcent:</p> <p></p> <p>Credencial harcodejades</p> <p>Tingues en compte que posar els usuaris i contrasenyes al codi no \u00e9s una bona pr\u00e0ctica, ja que per canviar-lo caldria editar el codi. A m\u00e9s, suposa un gran risc de seguretat, perqu\u00e8 en fer enginyeria inversa i obtenir el codi original de l'aplicaci\u00f3, s'obtindrien les credencials. A les aplicacions reals es consultaria un servidor de bases de dades o algun fitxer protegit.</p>"},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#4-barres-de-ferramentes-barra-destat-i-menus","title":"4. Barres de ferramentes, barra d'estat i men\u00fas.","text":""},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-21-editor-de-text","title":"Pr\u00e0ctica 2.1 - Editor de text","text":"<p>En aquesta pr\u00e0ctica anem a desenvolupar un editor de text molt simple, que tindr\u00e0 el seg\u00fcent aspecte:</p> <p></p> <p>Tindr\u00e0 tres accions:</p> <ul> <li>Obrir fitxer, al men\u00fa i a la barra d'eines. Drecera Ctrl + o</li> <li>Guarda fitxer, al men\u00fa i a la barra d'eines. Drecera Ctrl + s</li> <li>Sortir, al men\u00fa. Drecera Ctrl + q</li> </ul> <p>L'arxiu on guardeu o que podeu carregar sempre ser\u00e0 el mateix, \u201carxiu.txt\u201d, i estar\u00e0 situat a la mateixa ruta que l'executable. En desar, se sobreescriur\u00e0 el fitxer.</p> <p>Ajuda</p> <p>Defineix tres QAction per a les accions. Cadascuna anir\u00e0 connectada a una ranura amb la funcionalitat especificada i la situar\u00e0s a la barra d'eines i al men\u00fa segons corresponga.</p> <p>Per llegir/escriure en un fitxer, utilitza el m\u00e8tode de python \u201copen\u201d com corresponga:</p> <ul> <li>\u201cr+\u201d per a lectura i actualitzaci\u00f3.</li> <li>\u201cw\u201d per a escriptura</li> </ul> <p>Per ixir de l'aplicaci\u00f3 recorda que les aplicacions acaben normalment en tancar la \u00faltima de les finestres visibles.</p>"},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#5-dialegs-i-altres-finestres","title":"5. Di\u00e0legs i altres finestres.","text":""},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-22-editor-de-text-no-perdre-els-canvis","title":"Pr\u00e0ctica 2.2 - Editor de text: No perdre els canvis.","text":"<p>Anem a continuar afegint funcionalitat al nostre editor de text de la pr\u00e0ctica 3. </p> <p>En sortir de l'aplicaci\u00f3, tancar el fitxer o obrir un altre fitxer, hem de comprovar si hem guardat els canvis. En cas de no haver-los guardat, haur\u00edem de demanar a l'usuari si vol guardar-los, de manera que els canvis no es perden.</p>"},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-23-editor-de-text-dialegs-per-obrir-i-tancar-arxius","title":"Pr\u00e0ctica 2.3 - Editor de text: Dialegs per obrir i tancar arxius.","text":"<p>A la pr\u00e0ctica de l'apartat anterior (Pr\u00e0ctica 3), hav\u00edem comen\u00e7at a desenvolupar un editor de text molt simple que permetia carregar i guardar \u201carxiu.txt\u201d situat a la mateixa ruta des de la qual execut\u00e0vem el codi.</p> <p>En aquesta activitat, utilitzarem dos di\u00e0legs, un per demanar quin fitxer obrir i un altre per demanar en quin fitxer volem desar els canvis. En cas que ja hi haja un fitxer obert, en donar a desar no demanar\u00e0 la ruta al fitxer, sin\u00f3 que utilitzar\u00e0 la ruta del fitxer obert anteriorment, sobreescrivint-lo.</p> <p>A m\u00e9s, afegirem una entrada de men\u00fa \u201cTancar\u201d per tancar l'arxiu obert actualment i comen\u00e7ar-ne un de nou.</p>"},{"location":"unitats/4-GUI-PySide6/tasques/2%20-%20Pr%C3%A0ctiques/#practica-3-dialeg-en-login","title":"Pr\u00e0ctica 3 - Di\u00e0leg en login","text":"<p>A la pr\u00e0ctica 2 de l'apartat 3 hav\u00edem creat una finestra per demanar l'usuari i la contrasenya en una finestra de login. Canviarem la implementaci\u00f3, fent que siga un di\u00e0leg, de manera que si l'usuari i la contrasenya s\u00f3n \u201cadmin\u201d, \u201cadmin\u201d, entrarem a l'aplicaci\u00f3, que mostrarem de forma maximitzada. Per\u00f2 si no, mostrarem un quadre de di\u00e0leg nou indicant que \u201cl'usuari o la contrasenya s\u00f3n incorrectes\u201d.</p> <p>La finestra de l'aplicaci\u00f3 simplement contindr\u00e0 un QLabel amb el text Finestra principal.</p> <p></p> <p></p> <p>Ajuda</p> <p>El di\u00e0leg es mostrar\u00e0 en llan\u00e7ar el seu bucle d'esdeveniments, funci\u00f3 exec(). Aquesta funci\u00f3 ens tornar\u00e0 el resultat del di\u00e0leg, aix\u00ed que podem utilitzar la ranura accept() quan el login siga correcte, que ens tornar\u00e0 el valor QDialog.Accepted. En cas de tornar una altra cosa, mostrarem el missatge de login incorrecte indicat a l'enunciat, utilitzant un QMessageBox. </p>"},{"location":"unitats/4-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/","title":"1 - Tecnologies","text":""},{"location":"unitats/4-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>En aquest primer apartat de la unitat introduirem les tecnologies que utilitzarem per als nostres desenvolupaments Qt i PySide6.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/#11-qt","title":"1.1. Qt","text":"<p>Qt \u00e9s un framework de desenvolupament d'aplicacions multiplataforma per a escriptori, sistemes empotrats i sistemes m\u00f2bils. Els seus desenvolupaments permeten executar-se a plataformes com Linux, OS X, Windows, VxWorks, QNX, Android, iOS, BlackBerry, Sailfish OS i altres.</p> <p>No \u00e9s un llenguatge de programaci\u00f3 sin\u00f3 un conjunt d'eines per al desenvolupament d'interf\u00edcies gr\u00e0fiques d'usuari multiplataforma mitjan\u00e7ant C++.</p> <p>El desenvolupament de Qt va ser iniciat el 1990 pels programadors noruecs Eirik Chambe-Eng i Haavard Nord. La seua empresa, Trolltech, que venia llic\u00e8ncies de Qt i donava suport va passar per diverses adquisicions al llarg dels anys. Avui, l'antiga Trolltech es diu The Qt Company. </p> <p>Encara que The Qt Company \u00e9s el principal impulsor de Qt, ara Qt \u00e9s desenvolupat per un conjunt de companyies m\u00e9s gran: The Qt Project. Est\u00e0 format per moltes empreses i persones de tot el m\u00f3n i segueix un model de govern meritocr\u00e0tic. Tots els que vulguen, particulars i empreses, poden sumar-se al projecte col\u00b7laboratiu, escrivint codi o documentaci\u00f3, informant d'errors, ajudant altres usuaris al f\u00f2rum o mantenint p\u00e0gines al seu wiki.</p> <p>Qt est\u00e0 disponible sota diverses llic\u00e8ncies: The Qt Company ven llic\u00e8ncies comercials, per\u00f2 Qt tamb\u00e9 est\u00e0 disponible com a programari lliure sota diverses versions de GPL i LGPL.</p> <p>Alguns exemples d'aplicacions desenvolupades amb Qt s\u00f3n:</p> <ul> <li>Adobe Photoshop Album, per organitzar imatges.</li> <li>L'escriptori Kde de les distribucions Linux.</li> <li>Last.fm Player, el client descriptori per a streaming de m\u00fasica i r\u00e0dio.</li> <li>Skype, per a missatgeria i VOIP.</li> <li>TeamSpeak, per a la comunicaci\u00f3 amb veu \u00e0mpliament usada per gamers.</li> <li>VirtualBox, per a la virtualitzaci\u00f3 de sistemes.</li> <li>LibreOffice, paquet ofim\u00e0tic lliure. Alternativa a Microsoft Office.</li> <li>OnlyDesktops, paquet ofim\u00e0tic lliure competidor de LibreOffice.</li> <li>MuseScore, programa per a composici\u00f3 de partitures musicals.</li> </ul>"},{"location":"unitats/4-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/#12-pyside6","title":"1.2. PySide6","text":"<p>PySide \u00e9s la uni\u00f3 de Python i Qt . Va ser desenvolupat per The Qt Company, com a part del projecte Qt for Python. \u00c9s una de les alternatives al paquet est\u00e0ndard Tkinter de Python per crear interf\u00edcies. Com Qt, PySide \u00e9s programari lliure. PySide \u00e9s compatible amb Linux/X11, macOS i Microsoft Windows, per tant, els nostres desenvolupaments seran compatibles amb qualsevol d'aquestes plataformes amb nom\u00e9s un desenvolupament de codi.</p> <p>Documentaci\u00f3</p> <p>Encara que hi ha documentaci\u00f3 espec\u00edfica de PySide disponible, tamb\u00e9 podem i recomanem utilitzar la documentaci\u00f3 de Qt per a C++, tenint en compte que caldr\u00e0 traduir la sintaxi d'objectes i m\u00e8todes C++ per adaptar-lo a Python.</p> <p>Hi ha hagut tres versions principals de PySide:</p> <ul> <li>PySide: compatible amb Qt 4</li> <li>PySide2: compatible amb Qt 5, la versi\u00f3 m\u00e9s utilitzada de Qt.</li> <li>PySide6: compatible amb Qt 6</li> </ul> <p>La versi\u00f3 1 de PySide va ser llan\u00e7ada a l'agost de 2009 sota llic\u00e8ncia LGPL per Nokia, llavors propiet\u00e0ria de Qt, despr\u00e9s de no arribar a un acord amb els desenvolupadors de PyQt, Riverbank Computing. Va recolzar Qt 4 sota els sistemes operatius Linux/X11, Mac OS X, Microsoft Windows, Maemo i MeeGo, mentre que la comunitat PySide va afegir suport per a Android.</p> <p>Christian Tismer va iniciar PySide2 per portar PySide de Qt 4 a Qt 5 el 2015. Aleshores, el projecte es va incorporar al projecte Qt. Va ser llan\u00e7at el desembre del 2018. </p> <p>PySide6 es va llan\u00e7ar el desembre del 2020. Va afegir suport per Qt 6 i va eliminar el suport per a totes les versions de Python anteriors a la 3.6.</p> <p>Nosaltres farem \u00fas de PySide6 durant aquest curs.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/1%20-%20Introducci%C3%B3/#13-pyside6-vs-flet","title":"1.3. PySide6 vs Flet","text":"<p>Cadascun dels frameworks t\u00e9 els seus avantatges i inconvenients i haurem de pensar quin \u00e9s el que m\u00e9s ens conv\u00e9 per al nostre desenvolupament:</p> <p>Flet \u00e9s un framework m\u00e9s recent que de moment compta amb poca documentaci\u00f3 i no t\u00e9 un respaldament de grans empreses, en canvi ens permet portar els nostres desenvolupaments a web, m\u00f2bil o escriptori.</p> <p>PySide6, per la seua banda compta amb molts anys de desenvolupaments i millores, molta documentaci\u00f3 (encara que la majoria est\u00e0 en C++) i el recolzament d'algunes grans empreses. En canvi, la part de Qt que aprendrem en este curs (aplicacions basades en Qt Widgets) sols ens permetran executar-se en escriptori (macOS, Windows i Linux).</p>"},{"location":"unitats/4-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/","title":"2 - Controls d'\u00fas com\u00fa","text":""},{"location":"unitats/4-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#1-controls-dus-comu","title":"1. Controls d'\u00fas com\u00fa.","text":""},{"location":"unitats/4-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#11-controls-a-pyside6","title":"1.1. Controls a PySide6","text":"<p>Els controls s\u00f3n els elements b\u00e0sics i principals per crear interf\u00edcies d'usuari a Qt. Podeu mostrar informaci\u00f3, rebre informaci\u00f3 de l'usuari i contenir altres controls de forma agrupada. Un control que no est\u00e0 incrustat en un control pare es mostra en forma de finestra independent.</p> <p>Vegem la implementaci\u00f3 de \u201cHola M\u00f3n!\u201d amb PySide6.</p> <p>Exemple</p> Python<pre><code># Importem les classes QApplication, QLabel i QWidget\n# del m\u00f2dul QtWidgets del paquet PySide6\nfrom PySide6.QtWidgets import QApplication, QLabel, QWidget\nclass Finestra(QWidget):\n'''\n    Classe Finestra, hereta de QWidget, component base.\n    '''\n# Constructor de la classe Finestra\ndef __init__(self):\n# Crida al constructor de la superclasse\nsuper().__init__()\n# Assignem el t\u00edtol de la finestra\nself.setWindowTitle(\"finestra\")\n# Creem una etiqueta amb la finestra com a parent.\nself.etiqueta1 = QLabel(\"Hola m\u00f3n!\", self)\nif __name__ == \"__main__\":\n# Cada aplicaci\u00f3 ser\u00e0 una sola inst\u00e0ncia de QApplication.\napp = QApplication([])\n# Creem un objecte Finestra.\nfinestra1 = Finestra()\n# Mostrem la Finestra, per defecte els controls estan ocults.\nfinestra1.show()\n# Iniciem el bucle d'esdeveniments.\napp.exec()\n</code></pre> <p>L'aspecte que presenta en executar-lo en un escriptori Kde \u00e9s el d'una finestra com la seg\u00fcent:</p> <p></p> <p>Dins la finestra estar\u00e0 continguda tota la interf\u00edcie de l'usuari. En aquest cas, nom\u00e9s cont\u00e9 un component QLabel sense interacci\u00f3 possible, ja que \u00e9s una etiqueta que mostra un text.  </p> <p>Cada aplicaci\u00f3 gr\u00e0fica tindr\u00e0 almenys una finestra, per\u00f2 en podr\u00e0 tenir m\u00e9s. Aix\u00f2 ho veurem en seccions posteriors de la unitat. Normalment una aplicaci\u00f3 acabar\u00e0 en tancar la darrera de les finestres.</p> <p>Algunes coses que cal tenir en compte del codi:</p> <ul> <li>En aquest cas heretem de la classe QWidget per crear la nostra pr\u00f2pia finestra. super() es refereix a la classe de qu\u00e8 s'hereta.</li> <li>Els controls estan ocults per defecte. Si els passem el parent en la seua creaci\u00f3 es mostraran en mostrar el parent. En cas contrari els podem mostrar amb el m\u00e8tode show, per\u00f2 es mostraran com una finestra independent.</li> <li>Per accedir o canviar les propietats dels widgets ho fem a trav\u00e9s dels seus m\u00e8todes p\u00fablics. Els m\u00e8todes d'assignaci\u00f3 de valors a propietats, setters, comencen per set seguit del nom de la propietat que volem assignar (setText, setAlignement, setSizePolicy, ...), mentre que els de lectura de valors, getters, solen comen\u00e7ar pel nom de la propietat a llegir (text, alignement, sizePolicy, ...).</li> </ul>"},{"location":"unitats/4-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#12-esdeveniments","title":"1.2. Esdeveniments","text":"<p>Cada interacci\u00f3 de l'usuari amb la interf\u00edcie, per exemple un clic de ratol\u00ed, un doble clic, l'\u00fas d'una tecla, etc. generar\u00e0 un esdeveniment. Aquest esdeveniment ser\u00e0 afegit a la cua d'esdeveniments (event queue) per ser gestionat.</p> <p>El bucle d'esdeveniments (event loop), que \u00e9s un bucle infinit, comprovar\u00e0 a cada iteraci\u00f3 si hi ha esdeveniments pendents de ser gestionats. En cas de ser aix\u00ed, l'esdeveniment ser\u00e0 gestionat pel gestor d'esdeveniments (event handler) que executar\u00e0 el vostre manejador. Quan aquest acaba, el control torna al bucle d'esdeveniments per esperar m\u00e9s esdeveniments.</p> <p>El bucle d'esdeveniments estar\u00e0 gestionat per l'objecte QApplication i es llan\u00e7ar\u00e0 en executar el m\u00e8tode exec(). En fer clic sobre l'aspa, gestionar\u00e0 l'esdeveniment de tancar, de manera que la finestra es tancar\u00e0 i l'aplicaci\u00f3 acabar\u00e0.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#13-senyals-i-ranures","title":"1.3. Senyals i ranures","text":"<p>A l'aplicaci\u00f3 de l'exemple anterior, en produir-se un esdeveniment sobre l'etiqueta, l'aplicaci\u00f3 no executava cap funcionalitat associada a aquest esdeveniment. Necessitem connectar els esdeveniments a alguna funcionalitat concreta. A Qt, aix\u00f2 s'implementa mitjan\u00e7ant senyals i ranures (s\u00f3n l'equivalent a on_click, on_change... en Flet)</p> <p>Signals</p> <p>Un senyal (signal) a Qt s'emet quan l'usuari produeix un esdeveniment. </p> <p>Slots</p> <p>Les ranures (slots) s\u00f3n escoltadors de senyals que s'executaran en llan\u00e7ar-se l'emissi\u00f3 del senyal al qual estan connectats.</p> <p>Exemple</p> Python<pre><code>'''\n\"Exemple de signal-slot\"\n'''\nfrom PySide6.QtWidgets import QApplication, QPushButton, QMainWindow\nclass FinestraPrincipal(QMainWindow):\n'''\n    Classe FinestraPrincipal, hereta de QMainWindow.\n    El QMainWindow \u00e9s un component pensat per ser\n    la finestra principal d'una aplicaci\u00f3.\n    '''\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"finestra\")\nself.boton1 = QPushButton(\"Fes clic!\", self)\n# Configurem el bot\u00f3 com a element principal de la finestra.\n# Aix\u00f2 \u00e9s perqu\u00e8 estem usant un QMainWindow. No calia\n# passar-li el parent en la seua creaci\u00f3.\nself.setCentralWidget(self.boton1)\n# Connectem l'esdeveniment clic del bot\u00f3 a la ranura clic_de_boton\nself.boton1.clicked.connect(self.clic_de_bot\u00f3)\n# Definim la ranura que s'executar\u00e0 amb el clic del bot\u00f3\ndef clic_de_bot\u00f3(self):\nprint(\"Senyal de clic rebut -&gt; Execuci\u00f3 de la ranura\")\nif __name__ == \"__main__\":\napp = QApplication([])\nfinestra1 = FinestraPrincipal()\nfinestra1.show()\napp.exec()\n</code></pre> <p>Ara, l'aspecte de l'aplicaci\u00f3 ser\u00e0 el mateix, per\u00f2 en fer clic sobre el bot\u00f3, la consola des de la qual hem llan\u00e7at l'aplicaci\u00f3 mostrar\u00e0 el text \u201cSenyal de clic rebut -&gt; Execuci\u00f3 de la ranura\u201d.</p> <p></p> <p>Slots predefinits</p> <p>Alguns controls tenen ranures predefinides que podem fer servir directament.</p> <p>Per exemple, el control QLabel t\u00e9 els seg\u00fcents slots predefinits:</p> <ul> <li>clear</li> <li>setMovie(movie)</li> <li>setNum(num)</li> <li>setPicture(picture)</li> <li>setPixmap(pixmap)</li> <li>setText(text)</li> </ul> <p>Com veus, alguns dels slots predefinits esperen rebre algun par\u00e0metre. A la documentaci\u00f3 pots veure que algunes senyals s'acompanyen d'alguns valors quan es produeixen, de forma que podem connectar directament senyals i ranures que es passen informaci\u00f3 entre ells.</p> <p>Per exemple:</p> Python<pre><code>self.label = QLabel()\nself.input = QLineEdit()\nself.input.textChanged.connect(self.label.setText)\n</code></pre>"},{"location":"unitats/4-GUI-PySide6/teoria/2%20-%20Controls%20%C3%BAs%20com%C3%BA/#14-principals-controls-en-formularis","title":"1.4. Principals controls en formularis","text":"<p>A la primera unitat vam veure un llistat de controls habituals juntament amb el seu \u00fas habitual. Farem un llistat amb els controls m\u00e9s habituals de PySide6 usats en formularis, juntament amb algun dels seus senyals i funcions m\u00e9s \u00fatils. Pel nom de les funcions se'n pot deduir l'\u00fas i el comportament. Veurem i practicarem amb exemples de molts d'ells en altres apartats de la unitat. Per obtenir una llista completa i m\u00e9s informaci\u00f3 de cadascun, cal consultar la documentaci\u00f3 de PySide6.</p> <p>Widgets</p> QCheckBoxQLabelQComboBoxQRadioButtonQPushButtonQTabWidgetQTableWidgetQLineEditQTextEditQProgressBarQDateTimeEditQSliderQDial <p>Senyals:</p> <ul> <li>stateChanged()</li> </ul> <p>Funcions:</p> <ul> <li>isChecked()</li> <li>setCheckState()</li> </ul> <p>+info</p> <p>Funcions:</p> <ul> <li>setText()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>currentIndexChanged()</li> <li>currentTextChanged()</li> </ul> <p>Funcions:</p> <ul> <li>addItem()</li> <li>setCurrentIndex()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>toggled()</li> </ul> <p>Funcions:</p> <ul> <li>isChecked()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>clicked()</li> </ul> <p>Funcions:</p> <ul> <li>setCheckable()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>currentChanged ()</li> <li>tabBarClicked()</li> </ul> <p>Funcions:</p> <ul> <li>addTab(widget, label)</li> <li>setCurrentIndex()</li> <li>setCurrentWidget()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>cellChanged()</li> <li>currentCellChanged()</li> </ul> <p>Funcions:</p> <ul> <li>clear()</li> <li>insertColumn()</li> <li>insertRow()</li> <li>removeColumn()</li> <li>removeRow()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>textChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setText()</li> <li>clear()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>textChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setText()</li> <li>clear()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>valueChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setValue()</li> <li>setOrientation()</li> <li>setMaximum()</li> <li>setMinimum()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>dateChanged()</li> <li>dateTimeChanged()</li> <li>timeChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setDate()</li> <li>setDateTime()</li> <li>setTime()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>valueChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setValue()</li> </ul> <p>+info</p> <p>Senyals:</p> <ul> <li>valueChanged()</li> </ul> <p>Funcions:</p> <ul> <li>setValue()</li> </ul> <p>+info</p>"},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/","title":"3 - Contenidors de components. Disseny","text":""},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/#1-contenidors-de-components-disseny","title":"1. Contenidors de components. Disseny.","text":""},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/#11-layouts","title":"1.1. Layouts","text":"<p>Fins ara hem vist finestres amb un sol component o components continguts dins d'un altre component, com \u00e9s el cas del seg\u00fcent exemple:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import QApplication, QLabel, QWidget\nclass Finestra(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nself.setWindowTitle(\"finestra\")\n# Creem dues etiquetes amb el component com a parent\nself.label1 = QLabel(\"Etiqueta 1\", self)\nself.label2 = QLabel(\"Etiqueta 2\", self)\n# Necessitem moure la segona perqu\u00e8 no es solapi amb la primera\nself.label2.move(0, 30)\nif __name__ == \"__main__\":\napp = QApplication([])\nfinestra = Finestra()\n# Mostrem la finestra\nfinestra.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s una finestra com la seg\u00fcent:</p> <p></p> <p>Per\u00f2 qu\u00e8 passa si volem afegir m\u00e9s components tant horitzontalment com verticalment? Qu\u00e8 passa si redimensionem la finestra? Haur\u00edem d'anar calculant el nombre de p\u00edxels a despla\u00e7ar-los i l'espai que ocupen a la interf\u00edcie no queda modificat. Aix\u00ed que estudiarem en aquest apartat una forma m\u00e9s eficient de gestionar tot aix\u00f2 a trav\u00e9s de layouts. S\u00f3n dissenys o disposicions que podem aplicar a una interf\u00edcie per ordenar-ne els components. Amb la combinaci\u00f3 d'aquests layouts \u00e9s possible definir el disseny de qualsevol interf\u00edcie gr\u00e0fica d'usuari.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/#12-qvboxlayout","title":"1.2. QVBoxLayout","text":"<p>La primera disposici\u00f3 que estudiarem ser\u00e0 la disposici\u00f3 en vertical. Hi anir\u00e0 afegint els components al final d'una pila de components, un a sobre de l'altre.</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QWidget, QVBoxLayout, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout vertical\")\n# Creem un layout vertical\nlayout_vertical = QVBoxLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_vertical)\nself.setCentralWidget(componente_principal)\nlayout_vertical.addWidget(QPushButton('Uno'))\nlayout_vertical.addWidget(QPushButton('Dos'))\nlayout_vertical.addWidget(QPushButton('Tres'))\nlayout_vertical.addWidget(QPushButton('Cuatro'))\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p></p> <p>Hem definit un component principal de tipus QWidget al qual assignem un layout vertical. A aquest layout hi afegim els components que utilitzarem. </p> <p>Si ara provem de redimensionar la finestra, els components canvien autom\u00e0ticament de mida per ajustar-se a l'amplada de la finestra i repartir-se de forma equitativa verticalment.</p> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/#13-qhboxlayout","title":"1.3. QHBoxLayout","text":"<p>En aquest apartat ens centrem en la disposici\u00f3 horitzontal dels components, fent \u00fas d'un layout horitzontal:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QWidget, QHBoxLayout, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout horitzontal\")\n# Creem un layout vertical\nlayout_horitzontal = QHBoxLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_horitzontal)\nself.setCentralWidget(componente_principal)\nlayout_horitzontal.addWidget(QPushButton('Uno'))\nlayout_horitzontal.addWidget(QPushButton('Dos'))\nlayout_horitzontal.addWidget(QPushButton('Tres'))\nlayout_horitzontal.addWidget(QPushButton('Cuatro'))\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p></p> <p>Si redimensionem la finestra, els botons no creixen verticalment, per\u00f2 si ho fan horitzontalment de forma proporcional.</p> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/#14-qgridlayout","title":"1.4. QGridLayout","text":"<p>Tot i que amb l'\u00fas de layouts verticals i horitzontals podr\u00edem aconseguir gaireb\u00e9 qualsevol disposici\u00f3, pot no resultar c\u00f2mode de gestionar en algunes ocasions. En aquests casos, pot ser m\u00e9s \u00fatil fer servir el layout en forma de quadr\u00edcula.</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QWidget, QGridLayout, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout cuadr\u00edcula\")\nlayout_cuadr\u00edcula = QGridLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_cuadr\u00edcula)\nself.setCentralWidget(componente_principal)\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,0'), 0, 0)\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,1'), 0, 1)\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,2'), 0, 2)\nlayout_cuadr\u00edcula.addWidget(QPushButton('0,3'), 0, 3)\nlayout_cuadr\u00edcula.addWidget(QPushButton('1,0-3'), 1, 0, 1, 4)\nlayout_cuadr\u00edcula.addWidget(QPushButton('2,0-1'), 2, 0, 1, 2)\nlayout_cuadr\u00edcula.addWidget(QPushButton('2,2-3'), 2, 2, 1, 2)\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s el seg\u00fcent:</p> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/#15-qformlayout","title":"1.5. QFormLayout","text":"<p>En alguns casos pot resultar molt c\u00f2mode utilitzar el QFormLayout, que \u00e9s un disseny pensat per a l'elaboraci\u00f3 de formularis. Normalment es faran servir com a entrada d'informaci\u00f3, per\u00f2 tamb\u00e9 pot servir per visualitzar-la, deshabilitant l'entrada de dades als components. Vegem-ne un exemple simple:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQWidget,\nQFormLayout,\nQLabel,\nQLineEdit,\nQSpinBox,\nQDoubleSpinBox\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout formulario\")\nlayout_formulario = QFormLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_formulario)\nself.setCentralWidget(componente_principal)\nlayout_formulario.addRow(QLabel(\"Texto: \"), QLineEdit())\nlayout_formulario.addRow(QLabel(\"Entero: \"), QSpinBox())\nlayout_formulario.addRow(QLabel(\"Decimal: \"), QDoubleSpinBox())\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s el seg\u00fcent:</p> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/3%20-%20Layouts/#16-qstackedlayout","title":"1.6. QStackedLayout","text":"<p>Finalment, vegem un layout que ens permet apilar components, per\u00f2 no de manera vertical de manera que tots s\u00f3n visibles, sin\u00f3 en profunditat, de manera que nom\u00e9s un dels elements ser\u00e0 visible, com si el port\u00e9ssim al capdavant. Per gestionar quin element \u00e9s visible utilitzem setCurrentIndex o setCurrentWidget. Vegem-ne un exemple:</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQWidget,\nQPushButton,\nQStackedLayout,\nQLabel,\nQVBoxLayout,\nQHBoxLayout\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Layout apilado\")\nlayout_principal = QHBoxLayout()\ncomponente_principal = QWidget()\ncomponente_principal.setLayout(layout_principal)\nself.setCentralWidget(componente_principal)\nself.pila = QStackedLayout()\nself.pila.addWidget(QLabel('Capa 1'))\nself.pila.addWidget(QLabel('Capa 2'))\nself.pila.addWidget(QLabel('Capa 3'))\nlayout_botones = QVBoxLayout()\nboton1 = QPushButton(\"Ver capa 1\")\nboton1.clicked.connect(self.activar_capa1)\nboton2 = QPushButton(\"Ver capa 2\")\nboton2.clicked.connect(self.activar_capa2)\nboton3 = QPushButton(\"Ver capa 3\") \nboton3.clicked.connect(self.activar_capa3)\nlayout_botones.addWidget(boton1)\nlayout_botones.addWidget(boton2)\nlayout_botones.addWidget(boton3)\nlayout_principal.addLayout(self.pila)\nlayout_principal.addLayout(layout_botones)\ndef activar_capa1(self):\nself.pila.setCurrentIndex(0)\ndef activar_capa2(self):\nself.pila.setCurrentIndex(1)\ndef activar_capa3(self):\nself.pila.setCurrentIndex(2)\napp = QApplication([])\nventana = VentanaPrincipal()\nventana.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s una interf\u00edcie semblant a l'\u00fas de pestanyes, per\u00f2 amb botons:</p> <p></p> <p>Flet vs PySide6</p> <p>Com haureu pogut observar, els equivalents en Flet serien el column, el row i l'stack.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/4%20-%20Menus/","title":"4 - Men\u00fas, barres de ferramentes i estat, i components flotants","text":""},{"location":"unitats/4-GUI-PySide6/teoria/4%20-%20Menus/#1-menus-barres-deines-barres-destat-i-components-flotants","title":"1. Men\u00fas, barres d'eines, barres d'estat i components flotants.","text":"<p>Si ens fixem a la finestra principal de qualsevol aplicaci\u00f3, la seva estructura b\u00e0sica sol seguir un esquema semblant al seg\u00fcent:</p> <ul> <li>Un men\u00fa, normalment en forma de desplegable, per\u00f2 pot ser en forma de pestanyes, com en aquest cas.</li> <li>Barres d'eines, amb funcionalitat habitual en un sol clic, a les quals accedir mitjan\u00e7ant men\u00fa seria m\u00e9s tedi\u00f3s.</li> <li>Component principal, que ocupa la part central de l'aplicaci\u00f3.</li> <li>Barra d'estat, que indica l'estat o la configuraci\u00f3 activa de l'aplicaci\u00f3.</li> </ul> <p></p> <p>En aquest apartat afegirem aquestes parts a la nostra finestra principal, fent \u00fas, com en apartats anteriors, de QMainWindow.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/4%20-%20Menus/#11-qactions","title":"1.1. QActions","text":"<p>Abans de comen\u00e7ar a abordar els men\u00fas i les barres d'eines, conv\u00e9 estudiar les QActions de Qt. A les aplicacions es pot executar una mateixa funcionalitat interaccionant amb diferents interf\u00edcies d'usuari, ja sigui a trav\u00e9s de men\u00fas, botons de la barra d'eines o dreceres de teclat. Aqu\u00ed \u00e9s on entren en joc les QAction de Qt. A m\u00e9s, se us pot assignar un text d'estat, que s'utilitzar\u00e0 a la barra d'estats.</p> <p>Exemple</p> <p>En un processador de textos, en utilitzar el men\u00fa \u201cFitxer -&gt; Guardar\u201d, el bot\u00f3 \u201cGuardar\u201d de la barra d'eines o utilitzar la drecera de teclat, Ctrl + s normalment, el fitxer que estem editant es guardar\u00e0 a disc. La funcionalitat \u00e9s la mateixa en els tres casos, per\u00f2 la interf\u00edcie utilitzada \u00e9s diferent. A la barra d'estats sol ser visible si el document en q\u00fcesti\u00f3 est\u00e0 desat o ha estat modificat.</p> <p>Un objecte QAction pot contenir una icona, un text de men\u00fa, una drecera de teclat, un text d'estat i un text d'ajuda. Alguns d'aquests elements es poden establir al constructor, per\u00f2 tamb\u00e9 es poden configurar de manera independent amb setIcon(), setText(), setIconText(), setShortcut(), setStatusTip(), setWhatsThis() i setToolTip(). Es pot canviar la font del men\u00fa amb setFont().</p> <p>Quan s'ha creat una QAction, l'afegim al men\u00fa i a la barra d'eines que volem utilitzar i despr\u00e9s el connectem a la ranura que executar\u00e0 la seua funcionalitat.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/4%20-%20Menus/#12-barra-de-menus","title":"1.2. Barra de men\u00fas","text":"<p>Per afegir men\u00fas a QMainWindow, utilitzarem el m\u00e8tode .addMenu() de la barra de men\u00fas menuBar(). A aquest nou men\u00fa podem afegir nous submen\u00fas amb addMenu() i separadors, per organitzar de forma m\u00e9s coherent les opcions, amb addSeparator().</p> <p>Per afegir una opci\u00f3 de men\u00fa que responga a una funcionalitat, utilitzarem els QAction. </p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import QApplication, QMainWindow\nfrom PySide6.QtGui import QAction, QKeySequence\n# Nuestra ventana principal hereda de QMainWindow\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Ventana principal con men\u00fa\")\nbarra_menus = self.menuBar()\nmenu = barra_menus.addMenu(\"&amp;Menu\")\naccion = QAction(\"&amp;Imprimir por consola\", self)\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\naccion.triggered.connect(self.imprimir_por_consola)\nmenu.addAction(accion)\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa o del atajo\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre> <p>El s\u00edmbol \u201c&amp;\u201d al text del Men\u00fa, ens facilita obrir el men\u00fa desplegable corresponent amb la combinaci\u00f3 de tecles Alt + car\u00e0cter. Fixa't que el car\u00e0cter en q\u00fcesti\u00f3 apareix subratllat al text del men\u00fa.</p> <p>Aix\u00ed, en el nostre exemple, en pr\u00e9mer Alt+M obrirem el desplegable d'aquest men\u00fa. Si tornem a pr\u00e9mer la tecla \u201ci\u201d, que apareix subratllada al desplegable, ens llan\u00e7ar\u00e0 l'acci\u00f3 definida al QAction, imprimir per consola. Fixa't que al codi hem assignat una combinaci\u00f3 de tecles a l'acci\u00f3, \u00e9s a dir una drecera de teclat per llan\u00e7ar-la. Aix\u00ed doncs, aquesta drecera ve indicada a l'opci\u00f3 del men\u00fa. Aix\u00f2 ens permet, sense desplegar el men\u00fa, llan\u00e7ar aquesta acci\u00f3.</p> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/4%20-%20Menus/#13-barra-deines","title":"1.3. Barra d'eines","text":"<p>Ampliarem l'exemple anterior afegint l'acci\u00f3 a una barra d'eines. Els passos a seguir serien els seg\u00fcents:</p> <ol> <li>Creem una barra d'eines instant la classe QToolBar</li> <li>Afegim l'acci\u00f3 a la barra d'eines amb el m\u00e8tode addAction</li> <li>Afegim la barra d'eines a la finestra principal amb addToolBar</li> </ol> <p>Per defecte, els botons a les barres d'eines segueixen el mateix estil que tinguem configurat al sistema, per\u00f2 si volem canviar aquest comportament, podem fer-ho amb la funcio setToolButtonStyle. Les opcions disponibles, que es troben al m\u00f2dul Qt de Qt.Core, s\u00f3n:</p> Flag Resultat Qt.ToolButtonIconOnly Nom\u00e9s mostra la icona Qt.ToolButtonTextOnly Nom\u00e9s mostra el text Qt.ToolButtonTextBesideIcon Mostra el text al costat de la icona Qt.ToolButtonTextUnderIcon Mostra el text de la icona Qt.ToolButtonFollowStyle Opci\u00f3 per defecte. Segueix la configuraci\u00f3 del sistema <p>Afegim l'acci\u00f3 d'imprimir per consola a la barra d'eines 1.</p> Python<pre><code>import os\nfrom PySide6.QtGui import QAction, QIcon, QKeySequence\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QToolBar\n# Nuestra ventana principal hereda de QMainWindow\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\n\"Ventana principal con men\u00fa i barra de herramientas\")\nbarra_menus = self.menuBar()\nmenu = barra_menus.addMenu(\"&amp;Menu\")\nruta_a_icono = os.path.join(os.path.dirname(\n__file__), \"images/console.png\")\naccion = QAction(QIcon(ruta_a_icono), \"Imprimir por consola\", self)\naccion.setWhatsThis(\n\"Al pulsar sobre el bot\u00f3n se imprimir\u00e1 un texto por consola\")\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\naccion.triggered.connect(self.imprimir_por_consola)\nmenu.addAction(accion)\nbarra_herramientas = QToolBar(\"Barra de herramientas 1\")\nbarra_herramientas.addAction(accion)\nself.addToolBar(barra_herramientas)\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa, del atajo\" +\n\" o de la barra de herramientas\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s la mateixa aplicaci\u00f3 per\u00f2 amb una barra d'eines, la qual podem situar a dalt o als laterals, punxant i arrossegant-la, i fer-la visible o invisible fent clic dret sobre ella i de nou clic sobre el bot\u00f3 de verificaci\u00f3.</p> <p></p> <p>Si us fixeu en el men\u00fa, amb la incorporaci\u00f3 de la icona a l'acci\u00f3, veureu que apareix la icona tamb\u00e9 al desplegable. Si no vols que apareguin, podem configurar l'aplicaci\u00f3 perqu\u00e8 no ho faci, fent \u00fas del m\u00e8tode setAttribute() i passant-li Qt.AA_DontShowIconsInMenus del m\u00f2dul Qt com a par\u00e0metre.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/4%20-%20Menus/#14-barra-destat","title":"1.4. Barra d'estat","text":"<p>En aquesta secci\u00f3 mostrarem com utilitzar la barra d'estat. El seu \u00fas principal ser\u00e0 mostrar informaci\u00f3 a l'usuari, i els m\u00e8todes m\u00e9s utilitzats addWidget, addPermanentWidget showMessage i clearMessage que ens serviran per afegir components i mostrar/ocultar missatges.</p> <p>Cada indicador d'estat pot ser d'una de les tres categories seg\u00fcents:</p> <ul> <li>Temporal: ocupa la barra d'estat mentre el punter est\u00e0 sobre una acci\u00f3 on s'ha configurat un statusTip. Tamb\u00e9 es pot mostrar utilitzant showMessage, en aquest cas s'oculta en v\u00e9ncer el timeout passat al constructor o en trucar al m\u00e8tode clearMessage. S'utilitza per donar informaci\u00f3 sobre eines o entrades de men\u00fa.</li> <li>Normal: mostra informaci\u00f3 a trav\u00e9s de components (QLabel, QProgressBar o fins i tot QToolButton) afegits a la barra d'eines. Un missatge temporal els pot ocultar i s'utilitza normalment per donar informaci\u00f3 a l'usuari sobre l'estat de la vostra aplicaci\u00f3, per exemple n\u00famero de p\u00e0gina en un document.</li> <li>Permanent: mai no s'amaga i s'utilitza cridant al m\u00e8tode addPermanentWidget. S'utilitza per a indicacions importants, per exemple, algunes aplicacions col\u00b7loquen un indicador de bloqueig de maj\u00fascules a la barra d'estat.</li> </ul> <p>Exemple</p> Python<pre><code>import os\nimport platform\nfrom PySide6.QtGui import QAction, QIcon, QKeySequence\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QToolBar, QLabel\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\n\"Ventana principal con men\u00fa, barra de herramientas \" +\n\" y barra de estado\")\nbarra_menus = self.menuBar()\nmenu = barra_menus.addMenu(\"&amp;Menu\")\nruta_a_icono = os.path.join(os.path.dirname(\n__file__), \"images/console.png\")\naccion = QAction(QIcon(ruta_a_icono), \"Imprimir por consola\", self)\naccion.setWhatsThis(\n\"Al pulsar sobre el bot\u00f3n se imprimir\u00e1 un texto por consola\")\naccion.setStatusTip(\"Imprimir por consola\")\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\naccion.triggered.connect(self.imprimir_por_consola)\nmenu.addAction(accion)\nbarra_herramientas = QToolBar(\"Barra de herramientas 1\")\nbarra_herramientas.addAction(accion)\nself.addToolBar(barra_herramientas)\nbarra_estado = self.statusBar()\nbarra_estado.addPermanentWidget(QLabel(platform.system()))\nbarra_estado.showMessage(\"Listo. Esperando acci\u00f3n ...\", 3000)\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa, del atajo \" +\n\" o de la barra de herramientas\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre>"},{"location":"unitats/4-GUI-PySide6/teoria/4%20-%20Menus/#15-components-flotants","title":"1.5. Components flotants","text":"<p>Finalment, estudiarem els components flotants, que ens aporten gran versatilitat a les aplicacions. S\u00f3n components que poden canviar d'ubicaci\u00f3, desacoblar-se i fins i tot tancar-se.</p> <p>Exemple</p> Python<pre><code>import os\nimport platform\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QAction, QIcon, QKeySequence\nfrom PySide6.QtWidgets import (\nQApplication, QMainWindow, QToolBar, QLabel, QDockWidget, QTextEdit)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\n\"Ventana principal con men\u00fa, barra de herramientas \" +\n\" y barra de estado\")\nbarra_menus = self.menuBar()\nmenu = barra_menus.addMenu(\"&amp;Menu\")\nruta_a_icono = os.path.join(os.path.dirname(\n__file__), \"images/console.png\")\naccion = QAction(QIcon(ruta_a_icono), \"Imprimir por consola\", self)\naccion.setWhatsThis(\n\"Al pulsar sobre el bot\u00f3n se imprimir\u00e1 un texto por consola\")\naccion.setStatusTip(\"Imprimir por consola\")\naccion.setShortcut(QKeySequence(\"Ctrl+p\"))\naccion.triggered.connect(self.imprimir_por_consola)\nmenu.addAction(accion)\nbarra_herramientas = QToolBar(\"Barra de herramientas 1\")\nbarra_herramientas.addAction(accion)\nself.addToolBar(barra_herramientas)\nbarra_estado = self.statusBar()\nbarra_estado.addPermanentWidget(QLabel(platform.system()))\nbarra_estado.showMessage(\"Listo. Esperando acci\u00f3n ...\", 3000)\ndock1 = QDockWidget()\ndock1.setWindowTitle(\"Componente base 1\")\ndock1.setWidget(QTextEdit(\"\"))\ndock1.setMinimumWidth(50)\nself.addDockWidget(Qt.RightDockWidgetArea, dock1)\nself.setCentralWidget(QLabel(\"Componente principal\"))\ndef imprimir_por_consola(self):\nprint(\"Acci\u00f3n lanzada a trav\u00e9s del men\u00fa, del atajo \" +\n\" o de la barra de herramientas\")\nif __name__ == \"__main__\":\napp = QApplication([])\nventana1 = VentanaPrincipal()\nventana1.show()\napp.exec()\n</code></pre> <p>El nou component Dock, pot ser resituat punxant i arrossegant sobre la barra de t\u00edtol cap a un dels cantons de la finestra principal. Podem tamb\u00e9 desacoblar-ho per mostrar-ho furea de la finestra i mostrar-ho o amagar-ho, igual que les barres d'eines. </p> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/","title":"5 - Di\u00e0legs i altres finestres","text":""},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/#1-dialegs-i-altres-finestres","title":"1. Di\u00e0legs i altres finestres.","text":"<p>Fins ara hem utilitzat el component QMainWindow per treballar amb les nostres aplicacions. En aquest apartat estudiarem com mostrar o demanar informaci\u00f3 a l'usuari a trav\u00e9s de diversos tipus de finestres.</p>"},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/#11-dialegs","title":"1.1. Di\u00e0legs","text":""},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/#111-qdialog","title":"1.1.1. QDialog","text":"<p>Tal com el seu nom indica, els di\u00e0legs s\u00f3n finestres emergents temporals que ens permeten comunicar-nos amb l'usuari de l'aplicaci\u00f3 i que apareixen a causa de la producci\u00f3 d'un esdeveniment. S\u00f3n finestres modals, \u00e9s a dir, bloquegen la interacci\u00f3 amb la resta de l'aplicaci\u00f3 fins que se n'acabe l'execuci\u00f3, siga tancant-los o introduint la informaci\u00f3 que es demana. </p> <p>Per aquest motiu, necessiten el seu propi bucle d'esdeveniments. Es pot evitar el bloqueig de l'execuci\u00f3 amb l'\u00fas de fils d'execuci\u00f3, per\u00f2 queda fora de l'abast d'aquest m\u00f2dul. S'hi hauria d'aplicar els coneixements adquirits al m\u00f2dul de Programaci\u00f3 de Serveis i Processos als desenvolupaments en Qt.</p> <p>A Qt els di\u00e0legs s'implementen com a classes de QDialog o les seves derivades. </p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import QApplication, QDialog, QMainWindow, QPushButton\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Aplicaci\u00f3 amb dialegs\")\nboton = QPushButton(\"Fes clic per a que aparega el dialeg\")\nboton.clicked.connect(self.mostrar_dialogo)\nself.setCentralWidget(boton)\ndef mostrar_dialogo(self):\nprint(\"Clic rebut, es mostrar\u00e0 el dialeg.\")\nventana_dialogo = QDialog(self)\nventana_dialogo.setWindowTitle(\"Finestra de dialeg\")\nventana_dialogo.exec()\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre>"},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/#112-dialegs-personalitzats","title":"1.1.2. Di\u00e0legs personalitzats","text":"<p>Un cop sabem crear un di\u00e0leg, anem a personalitzar-lo. Podem fer servir els QPushButton estudiats anteriorment, per\u00f2 a Qt hi ha una s\u00e8rie de botons predefinits dissenyats segons les guies d'estil de les diferents plataformes. Es recomana consultar aquestes guies perqu\u00e8 les nostres aplicacions siguen el m\u00e9s naturals a l'usuari.</p> <p>Els botons predefinits a Qt es troben al m\u00f2dul QDialogButtonBox com a propietats. A continuaci\u00f3 mostrem la llista completa d'estos, que deuria ser suficient per a qualsevol aplicaci\u00f3:</p> <ul> <li>QDialogButtonBox.Ok</li> <li>QDialogButtonBox.Open</li> <li>QDialogButtonBox.Save</li> <li>QDialogButtonBox.Cancel</li> <li>QDialogButtonBox.Close</li> <li>QDialogButtonBox.Discard</li> <li>QDialogButtonBox.Apply</li> <li>QDialogButtonBox.Reset</li> <li>QDialogButtonBox.RestoreDefaults</li> <li>QDialogButtonBox.Help</li> <li>QDialogButtonBox.SaveAll</li> <li>QDialogButtonBox.Yes</li> <li>QDialogButtonBox.YesToAll</li> <li>QDialogButtonBox.No</li> <li>QDialogButtonBox.Abort</li> <li>QDialogButtonBox.Retry</li> <li>QDialogButtonBox.Ignore</li> <li>QDialogButtonBox.NoButton</li> </ul> <p>Al seg\u00fcent exemple afegirem diversos botons a la nostra finestra. Per fer-ho:</p> <ol> <li>Crearem una variable amb els nostres botons separats per l'operador l\u00f2gic or \u201c|\u201d, ja que realment, els botons s\u00f3n variables bin\u00e0ries.</li> <li>Passarem aquesta variable com a primer par\u00e0metre a QDialogButtonBox, que contindr\u00e0 tots els nostres botons.</li> <li>Connectem els senyals dels botons a la ranura que desitgem. El m\u00e9s normal \u00e9s utilitzar com a ranura les ja predefinides.</li> </ol> <p>Consulteu https://doc.qt.io/qt-6/qdialogbuttonbox.html per a m\u00e9s informaci\u00f3 sobre els senyals QDialogButtonBox.</p> <p>Consulteu https://doc.qt.io/qt-6/qdialog.html per a m\u00e9s informaci\u00f3 sobre les ranures de QDialog.</p> <p>Exemple</p> Python<pre><code>from PySide6.QtWidgets import (\nQMainWindow, QApplication, QDialog, QDialogButtonBox, QVBoxLayout, QLabel,\nQPushButton\n)\nclass DialogoPersonalizado(QDialog):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"Dialogo personalizado\")\nbotones = QDialogButtonBox.Ok | QDialogButtonBox.Cancel\nself.caja_botones = QDialogButtonBox(botones)\nself.caja_botones.accepted.connect(self.accept)\nself.caja_botones.rejected.connect(self.reject)\nself.layout_dialogo = QVBoxLayout()\nself.layout_dialogo.addWidget(\nQLabel(\"Est\u00e1s seguro de querer realizar esta acci\u00f3n?\"))\nself.layout_dialogo.addWidget(self.caja_botones)\nself.setLayout(self.layout_dialogo)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Aplicaci\u00f3n con di\u00e1logo personalizado\")\nboton = QPushButton(\"Haz clic para que el dialogo aparezca\")\nboton.clicked.connect(self.mostrar_dialogo)\nself.setCentralWidget(boton)\ndef mostrar_dialogo(self):\nprint(\"Clic recibido, se mostrar\u00e1 el dialogo.\")\nventana_dialogo = DialogoPersonalizado(self)\nventana_dialogo.setWindowTitle(\"Ventana de dialogo personalizado\")\n# 1 si s'executa accept\n# 0 si s'executa reject\nresultado = ventana_dialogo.exec()\nif resultado:\nprint(\"Aceptada\")\nelse:\nprint(\"Cancelada\")\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre> <p>Traducci\u00f3 de di\u00e0legs</p> <p>Si executem el codi, observem que els botons mostren el text en angl\u00e8s. Podem utilitzar el seg\u00fcent m\u00e8tode per traduir els controls predefinits:</p> Python<pre><code>def carregar_traductor(self, app):\ntranslator = QTranslator(app)\ntranslations = QLibraryInfo.location(QLibraryInfo.TranslationsPath)\ntranslator.load(\"qt_ca\", translations)\napp.installTranslator(translator)\n...\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.carregar_traductor(app)\n</code></pre> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/#12-qmessagebox","title":"1.2. QMessageBox","text":"<p>A l'apartat anterior, hem personalitzat un QDialog, per\u00f2 hi ha quadres de di\u00e0leg ja predissenyats a Qt. Es troben disponibles al m\u00f2dul QMessageBox i hi ha quatre tipus segons el nivell de severitat de la informaci\u00f3 (question, information, warning i critical). Realment, l\u00fanica difer\u00e8ncia entre ells \u00e9s la icona que mostren. A la taula seg\u00fcent es mostren els nivells:</p> Icona Tipus de QMessageBox \u00das Question Preguntes a l'usuari en accions normals. Information nformaci\u00f3 a l'usuari en accions normals. Warning Informaci\u00f3 per a errors no cr\u00edtics. Critical Informaci\u00f3 per a errors cr\u00edtics. <p>Igual que en els QDialog, hi ha botons predefinits que podem utilitzar a les nostres QMessageBox. Aquesta \u00e9s la llista d'ells:</p> <ul> <li>QMessageBox.Ok</li> <li>QMessageBox.Open</li> <li>QMessageBox.Save</li> <li>QMessageBox.Cancel</li> <li>QMessageBox.Close</li> <li>QMessageBox.Discard</li> <li>QMessageBox.Apply</li> <li>QMessageBox.Reset</li> <li>QMessageBox.RestoreDefaults</li> <li>QMessageBox.Help</li> <li>QMessageBox.SaveAll</li> <li>QMessageBox.Yes</li> <li>QMessageBox.YesToAll</li> <li>QMessageBox.No</li> <li>QMessageBox .NoToAll</li> <li>QMessageBox.Abort</li> <li>QMessageBox.Retry</li> <li>QMessageBox.Ignore</li> <li>QMessageBox.NoButton</li> </ul> <p>Missatge cr\u00edtic t\u00edpic d'algunes aplicacions</p> Python<pre><code>from PySide6.QtCore import QLibraryInfo, QTranslator\nfrom PySide6.QtWidgets import (\nQApplication, QMessageBox, QMainWindow, QPushButton\n)\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle(\"Aplicaci\u00f3n con mesaje cr\u00edtico\")\nboton = QPushButton(\"Haz clic para ver el mensaje cr\u00edtico\")\nboton.clicked.connect(self.mostrar_dialogo)\nself.setCentralWidget(boton)\ndef mostrar_dialogo(self):\nboton_pulsado = QMessageBox.critical(\nself,\n\"Ejemplo de cuadro de mensaje cr\u00edtico\",\n\"Ha hab\u00eddo algun problema al realizar la acci\u00f3n\",\nbuttons=QMessageBox.Discard | QMessageBox.NoToAll |\nQMessageBox.Ignore,\ndefaultButton=QMessageBox.Discard\n)\nif boton_pulsado == QMessageBox.Discard:\nprint(\"Descartado!\")\nelif boton_pulsado == QMessageBox.NoToAll:\nprint(\"No a todo!\")\nelse:\nprint(\"Ignorado!\")\ndef cargar_traductor(app):\ntranslator = QTranslator(app)\ntranslations = QLibraryInfo.location(QLibraryInfo.TranslationsPath)\ntranslator.load(\"qt_ca\", translations)\napp.installTranslator(translator)\napp = QApplication([])\ncargar_traductor(app)\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre> <p>El resultat \u00e9s el seg\u00fcent:</p> <p></p>"},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/#13-altres-dialegs","title":"1.3. Altres di\u00e0legs","text":"<p>Hi ha altres tipus de di\u00e0legs que podeu trobar al m\u00f2dul QtWidgets. Aquests s\u00f3n m\u00e9s espec\u00edfics:</p> <ul> <li>QColorDialog: per especificar colors</li> <li>QFileDialog: per especificar fitxers o carpetes</li> <li>QFontDialog: per seleccionar les fonts</li> <li>QInputDialog: per demanar dades a l'usuari</li> <li>QProgressDialog: per informar del progr\u00e9s d'una operaci\u00f3 lenta</li> </ul> <p>Vegem uns simples exemples que poden resultar \u00fatils (ometem la part general de l'aplicaci\u00f3 per mostrar nom\u00e9s la part que ens interessa):</p> <p>Exemple d'altres di\u00e0legs</p> Obrir arxiuGuardar arxiuObtenir un colorObtenir una fontInformaci\u00f3 de l'usuariBarra de progr\u00e9s Python<pre><code>def mostrar_dialeg(self):\nfinestra_dialeg = QFileDialog.getOpenFileName(\nself, caption=\"Obrir fitxer...\", dir=\".\",\nfilter=\"Documents de text (*.txt);;Documents PDF (*.pdf)\",\nselectedFilter=\"Documents de text (*.txt)\")\nfitxer = finestra_dialeg[0]\n</code></pre> <p>NOTA: Si el fitxer ja existeix ens demana confirmaci\u00f3 de sobreescriptura </p>Python<pre><code>def mostrar_dialeg(self):\nfinestra_dialeg = QFileDialog.getSaveFileName(\nself, caption=\"Desa fitxer ...\", dir=\".\",\nfilter=\"Documents de text (*.txt);;Documents PDF (*.pdf)\",\nselectedFilter=\"Documents de text (*.txt)\")\nfitxer = finestra_dialeg[0]\nprint(arxiu)\n</code></pre> <p></p>Python<pre><code>def mostrar_dialeg(self):\ncolor = QColorDialog.getColor()\nif color.isValid():\n# Amb la seg\u00fcent l\u00ednia assignem el color seleccionat\n# com a color de fons del bot\u00f3 a trav\u00e9s de CSS\nself.boton.setStyleSheet(f\"background-color: {color.name()}\")\n</code></pre> <p></p>Python<pre><code>def mostrar_dialeg(self):\nseleccionada, font = QFontDialog.getFont(self)\nif seleccionada:\n# Assignem la font seleccionada al bot\u00f3\nself.boton.setFont(font)\n</code></pre> <p>Amb QInputDialog podem obtenir valors de l'usuari. Text amb getText, sencers amb getInt, ... </p> <p>A l'exemple obtenim el mes de naixement d'una llista de mesos i l'imprimim per consola:</p> <p></p>Python<pre><code>def mostrar_dialeg(self):\nmes, seleccionat = QInputDialog.getItem(\nself, \"Mes de naixement\",  \"Messos\",\n[\"Gener\", \"Febrer\", \"Mar\u00e7\", \"Abril\", \"Maig\",\n\"Juny\", \"Juliol\", \"Agost\", \"Setembre\",\n\"Octubre\", \"Novembre\", \"Desembre\"]\n)\nif seleccionat:\nprint(mes)\n</code></pre> <p>Amb QProgressDialog podem mostrar la informaci\u00f3 de com avan\u00e7a un proc\u00e9s lent. Aquest tipus de processos s'haurien de llan\u00e7ar en un fil d'execuci\u00f3 perqu\u00e8 la interf\u00edcie no quede bloquejada en espera que el proc\u00e9s s'acabe. Simularem una c\u00f2pia de fitxers llan\u00e7ada amb un fil d'execuci\u00f3. El codi seg\u00fcent engloba conceptes del m\u00f2dul de Programaci\u00f3 de Serveis i Processos.</p> <p></p> Python<pre><code>import time\nfrom PySide6.QtCore import QThread, Signal\nfrom PySide6.QtWidgets import (\nQMainWindow, QPushButton, QProgressDialog, QApplication\n)\n# Classe Fil que simula un proc\u00e9s lent\nclass Hilo(QThread):\n# Senyal que transmet un nombre sencer al seu escoltador o ranura\nsenyal = Signal(int)\ndef __init__(self):\nsuper(Hilo, self).__init__()\nself.cancel\u00b7lat = False\ndef __del__(self):\nself.wait()\n# M\u00e8tode que s'executa en llan\u00e7ar el fil\n# Mentre no es cancel\u00b7li, el fil emetr\u00e0 un senyal amb un\n# sencer entre 0 i 10 cada 0,3 segons\ndef run(self):\nfor i in range(11):\nif not self.cancel\u00b7lat:\nself.senyal.emit(i)\ntime.sleep(0.5)\nelse:\nbreak\nclass FinestraPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setWindowTitle('Aplicaci\u00f3 amb QProgressDialog')\nself.boton = QPushButton('Clic per iniciar la c\u00f2pia de fitxers')\nself.boton.clicked.connect(self.mostrar_dialeg_progr\u00e9s)\nself.setCentralWidget(self.boton)\ndef mostrar_dialeg_progr\u00e9s(self):\n# Deshabilitem el bot\u00f3 per evitar que es llanci un altre fil\nself.boton.setEnabled(False)\n# Creem un QProgessDialog entre 0 i 10 i un bot\u00f3 Cancel\u00b7la\nself.barra_progr\u00e9s = QProgressDialog(\n\"Copiant fitxers ...\", \"Cancel\u00b7lar\", 0, 10, self)\nself.barra_progreso.setWindowTitle(\"Di\u00e0leg de progr\u00e9s\")\n# Connectem el senyal cancel\u00b7lat del QProgressDialog a la ranura\nself.barra_progreso.canceled.connect(self.cancelar)\n# Creem un fil d'execuci\u00f3\nself.fil = Fil()\n# Connectem el senyal del fil a la ranura\nself.fil.senyal.connect(self.senyal_rebuda)\n# Llancem l'execuci\u00f3 del fil\nself.fil.start()\n# Mostrem la barra de progr\u00e9s\nself.barra_progreso.show()\ndef senyal_rebuda(self, progr\u00e9s):\n# Quan rebem el senyal del fil, incrementem\n# el progr\u00e9s amb el valor rebut\nself.barra_progreso.setValue(int(progr\u00e9s))\n# Quan arribi al 100% esperem 0.5si tanquem el di\u00e0leg\nif int(progr\u00e9s) == 10:\ntime.sleep(0.5)\nself.barra_progreso.close()\n# En donar-li al bot\u00f3 cancel\u00b7lar del di\u00e0leg, aturem l'enviament de senyals.\n# El di\u00e0leg es tancar\u00e0 i el bot\u00f3 el tornem a habilitar\ndef cancel\u00b7lar(self):\nself.fil.cancel\u00b7lat = True\nself.boton.setEnabled(True)\nif __name__ == \"__main__\":\napp = QApplication([])\nfinestra_principal = FinestraPrincipal()\nfinestra_principal.show()\napp.exec()\n</code></pre>"},{"location":"unitats/4-GUI-PySide6/teoria/5%20-%20Dialegs/#14-altres-finestres","title":"1.4. Altres finestres","text":"<p>Fins ara hem vist diferents di\u00e0legs modals que executen al seu propi bucle d'esdeveniments i bloquegen la resta de l'aplicaci\u00f3. Per\u00f2 de vegades ens pot interessar obrir una altra finestra sense bloquejar la finestra principal.</p> <p>Finestres</p> <p>A Qt, qualsevol widget sense parent \u00e9s una finestra. Aix\u00f2, a efectes pr\u00e0ctics, vol dir que per mostrar una finestra nova, nom\u00e9s hem de crear un Widget i cridar al seu m\u00e8tode show(). Fixa't que fins i tot podr\u00edem crear una aplicaci\u00f3 amb diversos QMainWindows.</p> <p>Dues finestres en una mateixa aplicaci\u00f3</p> Python<pre><code>from PySide6.QtWidgets import (\nQApplication, QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget\n)\nclass OtraVentana(QLabel):\ndef __init__(self):\nsuper().__init__()\nself.setText(\"La otra ventana\")\nclass VentanaPrincipal(QMainWindow):\ndef __init__(self):\nsuper().__init__()\nself.otra_ventana = None  # Refer\u00e8ncia nula\nself.setWindowTitle(\"Aplicaci\u00f3n con dos ventanas\")\nself.boton = QPushButton(\"Mostrar/ocultar otra ventana\")\nself.boton.clicked.connect(self.mostrar_otra_ventana)\nself.setCentralWidget(self.boton)\ndef mostrar_otra_ventana(self):\nif self.otra_ventana is None:\nself.otra_ventana = OtraVentana()\nself.otra_ventana.move(self.pos())\nself.otra_ventana.show()\nelse:\nif self.otra_ventana.isHidden():\nself.otra_ventana.move(self.pos())\nself.otra_ventana.show()\nelse:\nself.otra_ventana.hide()\napp = QApplication([])\nventana_principal = VentanaPrincipal()\nventana_principal.show()\napp.exec()\n</code></pre>"},{"location":"unitats/5-Interficies-LM/enlla%C3%A7os/enlla%C3%A7os/","title":"Enlla\u00e7os","text":""},{"location":"unitats/5-Interficies-LM/enlla%C3%A7os/enlla%C3%A7os/#unitat-5-generacio-dinterficies-a-partir-de-llenguatges-de-marques","title":"Unitat 5 - Generaci\u00f3 d'interf\u00edcies a partir de llenguatges de marques","text":""},{"location":"unitats/5-Interficies-LM/enlla%C3%A7os/enlla%C3%A7os/#enllacos-dinteres","title":"Enlla\u00e7os d'inter\u00e9s","text":"<ol> <li>Format de fitxcer UI de Qt Designer</li> <li>Icon Gallery</li> </ol>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/","title":"1 - Activitats","text":""},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#a2-eines-de-disseny-dinterficies-basades-en-llenguatges-de-marques","title":"A2 - Eines de disseny d'interf\u00edcies basades en llenguatges de marques","text":""},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#formulari","title":"Formulari","text":"<p>Hem vist durant la teoria de l'apartat que Qt Designer ofereix diverses plantilles a l'hora de crear un nou formulari. En total s\u00f3n cinc plantilles diferents: una per a una finestra principal, tres relacionades amb di\u00e0legs i una per crear un nou components (widget). En aquesta activitat, cal crear un nou formulari amb cada una de les plantilles disponibles, i analitzar a l'Inspector d'objectes de Qt Designer els objectes que per defecte s'han introdu\u00eft per a cada una de les plantilles.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#editor-de-text-i","title":"Editor de text I","text":"<p>Utilitzant Qt Designer, dissenyant una aplicaci\u00f3 per a l'edici\u00f3 de text, prenent com a base la captura seg\u00fcent:</p> <p></p> <p>Tin en compte que els botons han de realitzar la funcionalitat esperada per a cada un d'ells, i que en redimensionar la finestra els diferents components han de canviar el seu tamany de forma l\u00f2gica. L'etiqueta que apareix a la part superior s'ha configurat amb un tamany de font de 11, i en negreta.</p> <p>Ajuda</p> <p>Quan dissenyem layouts complexos en Qt Designer (que inclouen layouts niuats a altres layouts) sol ser m\u00e9s pr\u00e0ctic aplicar un enfocament de baix cap a dalt, creant primer els layouts interiors, i progressivament creant els layouts de nivells superiors fins arribar al layout principal.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#a3-us-de-la-interficie-en-una-aplicacio","title":"A3 - \u00das de la interf\u00edcie en una aplicaci\u00f3","text":""},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#formulari_1","title":"Formulari","text":"<p>En aquesta activitat haur\u00e0s de fer algunes modificacions a l'arxiu formulari.ui de la teoria utilitzant un editor de text en lloc de Qt Designer. Els canvis que has de fer s\u00f3n:</p> <ul> <li>Canvia el t\u00edtol de la finestra per \"Activitat 3\u201d.</li> <li>Modificar el bot\u00f3 de tancar per qu\u00e8 en lloc de tancar la finestra, la maximitze (haur\u00e0s de modificar tant el bot\u00f3, com la connexi\u00f3 de la senyal a la ranura).</li> </ul> <p>Una vegada realitzats els canvis, podeu executar l'arxiu que carrega el formulari i comprovar que els canvis funcionen correctament.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#editor-de-text-ii","title":"Editor de text II","text":"<p>Partint de l'editor de text dissenyat a l'apartat anterior, haur\u00e0s de crear el programa principal que utilitze el fitxer de disseny UI generat, utilitzant les dues alternatives vistes als continguts te\u00f2rics (generaci\u00f3 del codi Python associat, i c\u00e0rrega directa del fitxer UI). A m\u00e9s, al programa principal, caldr\u00e0 establir el seg\u00fcent text d'ajuda a l'usuari al quadre de text: \u201cEscriu el teu text aqu\u00ed\u2026\u201d.</p> <p>Ajuda</p> <p>Haur\u00e0s de crear dos programes principals, un per a cada alternativa d'\u00fas del fitxer UI. Et pots basar en els exemples inclosos a la unitat.</p> <p>La propietat del control QTextEdit que permet establir el text d'ajuda s'anomena placeholderText.</p>"},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#a4-funcionalitats-avancades-de-leina-de-disseny","title":"A4 - Funcionalitats avan\u00e7ades de l'eina de disseny","text":""},{"location":"unitats/5-Interficies-LM/tasques/1%20-%20Activitats/#formulari_2","title":"Formulari","text":"<p>Dades personals</p> <p>Dissenya un nou formulari basant-te en la captura de pantalla seg\u00fcent, associant a les etiquetes els corresponents companys. A m\u00e9s, defineix el seg\u00fcent ordre de tabulaci\u00f3:</p> <p></p> <ol> <li>Nom</li> <li>DNI</li> <li>Cognoms</li> <li>Tel\u00e8fon</li> <li>Direcci\u00f3</li> <li>Correu</li> <li>Bot\u00f3 Acceptar</li> <li>Bot\u00f3 Cancel\u00b7lar</li> </ol> <p>Ajuda</p> <p>Recorda que perqu\u00e8 la funcionalitat de controls companys funcioni correctament les etiquetes han de tenir assignat un car\u00e0cter d'acc\u00e9s r\u00e0pid a la seva propietat text, anteposant un ampersand (&amp;) abans del car\u00e0cter triat. Tingues en compte a m\u00e9s que el mateix car\u00e0cter no es pot utilitzar en dues etiquetes diferents.</p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/","title":"2 - Pr\u00e0ctiques","text":""},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#practica-1-politica-de-mida-politica-de-mida","title":"Pr\u00e0ctica 1: Pol\u00edtica de mida (Pol\u00edtica de mida)","text":"<p>Com hem vist en els continguts te\u00f2rics, l'\u00fas dels diferents tipus de layout i el seu nedament no sempre \u00e9s suficient per aconseguir el comportament desitjat de la interf\u00edcie quan la finestra es redimensiona. Per aix\u00f2 Qt incorpora altres mecanismes, com els espaiadors o les pol\u00edtiques de mida.</p> <p>La pol\u00edtica de mida d'un control est\u00e0 formada per dos grups de valors: la configuraci\u00f3 (horitzontal i vertical) i la pol\u00edtica que s'aplicar\u00e0 al component quan es redimensione la finestra (i tamb\u00e9 es distingeix entre pol\u00edtica horitzontal i vertical).</p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#ajust-horitzontal-i-vertical","title":"Ajust horitzontal i vertical","text":"<p>El factor d\u02bbajust (estirar) \u00e9s un nombre que per defecte t\u00e9 el valor 0. S'utilitza per alterar la proporcionalitat del repartiment de l'espai que el layout fa entre els membres, que per defecte \u00e9s equitativa (\u00e9s a dir, reparteix l'espai a tots per igual). En cas que especifiqueu un valor a l'ajust, el layout repartir\u00e0 l'espai proporcionalment segons aquests valors.</p> <p>EXEMPLE</p> <p>Si en un formulari amb un layout vertical situem tres controls d'edici\u00f3 de text (QTextEdit) sabem que, en redimensionar la finestra, es repartir\u00e0 l'alt disponible a parts iguals entre els tres controls. Per\u00f2 si canviem el factor d\u02bbajust vertical als tres controls amb els valors 1, 2 i 3 respectivament, comprovarem que el repartiment \u00e9s diferent. Lespai assignat al segon control ser\u00e0 el doble que el del primer, i el tercer control disposar\u00e0 del triple despai respecte al primer.</p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#politica-horitzontal-i-vertical","title":"Pol\u00edtica horitzontal i vertical","text":"<p>La pol\u00edtica determina com es canviar\u00e0 la mida del component quan es redimensioni la finestra, i estar\u00e0 condicionada per la mida ideal del component (conegut comconsell de mida). Aquesta mida ideal la determina internament Qt per a cada component en funci\u00f3 del tipus de component i del seu contingut.</p> <p>Els diferents valors que pot prendre la pol\u00edtica sorgeixen per la combinaci\u00f3 de quatre indicadors obanderes:</p> <ul> <li>GrowFlag: el component podr\u00e0 cr\u00e9ixer per sobre de la seva mida ideal si cal.</li> <li>Expandir bandera: el component ha de cr\u00e9ixer tot el que sigui possible.</li> <li>ShrinkFlag: el component pot encongir per sota de la seva mida ideal si cal.</li> <li>Ignora la bandera: s'ignora la mida ideal, i el component tindr\u00e0 tot l'espai possible.</li> </ul> <p>Les diferents combinacions d'aquests flags donen lloc als possibles valors que podem donar a la pol\u00edtica horitzontal i vertical:</p> <ul> <li>Fixed: No se aplica ning\u00fan flag, por lo que la \u00fanica alternativa es el tama\u00f1o ideal.</li> <li>Minimum: GrowFlag</li> <li>Maximum: ShrinkFlag</li> <li>Preferred: GrowFlag | ShrinkFlag</li> <li>Expanding: GrowFlag | ShrinkFlag | ExpandFlag</li> <li>MinimumExpanding: GrowFlag | ExpandFlag</li> <li>Ignored: ShrinkFlag | GrowFlag | IgnoreFlag</li> </ul> <p>Exemple</p> <p>Els botons (QPushButton) tenen per defecte una pol\u00edtica vertical Fixed i horitzontal Minimum. Per aix\u00f2, la seva al\u00e7ada sempre s'estableix segons la mida ideal, i no canvia en redimensionar la finestra. No obstant aix\u00f2, la seva amplada pot cr\u00e9ixer per sobre del que indica la mida ideal, per\u00f2 no es pot reduir per sota d'aquest valor.</p> <p>En aquest cas pr\u00e0ctic haur\u00e0s de dissenyar amb Qt Designer la interf\u00edcie d'una aplicaci\u00f3, configurant adequadament la pol\u00edtica de mida d'alguns components perqu\u00e8 es comportin correctament en redimensionar la finestra. Tingues en compte les seg\u00fcents indicacions:</p> <ul> <li>El t\u00edtol de l'aplicaci\u00f3 se centrar\u00e0 en la finestra.</li> <li>El quadre de text tindr\u00e0 un alt fix (que ser\u00e0 lalt recomanat).</li> <li>El bot\u00f3Acceptartindr\u00e0 el doble dample que els botonsCancel \u00b7 lariAplicar.</li> </ul> <p>Els fitxers DI_U03_CPE_1_E_01.png i DI_U03_CPE_1_E_02.png contenen captures de pantalla de l'aplicaci\u00f3 amb diferents mides de finestra.</p> <p></p> <p></p>"},{"location":"unitats/5-Interficies-LM/tasques/2%20-%20Pr%C3%A0ctiques/#practica-2-el-sistema-de-recursos-de-qt","title":"Pr\u00e0ctica 2: El sistema de recursos de Qt","text":"<p>El sistema de recursos de Qt \u00e9s un mecanisme independent de la plataforma per incorporar recursos a la nostra aplicaci\u00f3 (com a icones o imatges), evitant les refer\u00e8ncies a fitxers amb la sintaxi espec\u00edfica de cada sistema operatiu.</p> <p>La utilitzaci\u00f3 del sistema de recursos implica dues accions:</p> <p>Crear un fitxer de col\u00b7lecci\u00f3 de recursos: aquests fitxers basats en XML contenen una llista dels recursos necessaris per a l'aplicaci\u00f3. Tenen extensi\u00f3.qrc. Processar el fitxer de recursos: el compilador de recursos de Qt (incl\u00f2s a les eines est\u00e0ndard de Qt) orcc, realitza un processament del fitxer de recursos, generant un fitxer de codi Python que pot ser importat per l'aplicaci\u00f3 per disposar dels recursos. La sintaxi de l'ordre \u00e9s molt senzilla.</p> Bash<pre><code>rcc -g python fichero_recursos.qrc -o salida.py\n</code></pre> <p>Qt Designer ens ajuda en la creaci\u00f3 dels fitxers de recursos i en la seva utilitzaci\u00f3 en els components de la nostra interf\u00edcie. Per aix\u00f2, tenim disponible el navegador de recursos, situat a la part inferior dreta de la finestra, al costat delEditor de senyals/slots. Des d'aqu\u00ed, fent servir el bot\u00f3Editar recursos (la icona de la qual \u00e9s un llapis), s'obrir\u00e0 l'editor de recursos.</p> <p>Amb els botons situats a la part inferior esquerra podrem gestionar els fitxers de recursos (permetent-nos crear-ne un de nou, obrir-ne un existent o eliminar un fitxer). Amb els botons de la dreta gestionarem els recursos del fitxer seleccionat (podent crear un nou prefix, afegir un recurs al prefix seleccionat o eliminar prefixos o recursos).</p> <p>Els prefixos es fan servir per organitzar els recursos dins del fitxer de recursos en diferents categories.</p> <p>Per utilitzar el recurs des de Qt Designer, elEditor de propietats ens oferir\u00e0 l'opci\u00f3 d'escollir un recurs a les propietats el tipus de les quals ho permeti (per exemple, la propietaticona d'unQToolButton).</p> <p>En aquesta pr\u00e0ctica haur\u00e0s d'utilitzar el sistema de recursos Qt per afegir una icona a la finestra d'alguna de les aplicacions que hem dissenyat durant aquesta unitat. Els passos a seguir seran:</p> <ol> <li>Necessites un fitxer d'icona per a la teva aplicaci\u00f3. Als enlla\u00e7os de la unitat tens la refer\u00e8ncia aGaleria d'icones, una completa galeria d'icones, la majoria amb llic\u00e8ncia Creative Commons.</li> <li>Afegeix la icona als recursos del formulari utilitzant el navegador de recursos de Qt Designer.</li> <li>Modifica la propietat windowIcon de la finestra del formulari, associant el recurs afegit.</li> <li>Utilitza rcc per convertir el fitxer de recursos a codi Python.</li> <li>Importa el fitxer Python generat perrcc al teu programa principal.</li> </ol>"},{"location":"unitats/5-Interficies-LM/teoria/1-Llenguatges%20de%20marques%20per%20a%20la%20generaci%C3%B3%20d%27interf%C3%ADcies/","title":"1 - Llenguatges de marques per a la generaci\u00f3 d'interf\u00edcies.md","text":""},{"location":"unitats/5-Interficies-LM/teoria/1-Llenguatges%20de%20marques%20per%20a%20la%20generaci%C3%B3%20d%27interf%C3%ADcies/#1-llenguatges-de-marques-per-a-la-generacio-dinterficies-dusuari","title":"1. Llenguatges de marques per a la generaci\u00f3 d'interf\u00edcies d'usuari","text":"<p>La majoria de les tecnologies d'interf\u00edcie d'usuari actuals ofereixen la possibilitat d'utilitzar un llenguatge de marques per a la generaci\u00f3 de la interf\u00edcie d'una aplicaci\u00f3, com a alternativa a la creaci\u00f3 d'interf\u00edcies per mitj\u00e0 de codi. Quasi tots aquests llenguatges es basen en XML, utilitzant la sintaxi d'elements i atributs per definir l'estructura i els components de la interf\u00edcie.  </p>"},{"location":"unitats/5-Interficies-LM/teoria/1-Llenguatges%20de%20marques%20per%20a%20la%20generaci%C3%B3%20d%27interf%C3%ADcies/#11-avantatges-dels-llenguatges-de-marques-per-a-la-generacio-dinterficies","title":"1.1. Avantatges dels llenguatges de marques per a la generaci\u00f3 d'interf\u00edcies","text":"<p>La utilitzaci\u00f3 d'aquest tipus de llenguatges ofereix els avantatges seg\u00fcents sobre la creaci\u00f3 utilitzant un llenguatge de programaci\u00f3:</p> <ul> <li>Millora la separaci\u00f3 de responsabilitats en l'aplicaci\u00f3, diferenciant clarament la interf\u00edcie d'usuari de la resta de capes.</li> <li>S\u00f3n llenguatges f\u00e0cilment entendibles, tant per les persones com per les m\u00e0quines.</li> <li>La seva estructura jer\u00e0rquica en forma d'arbre \u00e9s semblant a l'estructura visual establerta entre els components de la interf\u00edcie.</li> <li>Permeten reutilitzar el mateix disseny d'interf\u00edcie a diferents plataformes o amb diferents llenguatges de programaci\u00f3.</li> </ul>"},{"location":"unitats/5-Interficies-LM/teoria/1-Llenguatges%20de%20marques%20per%20a%20la%20generaci%C3%B3%20d%27interf%C3%ADcies/#12-llenguatges-de-marques-mes-utilitzats-per-a-la-generacio-dinterficies","title":"1.2. Llenguatges de marques m\u00e9s utilitzats per a la generaci\u00f3 d'interf\u00edcies","text":"<p>La taula seg\u00fcent recull alguns dels llenguatges de marques m\u00e9s populars per a la creaci\u00f3 d'interf\u00edcies gr\u00e0fiques d'usuari:</p> Llenguatge Descripci\u00f3 Qt UI Llenguatge associat al framework de desenvolupament d'interf\u00edcies Qt. \u00c9s el que veurem al llarg de la unitat. FXML Desenvolupat per Oracle per a la definici\u00f3 de la interf\u00edcie d'usuari a les aplicacions JavaFX. XAML Introdu\u00eft amb la tecnologia WPF, continua sent el llenguatge utilitzat per la majoria de tecnologies d'interf\u00edcie d'usuari de Microsoft (com UWP, WinUI o MAUI). Gtk UI Format utilitzat pel toolkit GTK, vinculat al projecte de programari lliure GNOME. Android XML Llenguatge utilitzat en el desenvolupament de la interf\u00edcie dusuari de les aplicacions m\u00f2bils Android. Storyboards Format desenvolupat per Apple per a la interf\u00edcie dusuari de les aplicacions m\u00f2bils iOS. <p>Exemples</p> Qt UIFXMLGtk UIXAML XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ui version=\"4.0\"&gt;\n&lt;class&gt;MainWindow&lt;/class&gt;\n&lt;widget class=\"QMainWindow\" name=\"MainWindow\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;435&lt;/width&gt;\n&lt;height&gt;267&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"windowTitle\"&gt;\n&lt;string&gt;MainWindow&lt;/string&gt;\n&lt;/property&gt;\n&lt;widget class=\"QWidget\" name=\"centralwidget\"&gt;\n&lt;widget class=\"QLabel\" name=\"label\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;73&lt;/width&gt;\n&lt;height&gt;16&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"text\"&gt;\n&lt;string&gt;Hola mundo&lt;/string&gt;\n&lt;/property&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;resources/&gt;\n&lt;connections/&gt;\n&lt;/ui&gt;\n</code></pre> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?import javafx.scene.layout.VBox?&gt;\n&lt;?import javafx.scene.control.Label?&gt;\n&lt;VBox&gt;\n&lt;children&gt;\n&lt;Label text=\"Hola mundo\"/&gt;\n&lt;/children&gt;\n&lt;/VBox&gt;\n</code></pre> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;interface&gt;\n&lt;requires lib=\"gtk+\" version=\"3.20\"/&gt;\n&lt;object class=\"GtkApplicationWindow\" id=\"window\"&gt;\n&lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n&lt;child&gt;\n&lt;placeholder/&gt;\n&lt;/child&gt;\n&lt;child&gt;\n&lt;object class=\"GtkLabel\"&gt;\n&lt;property name=\"visible\"&gt;True&lt;/property&gt;\n&lt;property name=\"can_focus\"&gt;False&lt;/property&gt;\n&lt;property name=\"label\" translatable=\"yes\"&gt;\nHola mundo\n            &lt;/property&gt;\n&lt;property name=\"use_markup\"&gt;True&lt;/property&gt;\n&lt;/object&gt;\n&lt;/child&gt;\n&lt;/object&gt;\n&lt;/interface&gt;\n</code></pre> XML<pre><code>&lt;Window x:Class=\"HolaMundo.MainWindow\" xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" Title=\"MainWindow\"&gt;\n&lt;Grid&gt;\n&lt;TextBlock&gt;Hola mundo&lt;/TextBlock&gt;\n&lt;/Grid&gt;\n&lt;/Window&gt;\n</code></pre> <p>IMPORTANT</p> <p>Tot i que la major part de tecnologies relacionades amb la interf\u00edcie d'usuari incorporen llenguatges de marques per a la definici\u00f3 d'interf\u00edcies, no sempre \u00e9s aix\u00ed. En el cas de Flutter, el framework multiplataforma de Google, la interf\u00edcie nom\u00e9s es pot crear mitjan\u00e7ant el llenguatge de programaci\u00f3 declarativa Dart.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/","title":"2 - Ferramentes de disseny basades en llenguatges de marques","text":""},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#1-eines-de-disseny-dinterficies-basades-en-llenguatges-de-marques","title":"1. Eines de disseny d'interf\u00edcies basades en llenguatges de marques","text":"<p>A l'hora d'utilitzar un llenguatge de marques per a la generaci\u00f3 de la interf\u00edcie d'usuari d'una aplicaci\u00f3, normalment se'ns presenten dues opcions:</p> <ul> <li>Utilitzar directament el llenguatge de marques per definir els diferents elements que formaran la interf\u00edcie i les seves propietats, ajudant-nos d'algun editor de text o codi (com ara Visual Studio Code).</li> <li>Fer \u00fas d'una eina de disseny tipus WYSIWYG (what you see is what you get), que ens permetr\u00e0 definir la interf\u00edcie d'usuari en un entorn visual. L'eina generar\u00e0 autom\u00e0ticament el codi corresponent en el llenguatge de marques.</li> </ul> <p>Tot i que alguns llenguatges de marques per generar interf\u00edcies estan m\u00e9s orientats a ser utilitzats directament pels desenvolupadors, tots disposen d'una eina de disseny visual. La taula seg\u00fcent mostra les eines associades als llenguatges que vam veure a l'apartat anterior.</p> Llenguatge Descripci\u00f3 Qt UI Qt Designer (independent o integrada a l'IDE Qt Creator). FXML JavaFX SceneBuilder (independent o integrada als IDEs NetBeans, Eclipse o IntelliJ). XAML Dissenyador XAML de l'IDE Visual Studio o Blend per a Visual Studio. Gtk UI Glade (independent o integrat en algun IDE com Anjuta DevStudio). Android XML Editor de disseny (Layout Editor) de l'IDE Android Studio. Storyboards Interface Builder de l'IDE Xcode. <p>En aquest apartat ens centrarem en les funcionalitats d'una d'aquestes eines, Qt Designer, inclosa al framework Qt.</p> <p>Important</p> <p>Encara que a partir d\u00b4ara ens dedicarem a l\u00b4eina Qt Designer, la majoria de les eines de disseny visual d\u00b4interf\u00edcies d\u00b4usuari ofereixen funcionalitats molt similars a les que veurem en aquest apartat.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#11-primers-passos-amb-qt-designer","title":"1.1. Primers passos amb Qt Designer","text":"<p>El proc\u00e9s de disseny d'un formulari amb Qt Designer sol compondre's de les etapes seg\u00fcents:</p> <ol> <li>Crear un nou formulari.</li> <li>Situar-hi els controls que necessitem, configurant-ne les propietats.</li> <li>Organitzar els controls amb el layout desitjat.</li> <li>Connectar senyals a ranures.</li> <li>Previsualitzar-ne el resultat.</li> </ol> <p>En obrir l'eina apareixer\u00e0 el di\u00e0leg per crear un formulari nou.</p> <p></p> <p>Des d'aqu\u00ed podrem crear un nou formulari escollint una de les plantilles disponibles:</p> <ul> <li>Main Window, per crear una finestra principal.</li> <li>Dialog, per crear un nou di\u00e0leg, podent triar entre diferents configuracions de botons.</li> <li>Widget, per crear un nou component, que podr\u00e0 ser utilitzat de manera independent, o integrat en una finestra o di\u00e0leg.</li> </ul> <p>Una vegada triat el tipus de formulari, apareixer\u00e0 la finestra principal de Qt Designer (a la imatge, per a un formulari de tipus finestra principal).</p> <p></p> <p>Podem distingir les seg\u00fcents zones a la finestra principal:</p> <ol> <li>Zona de disseny, on apareix la nostra finestra i podem arrossegar els components que formaran la interf\u00edcie d'usuari.</li> <li>Caixa de widgets, amb tots els components disponibles a Qt organitzats per categories. Des d\u00b4aqu\u00ed podrem arrossegar directament un component a la finestra.</li> <li>Inspector d'objectes, que mostra l'estructura jer\u00e0rquica dels components de la nostra interf\u00edcie, indicant la classe de cadascun d'aquests components. Tamb\u00e9 ens permet seleccionar un component concret de la interf\u00edcie per modificar-ne les propietats.</li> <li>Editor de propietats, que ens ajuda a modificar el valor de les diferents propietats del component seleccionat. Per defecte, les propietats apareixen agrupades per la classe a qu\u00e8 pertanyen dins la cadena d'her\u00e8ncia del component.</li> <li>Editor de senyals/ranures, des d'on podrem associar els senyals emesos pels components amb les ranures predeterminades que ofereixen alguns components. L'Editor d'accions i el Navegador de recursos tamb\u00e9 s\u00f3n accessibles per mitj\u00e0 de pestanyes en aquesta zona.</li> </ol> <p>Important</p> <p>Podem personalitzar la disposici\u00f3 de les diferents zones comentades arrossegant-les a la part de la finestra on ens resulti m\u00e9s c\u00f2mode tenir-les. Tamb\u00e9 podem fer servir el men\u00fa Vista de l'aplicaci\u00f3 per decidir quines eines tenir visibles.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#12-distribucio-dels-components-layout","title":"1.2. Distribuci\u00f3 dels components (layout)","text":"<p>Qt Designer ens permet definir de forma c\u00f2moda i r\u00e0pida la disposici\u00f3 dels nostres components, podent aplicar les diferents opcions de layout de Qt vistes a la unitat anterior. </p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#121-layout-principal","title":"1.2.1. Layout principal","text":"<p>\u00c9s important que definim un layout principal per al nostre formulari, que estableixi la manera com s'organitzen els components de la interf\u00edcie en el nivell m\u00e9s alt.</p> <p>Important</p> <p>Abans de poder configurar el layout principal del nostre formulari haurem d'haver incl\u00f2s almenys un control. Si no ho fem, les opcions de layout estaran deshabilitades.</p> <p>Per assignar un layout a la finestra principal, seleccionarem la finestra (fent clic a una \u00e0rea sense ocupar del nostre formulari, o seleccionant l'objecte arrel a l'Inspector d'objectes), i aplicarem el layout desitjat utilitzant les opcions del men\u00fa Formulari o la barra d'eines associada. </p> <p></p> <p>Un dels grans avantatges d'una eina visual com Qt Designer \u00e9s que podrem veure a la pr\u00f2pia eina el resultat d'aplicar el layout, permetent fins i tot redimensionar la finestra per comprovar si el comportament de la interf\u00edcie s'ajusta al que desitja. A m\u00e9s, ens resultar\u00e0 molt senzill afegir nous controls al layout, ja que en arrossegar-los des de la Caixa de widgets apareixer\u00e0 una l\u00ednia de guia blava al formulari que ens ajudar\u00e0 a posicionar el component dins del layout.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#122-layouts-niuats-anidados","title":"1.2.2. Layouts niuats (anidados)","text":"<p>A m\u00e9s de definir un layout per a la nostra finestra principal, \u00e9s molt probable que el disseny de la nostra interf\u00edcie necessiti niar al seu interior altres layouts per aconseguir el posicionament adequat dels components. </p> <p>Per crear un nou layout a Qt Designer simplement haurem d'arrossegar-lo des de la Caixa de widgets (a la secci\u00f3 Layouts) fins a la posici\u00f3 desitjada al formulari. Una vegada inserit, apareixer\u00e0 com un requadre vermell a la finestra, i s'haur\u00e0 afegit a l' Inspector d'objectes com a objecte independent. D'aquesta manera, podrem seleccionar-ho f\u00e0cilment per poder editar-ne les propietats. I ja podrem arrossegar altres components al seu interior.</p> <p>Tamb\u00e9 tenim l'opci\u00f3 de seleccionar diversos controls alhora (utilitzant la tecla Ctrl) i seleccionar per a ells un layout des del men\u00fa Formulari o utilitzant l'opci\u00f3 Distribuci\u00f3 del men\u00fa contextual. Aquesta alternativa la podrem fer servir sempre que els controls no estiguin pr\u00e8viament afegits en un layout.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#123-altres-opcions-per-a-la-distribucio-de-components","title":"1.2.3. Altres opcions per a la distribuci\u00f3 de components","text":"<p>Tot i que els diferents layouts disponibles a Qt i la possibilitat de combinar-los ens aporten gran flexibilitat, normalment no n'hi ha prou per aconseguir dissenys d'interf\u00edcie complexos. Qt inclou altres funcionalitats que complementen el sistema de layout, i que tamb\u00e9 tindrem disponibles a Qt Designer. </p> <p>Una daquestes possibilitats s\u00f3n els espaiadors, que permeten introduir un espai entre controls dins un layout. Per utilitzar-los, simplement els arrossegarem des de la Caixa de ginys (a la secci\u00f3 Spacers) podent triar entre un espaiador vertical o horitzontal.</p> <p>L'altra caracter\u00edstica clau de Qt a l'hora d'organitzar els components del formulari \u00e9s l'\u00fas de les propietats relacionades amb la mida del component i el seu comportament en redimensionar el formulari:</p> <ul> <li>Pol\u00edtica de mida (sizePolicy): permet configurar la manera com el component canviar\u00e0 la mida en redimensionar el formulari. Es compon de:<ul> <li>Pol\u00edtica (horitzontal i vertical): hi ha diferents tipus de pol\u00edtica, que es diferencien en la manera com el sistema de layout de Qt assigna l'amplada i l'alt al component en relaci\u00f3 a la seva mida ideal (conegut com sizeHint).</li> <li>Ajustament (horitzontal i vertical): representa un factor d'ajustament proporcional, que permet que el repartiment d'espai entre els controls no sigui equitatiu. </li> </ul> </li> <li>Mides m\u00ednim (minimunSize) i m\u00e0xim (maximumSize): per definir un l\u00edmit inferior i superior a l'alt i l'amplada del component. </li> </ul> <p>Totes aquestes propietats es poden modificar directament a Qt Designer utilitzant l'Editor de propietats.</p> <p></p> <p>Important</p> <p>Recordeu que el nostre objectiu sempre ha de ser aconseguir que la interf\u00edcie es comporti com necessitem, per\u00f2 amb la configuraci\u00f3 de layout m\u00e9s senzilla que sigui possible.</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#13-connexio-de-senyals-a-ranures","title":"1.3. Connexi\u00f3 de senyals a ranures","text":"<p>Qt Designer tamb\u00e9 permet associar un senyal d'un component a alguna de les ranures d'un altre component. Per fer-ho, cal canviar al mode Edici\u00f3 de senyals/slots.</p> <p>Modes d'edici\u00f3</p> <p>Qt Designer disposa de quatre modes d'edici\u00f3 (widgets, senyals/slots, companys i ordre de pestanyes). El mode per defecte \u00e9s el mode Edici\u00f3 de widgets, que ens permet arrossegar components al formulari i configurar-los. Per canviar de manera podem utilitzar el men\u00fa Edita o les opcions associades de la barra d'eines.</p> <p>Una vegada en el mode Edici\u00f3 de senyals/slots, simplement polsarem el control que origina el senyal i arrossegarem la fletxa vermella fins al que cont\u00e9 la ranura. Aleshores apareixer\u00e0 la finestra de configuraci\u00f3 de la connexi\u00f3, on podrem associar el senyal origen amb l'slot dest\u00ed.</p> <p></p> <p>Una vegada creada la connexi\u00f3, es podr\u00e0 visualitzar i editar en qualsevol moment tornant al mode Edici\u00f3 senyals/slots, o mitjan\u00e7ant l' Editor de senyals/slots situat a la part inferior dreta de la finestra principal de Qt Designer. </p> <p>Important</p> <p>Si volem associar un senyal a una ranura definida per nosaltres, ho farem des del codi Python com vam veure a la unitat anterior. Per poder referenciar els controls des del codi, \u00e9s Important que us assignem un identificador a Qt Designer (propietat objectName).</p>"},{"location":"unitats/5-Interficies-LM/teoria/2-Ferramentes%20de%20disseny%20basades%20en%20llenguatges%20de%20marques/#14-previsualitzar-el-resultat","title":"1.4. Previsualitzar el resultat","text":"<p>Durant el proc\u00e9s de creaci\u00f3 del nostre formulari amb Qt Designer podem obtenir una vista pr\u00e8via del resultat, molt m\u00e9s propera a com es veur\u00e0 realment el nostre disseny quan s'executi l'aplicaci\u00f3. Per fer-ho, tenim l'opci\u00f3 Vista pr\u00e8via del men\u00fa Formulari. Tamb\u00e9 en aquest men\u00fa se'ns ofereix la possibilitat de previsualitzar el formulari amb estils diferents de l'establert per defecte.</p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/","title":"3 - \u00das de la interf\u00edcie en una aplicaci\u00f3","text":""},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#1-us-de-la-interficie-en-una-aplicacio","title":"1. \u00das de la interf\u00edcie en una aplicaci\u00f3","text":"<p>Com ja hem vist, gran part de les tecnologies d'interf\u00edcie d'usuari actuals disposen d'un llenguatge de marques per definir el disseny de les finestres sense fer \u00fas d'un llenguatge de programaci\u00f3. I tamb\u00e9 solen disposar d'una eina visual de disseny que facilita la tasca de definici\u00f3 de la interf\u00edcie, i que genera autom\u00e0ticament un document en el llenguatge de marques corresponent. Tanmateix, Una vegada disposem del document caldr\u00e0 integrar-lo d'alguna manera amb la resta de la nostra aplicaci\u00f3.  </p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#11-format-qt-ui","title":"1.1. Format Qt UI","text":"<p>L'eina Qt Designer emmagatzema el disseny realitzat en un format conegut com a Qt UI, assignant als fitxers de disseny l'extensi\u00f3 *.ui. Aquest format est\u00e0 basat en XML i, encara que no est\u00e0 concebut per utilitzar-los pels desenvolupadors fora de l'eina de disseny, \u00e9s possible manipular-lo directament en algun editor de text. Tamb\u00e9 es podria generar o modificar des d'un programa, ja que la majoria de llenguatges de programaci\u00f3 disposen de llibreries per a la manipulaci\u00f3 d'XML.</p> <p>EXEMPLE</p> <p>Una possible situaci\u00f3 en qu\u00e8 seria \u00fatil l'edici\u00f3 directa del fitxer generat per Qt Designer \u00e9s la modificaci\u00f3 d'una propietat que es repeteix en diferents controls. Per exemple, si tots els nostres botons tenen establert la mateixa amplada m\u00ednima i volem modificar-ho, en lloc de fer-ho un per un a Qt Designer, podr\u00edem utilitzar la funci\u00f3 de reempla\u00e7ament d'algun editor de text directament sobre el fitxer UI.</p> <p>A continuaci\u00f3, es mostren alguns dels elements XML m\u00e9s importants que trobem en un fitxer de Qt Designer, i la seva estructura jer\u00e0rquica al document.</p> <p></p> Element Descripci\u00f3 ui \u00c9s l'element principal que engloba tot el document. widget S'utilitza per incloure un giny de Qt. A l'interior pot contenir elements property per definir les propietats, altres elements widget o un layout. layout Element associat als layouts de Qt. Al seu interior cont\u00e9 un o m\u00e9s elements item per a cadascun dels membres del dit layout. connection Cont\u00e9 les associacions de senyals amb ranures. Per a cada connexi\u00f3 hi haur\u00e0 un element connection, format per quatre elements que defineixen la connexi\u00f3 (sender, signal, receiver, slot). <p>Formulari</p> <p>Es pot analitzar amb m\u00e9s detall l'XML associat al seg\u00fcent formulari: </p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ui version=\"4.0\"&gt;\n&lt;class&gt;MainWindow&lt;/class&gt;\n&lt;widget class=\"QMainWindow\" name=\"MainWindow\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;529&lt;/width&gt;\n&lt;height&gt;390&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"windowTitle\"&gt;\n&lt;string&gt;Ejemplo de formulario&lt;/string&gt;\n&lt;/property&gt;\n&lt;widget class=\"QWidget\" name=\"centralwidget\"&gt;\n&lt;layout class=\"QVBoxLayout\" name=\"verticalLayout_2\"&gt;\n&lt;item&gt;\n&lt;widget class=\"QTextEdit\" name=\"textEdit\" /&gt;\n&lt;/item&gt;\n&lt;item&gt;\n&lt;layout class=\"QHBoxLayout\" name=\"horizontalLayout\"&gt;\n&lt;item&gt;\n&lt;widget class=\"QPushButton\" name=\"limpiar_boton\"&gt;\n&lt;property name=\"text\"&gt;\n&lt;string&gt;Limpiar&lt;/string&gt;\n&lt;/property&gt;\n&lt;/widget&gt;\n&lt;/item&gt;\n&lt;item&gt;\n&lt;widget class=\"QPushButton\" name=\"cerrar_boton\"&gt;\n&lt;property name=\"text\"&gt;\n&lt;string&gt;Cerrar&lt;/string&gt;\n&lt;/property&gt;\n&lt;/widget&gt;\n&lt;/item&gt;\n&lt;/layout&gt;\n&lt;/item&gt;\n&lt;/layout&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;tabstops&gt;\n&lt;tabstop&gt;textEdit&lt;/tabstop&gt;\n&lt;tabstop&gt;limpiar_boton&lt;/tabstop&gt;\n&lt;tabstop&gt;cerrar_boton&lt;/tabstop&gt;\n&lt;/tabstops&gt;\n&lt;resources /&gt;\n&lt;connections&gt;\n&lt;connection&gt;\n&lt;sender&gt;limpiar_boton&lt;/sender&gt;\n&lt;signal&gt;clicked()&lt;/signal&gt;\n&lt;receiver&gt;textEdit&lt;/receiver&gt;\n&lt;slot&gt;clear()&lt;/slot&gt;\n&lt;hints&gt;\n&lt;hint type=\"sourcelabel\"&gt;\n&lt;x&gt;119&lt;/x&gt;\n&lt;y&gt;364&lt;/y&gt;\n&lt;/hint&gt;\n&lt;hint type=\"destinationlabel\"&gt;\n&lt;x&gt;139&lt;/x&gt;\n&lt;y&gt;266&lt;/y&gt;\n&lt;/hint&gt;\n&lt;/hints&gt;\n&lt;/connection&gt;\n&lt;connection&gt;\n&lt;sender&gt;cerrar_boton&lt;/sender&gt;\n&lt;signal&gt;clicked()&lt;/signal&gt;\n&lt;receiver&gt;MainWindow&lt;/receiver&gt;\n&lt;slot&gt;close()&lt;/slot&gt;\n&lt;hints&gt;\n&lt;hint type=\"sourcelabel\"&gt;\n&lt;x&gt;411&lt;/x&gt;\n&lt;y&gt;370&lt;/y&gt;\n&lt;/hint&gt;\n&lt;hint type=\"destinationlabel\"&gt;\n&lt;x&gt;522&lt;/x&gt;\n&lt;y&gt;368&lt;/y&gt;\n&lt;/hint&gt;\n&lt;/hints&gt;\n&lt;/connection&gt;\n&lt;/connections&gt;\n&lt;slots&gt;\n&lt;slot&gt;mostrar_mensaje()&lt;/slot&gt;\n&lt;/slots&gt;\n&lt;/ui&gt;\n</code></pre> <p>Als enlla\u00e7os de la unitat s'inclou la refer\u00e8ncia a la p\u00e0gina de la documentaci\u00f3 de Qt on es defineix l'esquema XML complet dels documents Qt UI.</p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#12-incloure-la-interficie-en-una-aplicacio","title":"1.2. Incloure la interf\u00edcie en una aplicaci\u00f3","text":"<p>A l'hora d'utilitzar el nostre fitxer de disseny de la interf\u00edcie des d'una aplicaci\u00f3, se'ns presenten dues opcions diferents:</p> <ul> <li>Utilitzar una eina de generaci\u00f3 de codi que, a partir del fitxer de descripci\u00f3 de la interf\u00edcie, generi el codi corresponent al llenguatge de programaci\u00f3 adequat. Aquest codi s'haur\u00e0 d'integrar durant la compilaci\u00f3 amb la resta de l'aplicaci\u00f3, ia m\u00e9s haur\u00e0 de ser regenerat cada cop que realitzem canvis en el disseny.</li> <li>Carregar directament des del codi de la nostra aplicaci\u00f3 el fitxer de descripci\u00f3 de la interf\u00edcie, generant-se en temps d'execuci\u00f3 el codi corresponent. Aquesta alternativa permet modificar el disseny al fitxer UI sense necessitat de recompilar l'aplicaci\u00f3, encara que per altra banda ralentitzar\u00e0 l'execuci\u00f3 en haver de generar el codi. </li> </ul>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#121-generar-codi-python-a-partir-del-fitxer-ui","title":"1.2.1. Generar codi Python a partir del fitxer UI","text":"<p>Per generar el codi Python corresponent a un fitxer de disseny de Qt Designer s'utilitza l'eina User Interface Compiler (uic), inclosa a la instal\u00b7laci\u00f3 de Qt. L'ordre seg\u00fcent generar\u00e0 el fitxer de codi Python finestra.py a partir del fitxer de disseny d'interf\u00edcie finestra.ui.</p> Text Only<pre><code>uic -g python finestra.ui -o finestra.py\n</code></pre> <p>Per als que utilitzeu linux:</p> Bash<pre><code>pyside6-uic finestrs.ui -o finestra.py\n</code></pre> <p>Podeu veure a continuaci\u00f3 el codi generat a partir de formulari.ui.</p> Python<pre><code># -*- coding: utf-8 -*-\n################################################################################\n## Form generated from reading UI file 'formulari.ui'\n##\n## Created by: Qt User Interface Compiler version 6.4.0\n##\n## WARNING! All changes made in this file will be lost when recompiling UI file!\n################################################################################\nfrom PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,\nQMetaObject, QObject, QPoint, QRect,\nQSize, QTime, QUrl, Qt)\nfrom PySide6.QtGui import (QBrush, QColor, QConicalGradient, QCursor,\nQFont, QFontDatabase, QGradient, QIcon,\nQImage, QKeySequence, QLinearGradient, QPainter,\nQPalette, QPixmap, QRadialGradient, QTransform)\nfrom PySide6.QtWidgets import (QApplication, QHBoxLayout, QMainWindow, QPushButton,\nQSizePolicy, QTextEdit, QVBoxLayout, QWidget)\nclass Ui_MainWindow(object):\ndef setupUi(self, MainWindow):\nif not MainWindow.objectName():\nMainWindow.setObjectName(u\"MainWindow\")\nMainWindow.resize(529, 390)\nself.centralwidget = QWidget(MainWindow)\nself.centralwidget.setObjectName(u\"centralwidget\")\nself.verticalLayout_2 = QVBoxLayout(self.centralwidget)\nself.verticalLayout_2.setObjectName(u\"verticalLayout_2\")\nself.textEdit = QTextEdit(self.centralwidget)\nself.textEdit.setObjectName(u\"textEdit\")\nself.verticalLayout_2.addWidget(self.textEdit)\nself.horizontalLayout = QHBoxLayout()\nself.horizontalLayout.setObjectName(u\"horizontalLayout\")\nself.limpiar_boton = QPushButton(self.centralwidget)\nself.limpiar_boton.setObjectName(u\"limpiar_boton\")\nself.horizontalLayout.addWidget(self.limpiar_boton)\nself.cerrar_boton = QPushButton(self.centralwidget)\nself.cerrar_boton.setObjectName(u\"cerrar_boton\")\nself.horizontalLayout.addWidget(self.cerrar_boton)\nself.verticalLayout_2.addLayout(self.horizontalLayout)\nMainWindow.setCentralWidget(self.centralwidget)\nself.retranslateUi(MainWindow)\nself.limpiar_boton.clicked.connect(self.textEdit.clear)\nself.cerrar_boton.clicked.connect(MainWindow.close)\nQMetaObject.connectSlotsByName(MainWindow)\n# setupUi\ndef retranslateUi(self, MainWindow):\nMainWindow.setWindowTitle(QCoreApplication.translate(\"MainWindow\", u\"Ejemplo de formulario\", None))\nself.limpiar_boton.setText(QCoreApplication.translate(\"MainWindow\", u\"Limpiar\", None))\nself.cerrar_boton.setText(QCoreApplication.translate(\"MainWindow\", u\"Cerrar\", None))\n# retranslateUi\n</code></pre> <p>Compte</p> <p>Al comentari inicial que s'inclou al codi generat se'ns avisa que qualsevol canvi manual que fem al codi Python d'aquest fitxer es perdr\u00e0 si es torna a generar des del fitxer UI.</p> <p>Quan tenim el codi Python, cal integrar-lo en la nostra aplicaci\u00f3. Si observem el codi generat, veurem que cont\u00e9 la definici\u00f3 d'una classe nova, el nom de la qual es forma afegint el prefix Ui_ al nom del nostre objecte principal en el disseny. En el nostre exemple, la classe es diu Ui_MainWindow. Aquesta classe cont\u00e9 la definici\u00f3 d'un m\u00e8tode anomenat setupUi que \u00e9s l'encarregat de crear i configurar tots els objectes associats al nostre disseny.</p> <p>Per poder utilitzar aquesta classe al nostre programa principal, el primer que hem de fer \u00e9s realitzar la importaci\u00f3 corresponent.</p> <p>A continuaci\u00f3, haurem de crear una classe nova que hereta tant de la classe generada, com de la classe de l'objecte principal del nostre disseny (en l'exemple, QMainWindow). Al constructor d'aquesta nova classe (a la qual hem anomenat MainWindow) es cridar\u00e0 al m\u00e8tode setupUi perqu\u00e8 es generen tots els objectes de la interf\u00edcie.</p> Python<pre><code>import sys\nfrom PySide6 import QtWidgets\nfrom formulari import Ui_MainWindow\nclass MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):\ndef __init__(self):\nsuper().__init__()\nself.setupUi(self)\napp = QtWidgets.QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\napp.exec()\n</code></pre> <p>Una vegada creada aquesta classe, al nostre programa principal simplement haurem de crear una nova inst\u00e0ncia, i mostrar la finestra com ho fem habitualment (amb el m\u00e8tode Show).</p> <p></p>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#122-carregar-el-fitxer-ui-des-de-python","title":"1.2.2. Carregar el fitxer UI des de Python","text":"<p>Com hem comentat anteriorment, tenim una altra alternativa per utilitzar el disseny realitzat a Qt Designer, que consisteix a carregar directament el fitxer UI des de l'aplicaci\u00f3 Python. Per fer-ho, utilitzarem la classe QUiLoader inclosa al m\u00f2dul QtUiTools. </p> <p>Aquesta classe ofereix el m\u00e8tode load, que rebr\u00e0 com a par\u00e0metre el fitxer UI i generar\u00e0 la finestra. </p> Python<pre><code>import sys, os\nfrom PySide6 import QtWidgets\nfrom PySide6.QtUiTools import QUiLoader\nloader = QUiLoader()\napp = QtWidgets.QApplication(sys.argv)\nui_path = os.path.join(os.path.dirname(__file__), \"formulari.ui\")\nwindow = loader.load(ui_path, None)\nwindow.show()\napp.exec()\n</code></pre>"},{"location":"unitats/5-Interficies-LM/teoria/3-%C3%9As%20de%20la%20interf%C3%ADcie%20en%20una%20aplicaci%C3%B3/#13-manipulacio-dels-objectes-generats","title":"1.3. Manipulaci\u00f3 dels objectes generats","text":"<p>Una vegada hem generat la nostra finestra (amb qualsevol dels dos m\u00e8todes descrits) podem accedir a qualsevol dels objectes generats per, per exemple, modificar-ne alguna de les propietats o associar una ranura a un dels seus senyals. Per a aix\u00f2, simplement utilitzarem el nom que h\u00e0gem donat a Qt Designer (mitjan\u00e7ant la propietat layoutName als layouts, i objectName a la resta de components) i la mateixa sintaxi que vam aprendre a la unitat anterior.</p> <p>EXEMPLE</p> <p>Si volem modificar el text dels botons i el t\u00edtol de la finestra, simplement hem d'accedir a estos ells amb el seu nou i canviar les seues propietats per codi: Podem agrupar tots els canvis en un m\u00e8tode com es veu al seg\u00fcent exemple:</p> <p></p>Python<pre><code>import sys, os\nfrom PySide6 import QtWidgets\nfrom PySide6.QtUiTools import QUiLoader\nloader = QUiLoader()\ndef mainwindow_setup(w):\nw.setWindowTitle(\"Simple text editor\")\nw.cerrar_boton.setText(\"Close\")\nw.limpiar_boton.setText(\"Clear\")\napp = QtWidgets.QApplication(sys.argv)\nui_path = os.path.join(os.path.dirname(__file__), \"formulari.ui\")\nwindow = loader.load(ui_path, None)\nmainwindow_setup(window)\nwindow.show()\napp.exec_() \n</code></pre> Ara la interf\u00edcie quedaria aix\u00ed: <p></p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/","title":"4 - Funcions avan\u00e7ades de la ferramenta de disseny","text":""},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/#1-funcionalitats-avancades-de-leina-de-disseny","title":"1. Funcionalitats avan\u00e7ades de l'eina de disseny","text":"<p>La finalitat principal de les eines de disseny associades als llenguatges de marques \u00e9s permetre a l'usuari definir els components de la interf\u00edcie i la manera com s'organitzen aquests. Aix\u00ed i tot, solen incloure un altre tipus de funcionalitats que ajuden el desenvolupador a especificar tots els aspectes relacionats amb el disseny.</p> <p>A Qt Designer hem vist com a m\u00e9s de poder arrossegar i configurar els components podem, per exemple, definir l'associaci\u00f3 de senyals a ranures. En aquest apartat veurem altres funcionalitats que incorpora aquesta eina per completar el disseny d'un formulari.</p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/#11-definicio-de-companys-buddy-widgets","title":"1.1. Definici\u00f3 de companys (buddy widgets)","text":"<p>Quan dissenyem formularis d'entrada de dades, \u00e9s habitual utilitzar en el disseny una etiqueta (QLabel) per identificar cada camp del formulari, i un control d'entrada de dades (com QLineEdit, QTextEdit o QComboBox) per que l'usuari pugui proporcionar el valor. De fet, Qt ofereix el layout de formulari (QFormLayout) per ajudar-nos a organitzar etiquetes i controls d'entrada.</p> <p>Qt ens ofereix la possibilitat d'associar a cada etiqueta el control d'entrada de dades corresponent com un control company. D'aquesta manera, quan l'usuari utilitze l'acc\u00e9s r\u00e0pid associat a l'etiqueta (definit amb un car\u00e0cter '&amp;' abans de la lletra corresponent a la propietat text), el focus passar\u00e0 al company. Per utilitzar la drecera, l'usuari haur\u00e0 de combinar la tecla Alt amb la lletra definida.</p> <p>Podem associar companys a les etiquetes a Qt Designer canviant al mode Editar companys al men\u00fa Editar, o utilitzant la barra d'eines. El funcionament \u00e9s molt similar al que vam veure per a l'associaci\u00f3 de senyals a ranures, ja que simplement haurem de pr\u00e9mer l'etiqueta i arrossegar la fletxa vermella fins al company. A m\u00e9s, com hem comentat, l'etiqueta haur\u00e0 de tenir assignat un car\u00e0cter d'acc\u00e9s a la propietat text.</p> <p></p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/#12-ordre-de-tabulacio","title":"1.2. Ordre de tabulaci\u00f3","text":"<p>Molts usuaris d'aplicacions basades en formularis estan habituats a despla\u00e7ar-se pels diferents camps del formulari fent servir la tecla de tabulaci\u00f3 del teclat. Qt Designer ofereix la possibilitat de personalitzar visualment l'ordre en qu\u00e8 es despla\u00e7ar\u00e0 el focus d'un camp a un altre amb el tabulador utilitzant el mode Edita ordre de pestanyes.</p> <p>IMPORTANT</p> <p>El nom donat a l'edici\u00f3 de l'ordre de tabulacions a les traduccions de Qt Designer pot induir a error. En angl\u00e8s, es diu Tab Order Editing Mode. La paraula Tab fa refer\u00e8ncia en aquest context al tabulador, per\u00f2 ha estat tradu\u00efda com a pestanya.</p> <p>Una vegada en el mode d'edici\u00f3 de l'ordre de tabulaci\u00f3, se'ns mostrar\u00e0 un n\u00famero associat a cada control que podeu rebre el focus (com els controls d'entrada de dades o els botons). Aquest n\u00famero indica l'ordre de tabulaci\u00f3 actual. Si volem modificar-ho, simplement hem d'anar prement sobre aquests n\u00fameros a l'ordre desitjat. Segons anem prement els n\u00fameros canviar\u00e0 el color de la manera seg\u00fcent:</p> <ul> <li>Vermell: l'\u00faltim n\u00famero premut.</li> <li>Verd: n\u00fameros ja establerts.</li> <li>Blau: n\u00fameros per establir.</li> </ul> <p></p> <p>Aquest mode d'edici\u00f3 tamb\u00e9 compta amb un men\u00fa contextual amb les opcions seg\u00fcents:</p> <ul> <li>Comen\u00e7ar des d'aqu\u00ed: per comen\u00e7ar la configuraci\u00f3 en un punt intermedi de la seq\u00fc\u00e8ncia de tabulaci\u00f3 (que \u00e9s molt \u00fatil en formularis amb molts camps).</li> <li>Reinicia: per restablir l'ordre de tabulaci\u00f3.</li> <li>Ordre de llista de pestanyes: obrir\u00e0 un di\u00e0leg per configurar l'ordre de tabulaci\u00f3 amb una interf\u00edcie de llista. Els canvis realitzats es reflectiran en els n\u00fameros mostrats sobre els controls en acceptar el di\u00e0leg.</li> </ul> <p>IMPORTANT</p> <p>Tant la possibilitat de configurar l'ordre de tabulaci\u00f3 com l'associaci\u00f3 de companys s\u00f3n funcionalitats que ajuden a millorar la productivitat dels usuaris finals de la nostra aplicaci\u00f3, i s\u00f3n especialment rellevants en aplicacions destinades a l'\u00e0mbit empresarial. A m\u00e9s, aquestes opcions estan alineades amb l'heur\u00edstica d'usabilitat n\u00famero 7 de Nielsen, Flexibilitat i efici\u00e8ncia d'\u00fas.</p>"},{"location":"unitats/5-Interficies-LM/teoria/4-Funcions%20avan%C3%A7ades%20de%20la%20ferramenta%20de%20disseny/#13-plantilles","title":"1.3. Plantilles","text":"<p>Qt Designer ofereix la possibilitat de crear les nostres pr\u00f2pies plantilles de formulari, que ens permetran crear un nou formulari a partir d'una estructura b\u00e0sica definida per nosaltres. </p> <p>El seu \u00fas \u00e9s molt senzill. Simplement haurem de dissenyar la nostra plantilla com si fos un formulari corrent. Una vegada dissenyada, s'ha de desar utilitzant l'opci\u00f3 Desa com a plantilla del men\u00fa Fitxer. Al di\u00e0leg que apareix li donarem un nom a la plantilla i decidirem on emmagatzemar-la.</p> <p>Una vegada guardada la plantilla, quan crearem un nou formulari apareixer\u00e0 com a opci\u00f3, a m\u00e9s de les plantilles per defecte que ja coneixem.</p>"},{"location":"unitats/6-Informes/enlla%C3%A7os/","title":"Enlla\u00e7os","text":""},{"location":"unitats/6-Informes/enlla%C3%A7os/#unidad-6-elaboracion-de-informes-enllacos-dinteres","title":"Unidad 6. Elaboraci\u00f3n de informes. Enlla\u00e7os d'inter\u00e9s.","text":"<ol> <li> <p>Datapane - Getting Started</p> <p>Instal\u00b7laci\u00f3 de  <code>datapane</code> en distintes plataformes.</p> </li> <li> <p>Documentaci\u00f3 de pandas - Selecci\u00f3 de dades</p> <p>Documentaci\u00f3 de pandas per seleccionar un subconjunt d'un <code>DataFrame</code>. </p> </li> <li> <p>Documentaci\u00f3 de pandas - Ordenaci\u00f3 de dades</p> <p>Documentaci\u00f3n de pandas amb informaci\u00f3 de com ordenar les dades d'un <code>DataFrame</code>. </p> </li> <li> <p>Markdown Cheatsheet</p> <p>Referencia del llenguatje de marques Markdown. </p> </li> <li> <p>Matplotlib - Tipus de gr\u00e0fics</p> <p>Mostra de tots els tipus de gr\u00e0fics disponibles a Matplotlib amb exemples. </p> </li> <li> <p>Documentaci\u00f3 de QWebEngineView</p> <p>Documentaci\u00f3 del component QWebEngineView de Qt for Python.</p> </li> <li> <p>Documentaci\u00f3 de Datapane - Pujoar informes</p> <p>Documentaci\u00f3 de Datapane amb documentaci\u00f3 de com pujar informes a la plataforma <code>datapane.com</code>.</p> </li> <li> <p>Documentaci\u00f3 de pandas - Entrada/Eixida</p> <p>Documentaci\u00f3 de pandas on es detallen tots els m\u00e8todes d'entrada/eixida soportats per la llibreria.</p> </li> </ol>"},{"location":"unitats/6-Informes/tasques/practica1/","title":"Pr\u00e0ctica 1","text":""},{"location":"unitats/6-Informes/tasques/practica1/#practica-1","title":"Pr\u00e0ctica 1","text":"<p>Dissenya un informe amb <code>DataPane</code> que fa\u00e7a \u00fas de les diferents possibilitats d'organitzaci\u00f3 de components comentades (grups, p\u00e0gines i selectors). Com a origen de dades pots utilitzar qualsevol CSV amb informaci\u00f3 real. Pots visitar la web kaggle i seleccionar-ne un del teu inter\u00e9s.</p>"},{"location":"unitats/6-Informes/tasques/practica2/","title":"Pr\u00e0ctica 2","text":""},{"location":"unitats/6-Informes/tasques/practica2/#origens-de-dades-per-a-linforme","title":"Or\u00edgens de dades per a l'informe","text":"<p>Com ja hem comentat, els informes elaborats amb la llibreria <code>DataPane</code> prenen com a origen de dades un <code>DataFrame</code> de la llibreria <code>pandas</code>. En tots els informes que hem elaborat durant aquesta unitat hem constru\u00eft el <code>DataFrame</code> a partir dun fitxer de dades CSV. No obstant, \u00e9s habitual en un entorn real que les dades de partida per a un informe estiguen, per exemple, allotjades en una base de dades o en un fitxer JSON retornat per un servei web.</p> <p>En esta pr\u00e0ctica aprendrem com construir un<code>DataFrame</code> a partir de diferents fonts de dades, utilitzant les funcionalitats de la llibreria<code>pandas</code>.</p> <p>Als enlla\u00e7os de la unitat s'inclou un enlla\u00e7 a la p\u00e0gina de documentaci\u00f3 de<code>pandas</code> on es detallen totes les possibilitats d\u00b4entrada/sortida que permet la llibreria.</p>"},{"location":"unitats/6-Informes/tasques/practica2/#base-de-dades-relacional","title":"Base de dades relacional","text":"<p>Una de les opcions dentrada de dades que permet<code>pandas</code> s\u00f3n les bases de dades relacionals. Per aix\u00f2,<code>pandas</code> disposa del m\u00e8tode <code>read_sql()</code>, que rep com a par\u00e0metre la consulta SQL a executar i la connexi\u00f3 sobre la qual realitzar la consulta.</p> Python<pre><code>import pandas as pd\nimport sqlite3 as sql\nconnection = sql.connect('./database_file.db')\ndf = pd.read_sql(\"SELECT * FROM tabla\", connection)\n</code></pre> <p>Com veiem a l'exemple, en primer lloc es crea la connexi\u00f3 a la base de dades, i un cop creada s'utilitza el m\u00e8tode <code>read_sql()</code> per crear el<code>DataFrame</code>. El primer par\u00e0metre daquest m\u00e8tode \u00e9s una consulta SQL, per\u00f2 tamb\u00e9 hi ha la possibilitat d'indicar \u00fanicament el nom d'una taula per recuperar la taula sencera.</p> <p>Si volem fer servir una base de dades diferent (com MySQL, PostgreSQL, Oracle o SQL Server) canviar\u00e0 la manera d'establir la connexi\u00f3, per\u00f2 no el m\u00e8tode d'execuci\u00f3 de la consulta. Python inclou a la vostra llibreria est\u00e0ndard el connector per a SQLite, per\u00f2 per a la resta de bases de dades s'hauria d'instal\u00b7lar el paquet corresponent.</p>"},{"location":"unitats/6-Informes/tasques/practica2/#json","title":"JSON","text":"<p>Una altra de les possibilitats que ofereix <code>pandas</code> com a origen de dades a l'hora de crear un <code>DataFrame</code> \u00e9s un fitxer JSON. Per fer la lectura tenim el m\u00e8tode <code>read_json()</code>, que en la seva forma m\u00e9s senzilla nom\u00e9s rep com a par\u00e0metre el JSON que cal llegir (pot ser un string o una refer\u00e8ncia a un fitxer json).</p> Python<pre><code>json ='[{\"a\": 1, \"b\": 2},{\"a\": 3, \"b\": 4}]'\ndf = pd.read_json(json)\n</code></pre> <p>En aquest senzill exemple creem una cadena en format JSON, amb una llista de dos objectes json. A partir d'aquesta cadena, el m\u00e8tode <code>read_json()</code> deserialitza el contingut en un <code>DataFrame</code>. Aquest m\u00e8tode compta amb multitud d'opcions (descrites a la documentaci\u00f3) per tractar fitxers JSON amb estructures m\u00e9s complexes.</p>"},{"location":"unitats/6-Informes/tasques/practica2/#html","title":"HTML","text":"<p>Per acabar, veurem que <code>pandas</code> tamb\u00e9 \u00e9s capa\u00e7 d'analitzar el contingut HTML d'una p\u00e0gina web, per aix\u00f2 utilitzarem el m\u00e8tode <code>read_html()</code>. Aquest m\u00e8tode rep com a par\u00e0metre l'HTML a llegir (que pot ser una cadena, un fitxer local o una URL) i torna una llista de DataFrames, un per cadascuna de les taules HTML que trobeu al document. Utilitzant aquest m\u00e8tode podem fer web scraping.</p> Python<pre><code>dfs = pd.read_html(url)\n</code></pre> <p>En esta pr\u00e0ctica haur\u00e0s de dissenyar tres informes, cadascun a partir d'un origen de dades diferent:</p> <ol> <li>La taula d'artistes (artists) de la base de dades Chinook, una base de dades de prova que cont\u00e9 les dades duna botiga de discos. Pots descarregar-la en aquest enlla\u00e7: https://www.sqlitetutorial.net/sqlite-sample-database</li> <li>El fitxer JSON coldplay_albums.json, que cont\u00e9 un llistat dels \u00e0lbums publicats pel grup de m\u00fasica Coldplay.</li> <li>La llista de poblaci\u00f3 per pa\u00efsos, obtinguda directament de la seg\u00fcent p\u00e0gina de Wikipedia: https://en.wikipedia.org/wiki/List_of_countries_and_dependencies_by_population</li> </ol> <p>Els informes es mostraran en una aplicaci\u00f3 Qt utilitzant una interf\u00edcie de pestanyes (QTabWidget) dissenyada amb QtDesigner. A cada pestanya, s'haur\u00e0 de mostrar l'informe directament a l'aplicaci\u00f3 i incloure un bot\u00f3 per obrir-lo al navegador predeterminat del sistema. Tamb\u00e9 incorporarem un men\u00fa amb una opci\u00f3 que execute la mateixa acci\u00f3 d'obrir al navegador l'informe que s'est\u00e0 mostrant a la pestanya.</p> <p>Recorda habilitar els recursos d'orige creuat</p> <p>En cas contrari no podr\u00e0s visualitzar els teus informes generats amb datapane.</p> <p>https://fpieseljust.github.io/di23-24/unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/#origens-creuats</p>"},{"location":"unitats/6-Informes/teoria/1-Introduccio%20als%20informes/","title":"1 - Introducci\u00f3 als informes","text":""},{"location":"unitats/6-Informes/teoria/1-Introduccio%20als%20informes/#introduccio-al-disseny-dinformes","title":"Introducci\u00f3 al disseny d'informes","text":"<p>A totes les organitzacions, els processos de presa de decisions es basen en informaci\u00f3 sobre l'activitat de l'organitzaci\u00f3. La forma en qu\u00e8 s'obt\u00e9 i s'ofereix aquesta informaci\u00f3 varia molt d'uns casos a uns altres, per\u00f2 l'objectiu \u00e9s sempre facilitar la tasca a les persones que han de prendre aquestes decisions dins de l'empresa.</p> <p>Business intelligence</p> <p>Tot all\u00f2 relacionat amb la transformaci\u00f3 de la informaci\u00f3 en coneixement per a la millora de la presa de decisions a les organitzacions s'engloba sota el terme intel\u00b7lig\u00e8ncia empresarial o de negocis (en angl\u00e8s, business intelligence).</p> <p>Una de les maneres habituals de presentar la informaci\u00f3 \u00e9s com un informe. Encara que hi ha diferents tipus d'informe (com veurem m\u00e9s endavant), podr\u00edem dir que un informe \u00e9s un mitj\u00e0 per proporcionar informaci\u00f3 d'utilitat en un format predefinit. Moltes vegades, els informes estan integrats en aplicacions (com passa als ERP o CRM), encara que tamb\u00e9 hi ha eines orientades espec\u00edficament a la consulta d'informes, com per exemple, PowerBI de Microsoft.</p> <p>Exemple d'informe</p> <p>El fitxer \"Informe1.html\" \u00e9s un exemple d'informe creat amb la llibreria que utilitzarem durant la unitat.</p>"},{"location":"unitats/6-Informes/teoria/1-Introduccio%20als%20informes/#tipus-dinformes","title":"Tipus dinformes","text":"<p>Segons la funcionalitat que ofereixen a l'usuari de l'informe, podem distingir els tipus seg\u00fcents:</p> <ul> <li>Informes predefinits: s\u00f3n informes amb una estructura prefixada pel dissenyador de l'informe, que l'usuari no pot modificar. Moltes vegades, estan orientats a la seva impressi\u00f3 o enviament per correu electr\u00f2nic, i poden constar de diverses p\u00e0gines.</li> </ul> <p>Exemple</p> <p>En una empresa amb activitat comercial, un exemple d'informe predefinit podria ser el que inclou les vendes del darrer mes per a cadascun dels agents comercials de l'empresa.</p> <ul> <li>Informes configurables: aquest tipus d'informes permet a l'usuari configurar certs par\u00e0metres de l'informe per adaptar la informaci\u00f3 a les seues necessitats. Tot i que l'estructura b\u00e0sica de l'informe tamb\u00e9 l'estableix el dissenyador, l'usuari pot ajustar certs aspectes.</li> </ul> <p>Exemple</p> <p>Seguint amb l'exemple anterior, un informe configurable podria permetre a l'usuari decidir el per\u00edode de temps per al qual vol obtenir les vendes, en comptes de limitar-se a les del darrer mes.</p> <ul> <li>Informes personalitzats: en aquest tipus d'informes \u00e9s l'usuari qui decideix quina informaci\u00f3 voleu veure i de quina manera organitzar-la. Per fer-ho, es fa servir algun tipus d'aplicaci\u00f3 de disseny d'informes orientada a usuaris finals.</li> </ul> <p>Exemple</p> <p>Un informe de vendes personalitzat deixaria a l'usuari seleccionar tant el per\u00edode de temps com el comercial per al qual vol veure la informaci\u00f3, podent a m\u00e9s decidir quina m\u00e8trica us interessa (nombre de vendes, import total, mitjana de l'import,...) i si vol la informaci\u00f3 en forma de taula o gr\u00e0fic.</p> <ul> <li>Quadres de comandament: es tracta d'un tipus especial d'informe on es representen de manera visual m\u00e8triques i indicadors rellevants per a la presa de decisions.</li> </ul> <p>Exemple</p> <p>Un quadre de comandament per a l'empresa del nostre exemple podria incloure el total de vendes acumulades a l'any, la comparaci\u00f3 d'aquesta dada amb l'any anterior i un gr\u00e0fic de l'evoluci\u00f3 de les vendes en els darrers 6 mesos.</p>"},{"location":"unitats/6-Informes/teoria/1-Introduccio%20als%20informes/#origens-de-dades","title":"Or\u00edgens de dades","text":"<p>Un dels aspectes importants quan ens plantegem el disseny d'un informe \u00e9s l'origen d'on provenen les dades. La majoria de les eines destinades a la creaci\u00f3 d'informes permeten la utilitzaci\u00f3 de diferents tipus d'or\u00edgens de dades, com ara:</p> <ul> <li>Fitxers de dades: poden estar en diversos formats, sent els m\u00e9s habituals CSV, XML, JSON o en el format de les aplicacions de full de c\u00e0lcul m\u00e9s utilitzades.</li> <li>Bases de dades: un dels or\u00edgens m\u00e9s habituals per als informes s\u00f3n les bases de dades de l'organitzaci\u00f3, predominant les bases de dades relacionals com ara Oracle, SQL Server o MySQL (encara que tamb\u00e9 es poden utilitzar bases de dades NoSQL com MongoDB).</li> <li>Magatzems de dades (data warehouse) : es tracta de repositoris de dades organitzades orientades a l'an\u00e0lisi d'informaci\u00f3, que solen alimentar-se de diverses fonts de dades de l'organitzaci\u00f3.</li> <li>Dades massives (Big Data): moltes de les eines de creaci\u00f3 d'informes actuals permeten obtenir dades des d'un origen big data, com ara Apache Hadoop.</li> </ul> <p>Dades al n\u00favol</p> <p>Tots aquests or\u00edgens de dades poden estar implementats a les plataformes de n\u00favol p\u00fablic actuals (com Amazon AWS, Microsoft Azure o Google Cloud), que ofereixen multitud de serveis orientats a l'emmagatzematge de dades.</p>"},{"location":"unitats/6-Informes/teoria/1-Introduccio%20als%20informes/#eines-per-a-lelaboracio-dinformes","title":"Eines per a l'elaboraci\u00f3 d'informes","text":"<p>Quan ens plantegem l'elecci\u00f3 de l'eina o la tecnologia per al desenvolupament d'informes, tenim diferents opcions:</p> <ul> <li>Llibreria d'informes: una primera opci\u00f3 \u00e9s utilitzar una llibreria per al nostre llenguatge de programaci\u00f3 que ens permeta generar informes directament des del nostre codi. Aquesta \u00e9s l'alternativa que farem servir en aquesta unitat mitjan\u00e7ant la llibreria <code>DataPane</code> de Python.</li> <li>Eina visual de disseny d'informes: tamb\u00e9 hi ha l'opci\u00f3 de crear els informes amb una eina visual. Algunes estan orientades a desenvolupadors (com ara SAP Crystal Reports o TIBCO JasperReports), mentre que d'altres tamb\u00e9 permeten als usuaris allunyats de l'\u00e0mbit tecnol\u00f2gic personalitzar els seus propis informes (com Microsoft PowerBI o MicroStrategy).</li> </ul> <p>Informes al n\u00favol</p> <p>Algunes plataformes de n\u00favol p\u00fablic tamb\u00e9 ofereixen serveis relacionats amb l'an\u00e0lisi de dades i la intel\u00b7lig\u00e8ncia de negocis. \u00c9s el cas d'Amazon QuickSight a AWS i Looker a Google Cloud.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/","title":"2 - Disseny d'informes","text":""},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#disseny-dinformes","title":"Disseny d'informes","text":"<p>En aquest apartat aprendrem a elaborar informes a la nostra aplicaci\u00f3 amb <code>DataPane</code>, una llibreria Python que permet crear informes amb diferents elements (com taules i gr\u00e0fics) que es generen en format HTML. Aquesta llibreria es distribueix baix la llic\u00e8ncia de programari lliure Apache 2.0.</p> <p><code>DataPane</code> permet emmagatzemar els informes generats com un fitxer HTML local, o tamb\u00e9 pujar-los a la plataforma datapane.com,on s'afegeixen algunes funcionalitats addicionals. Per poder pujar els informes, cal tenir un compte que podem crear de manera gratu\u00efta a la web.</p> <p>Podem instal\u00b7lar la llibreria<code>DataPane</code> amb l'ordre seg\u00fcent:</p> Python<pre><code>conda install datapane\n</code></pre> <p>Als enlla\u00e7os de la unitat trobar\u00e0s la refer\u00e8ncia a la p\u00e0gina de la documentaci\u00f3 de <code>DataPane</code> on es tracta la instal\u00b7laci\u00f3 de la llibreria.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#preparacio-de-les-dades","title":"Preparaci\u00f3 de les dades","text":"<p>Com hem comentat a l'apartat anterior, els or\u00edgens de dades per elaborar un informe poden ser molt diversos. Per simplificar aquest aspecte al m\u00e0xim, els informes creats amb <code>DataPane</code> tenen un \u00fanic origen de dades possible: un DataFrame de la llibreria <code>pandas</code> de Python.</p> <p><code>pandas</code> \u00e9s una de les llibreries m\u00e9s utilitzades a Python en DataScience per a la manipulaci\u00f3 de dades. La seva principal estructura de dades \u00e9s el DataFrame, una estructura en dues dimensions similar a una taula duna base de dades relacional.</p> <p>La llibreria <code>pandas</code> permet crear un DataFrame a partir de diferents or\u00edgens de dades, com ara fitxers o bases de dades. Per tant, les dades dels nostres informes podran provenir de diferents fonts encara que <code>DataPane</code> \u00fanicament admeta <code>DataFrames</code>.</p> <p>El codi d'exemple seg\u00fcent mostra com crear unDataFrame a partir d'un fitxer CSV, que ens servir\u00e0 com a origen per als primers informes.</p> Python<pre><code>import os\nimport pandas as pd\nimport datapane as dp\nbase_path = os.path.dirname(__file__)\ncsv_path = os.path.join(base_path, \"data.csv\")\"\ndf = pd.read_csv(csv_path)\n</code></pre> <p>Pots descarregar el fitxer CSV utilitzat fent clic. Cont\u00e9 les dades mensuals de vendes d'una empresa, incloent a cada fila el nom del comercial, el mes, el nombre d'unitats venudes i l'import total de les vendes en aquest mes.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#informes-amb-taules","title":"Informes amb taules","text":"<p>L'element b\u00e0sic de qualsevol informe \u00e9s la taula de dades. A <code>DataPane</code> disposem de dos components diferents per inserir una taula en un informe:</p> <ul> <li>Table: es tracta d'una taula est\u00e0tica on l'usuari nom\u00e9s podr\u00e0 visualitzar la informaci\u00f3.</li> <li>DataTable: aquest tipus de taula ofereix la possibilitat a l'usuari d'ordenar les files pel camp desitjat, i fins i tot filtrar les dades posant condicions a cadascun dels camps.</li> </ul>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#creacio-dun-informe-amb-taules","title":"Creaci\u00f3 d'un informe amb taules","text":"<p>Continuant amb l'exemple anterior, el codi seg\u00fcent crearia un informe amb un componentTable i unDataTable a partir del DataFrame que ten\u00edem preparat.</p> Python<pre><code>table = dp.Table(df)\ndata_table = dp.DataTable(df)\nreport = dp.Report(table, data_table)\nreport_path = os.path.join(base_path, \"informe2.html\")\nreport.save(path=report_path, open=True)\n</code></pre> <p>A les dues primeres l\u00ednies es creen les dues taules de diferents tipus. A la tercera es crea un nou informe que inclou les dues taules. I a la darrera l\u00ednia es desa l'informe en un fitxer local, indicant a m\u00e9s que volem obrir l'informe en un navegador despr\u00e9s de generar-lo (amb el par\u00e0metre open=True, que \u00e9s opcional).</p> <p>Podeu descarregar l'informe generat, i el codi complet de l'exemple.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#ordenacio-i-filtratge-de-dades","title":"Ordenaci\u00f3 i filtratge de dades","text":"<p>Com podem comprovar a l'informe generat, els components Table i DataTable mostren la informaci\u00f3 de manera diferent.Table es representa com una taula HTML amb totes les dades visibles (\u00fatil si l'informe es vol imprimir o exportar a PDF), mentre que DataTable utilitza una barra de despla\u00e7ament vertical per moure's per les diferents files. A m\u00e9s, DataTable  inclou a la part superior informaci\u00f3 sobre les dades (el nombre de files, columnes i cel\u00b7les que cont\u00e9), i a la cap\u00e7alera de les columnes els controls d'ordenaci\u00f3 i filtratge per a l'usuari.</p> <p> </p> DataTable <p>Per activar l'ordenaci\u00f3 es fa servir la icona situada a l'esquerra de l'etiqueta de la columna (que a m\u00e9s representa el tipus de dada del camp). Quan ordenem per una de les columnes apareix un indicador visual en forma de fletxa a la cap\u00e7alera, que estar\u00e0 orientada en funci\u00f3 del tipus d'ordenaci\u00f3 (ascendent o descendent).</p> <p> </p> Ordenaci\u00f3 <p>L'opci\u00f3 de filtratge (que s'activa amb la icona que apareix a la dreta de l'etiqueta de la columna) permet establir una condici\u00f3 sobre les dades que apareixen a la taula. Es poden definir filtres a m\u00e9s d'una columna, de manera que es mostraran les dades que compleixin tots els criteris de filtratge. Cal tenir en compte que els operadors de filtratge disponibles depenen del tipus de dades de cada camp.</p> <p>Quan una columna t\u00e9 aplicat un filtre apareix un indicador visual a la cap\u00e7alera. Per eliminar el filtre, l'haurem d'editar i establir la condici\u00f3 None.</p> <p> </p> Filtratge <p>A l'exemple mostrat a la imatge, s'ha establert un filtre a les unitats i un altre a l'import.</p> <p>Important</p> <p>Els controls d'ordenaci\u00f3 i filtratge permeten a l'usuari configurar les dades que es mostren a l'informe. Si volem aplicar algun tipus d'ordenaci\u00f3 o filtre a les dades abans que es genere l'informe, haurem d'utilitzar les opcions ofertes per la llibreria <code>pandas</code>. Busqueu a la seua documentaci\u00f3 si voleu aplicar-ne.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#informes-amb-indicadors","title":"Informes amb indicadors","text":"<p>Moltes vegades, els informes han d'incloure indicadors que representen un valor \u00fanic rellevant per a la persona que veur\u00e0 l'informe (per exemple, el nombre de vendes totals a tota l'empresa a l'\u00faltim mes). Aquests indicadors (tamb\u00e9 anomenats grans n\u00fameros o big numbers, en angl\u00e8s) solen provenir de valors calculats a partir de les nostres dades, utilitzant alguna funci\u00f3 d'agregaci\u00f3 (com el recompte, la suma o la mitjana).</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#calcul-de-valors-agregats","title":"C\u00e0lcul de valors agregats","text":"<p>Abans de crear l'informe que contindr\u00e0 els indicadors, hem de calcular els valors que es mostraran al codi de la nostra aplicaci\u00f3. La llibreria <code>pandas</code> incorpora multitud de funcions per processar les dades que ens facilitaran la tasca de calcular els indicadors a partir de les dades existents al <code>DataFrame</code>.</p> <p>Calcularem com a exemple el nombre total d'unitats venudes per tots els comercials els mesos de novembre i desembre. El codi necessari seria el seg\u00fcent:</p> Python<pre><code>datos_diciembre = df[df['Mes']=='Diciembre']\nunidades_diciembre = datos_diciembre['Unidades'].sum()\ndatos_noviembre = df[df['Mes']=='Noviembre']\nunidades_noviembre = datos_noviembre['Unidades'].sum()\n</code></pre> <p>La primera l\u00ednia crea un nou DataFrame (dades_desembre) amb les files que compleixen la condici\u00f3 especificada (que el mes siga  desembre). A la segona l\u00ednia se selecciona la columna Unitats i s'aplica la funci\u00f3 de sum() per acumular tots els valors d'aquesta columna. El codi per al mes de novembre \u00e9s equivalent.</p> <p>Funcions d'agregaci\u00f3</p> <p><code>pandas</code> posa a la nostra disposici\u00f3 multitud de funcions d'agregaci\u00f3, entre les quals podem destacar les seg\u00fcents:</p> <ul> <li>sum(): Calculeu la suma de tots els valors. \u00c9s la que s'utilitza a l'exemple anterior.</li> <li>count(): Realitza un recompte dels valors presents a la columna.</li> <li>mean(): Calcula la mitjana aritm\u00e8tica dels valors.</li> <li>min(): Permet obtenir el m\u00ednim de tots els valors de la columna.</li> <li>max(): S'utilitza per obtenir el valor m\u00e0xim a la columna.</li> </ul>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#creacio-dun-informe-amb-indicadors","title":"Creaci\u00f3 d'un informe amb indicadors","text":"<p>Quan tenim calculats els indicadors desitjats, els inclourem a l'informe amb el component <code>BigNumber</code> de <code>DataPane</code>. Quan creem aquest component podem establir els arguments seg\u00fcents:</p> <ul> <li>heading: cap\u00e7alera que acompanyar\u00e0 l'indicador.</li> <li>value: valor de l'indicador.</li> <li>prev_value: valor anterior, perqu\u00e8 es pugui comparar amb l'actual (opcional).</li> <li>change: variaci\u00f3 del valor de l'indicador respecte de l'anterior valor (opcional).</li> <li>is_upward_change: indica si el canvi \u00e9s positiu o negatiu (obligatori si s'estableixcanvi).</li> </ul> <p>Seguint amb l'exemple anterior, crearem un informe amb les unitats totals venudes al mes de desembre, incloent-hi la variaci\u00f3 respecte al mes anterior. El codi seria el seg\u00fcent:</p> Python<pre><code>unidades = dp.BigNumber(heading='Unidades totales en diciembre',\nvalue=unidades_diciembre,\nchange=unidades_diciembre - unidades_noviembre,\nis_upward_change=unidades_diciembre &gt; unidades_noviembre)\nreport = dp.Report(unidades)\nreport_path = os.path.join(base_path, \"informe3.html\")\nreport.save(path=report_path, open=True)\n</code></pre> <p>L'informe generat es mostrar\u00e0 de la manera seg\u00fcent:</p> <p> </p> DataTable <p>Podeu descarregar l'informe generat, i el codi complet de l'exemple.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#altres-components-dels-informes","title":"Altres components dels informes","text":"<p>A m\u00e9s de les taules de dades i els indicadors, <code>DataPane</code> permet incorporar altres elements als informes per enriquir el resultat final. Alguns d'aquests components s\u00f3n:</p> <ul> <li>Gr\u00e0fics: un dels components m\u00e9s importants a l'hora de crear informes. Seran tractats en detall a l'apartat seg\u00fcent de la unitat.</li> <li>Text: de vegades tamb\u00e9 pot ser interessant incloure text a l'informe (per exemple, per incloure un t\u00edtol o una explicaci\u00f3 de les dades mostrades). Per fer-ho s'utilitza el component <code>Text</code>, el constructor del qual rep com a par\u00e0metre el text a inserir en format <code>Markdown</code>.</li> </ul> <p>Markdown</p> <p><code>Markdown</code> \u00e9s un llenguatge de marques lleuger, que permet crear documents en text pla amb marques de format f\u00e0cils de llegir i escriure. La seva popularitat ha crescut molt degut en gran mesura a la senzillesa i flexibilitat del format. L'utilitzarem en la unitat de documentaci\u00f3.</p> <ul> <li>HTML: mitjan\u00e7ant aquest component <code>HTML</code> podem introduir un bloc de codi HTML al nostre informe. El codi introdu\u00eft pot contindre estils definits amb CSS, per\u00f2 no codi Javascript.</li> <li>Multim\u00e8dia: amb el component <code>Media</code> podem incloure a l'informe imatges, v\u00eddeos o fitxers d'\u00e0udio. Al constructor del component haurem d'utilitzar el par\u00e0metre <code>file</code> per indicar la ruta del recurs a incloure.</li> <li>Fitxers adjunts: si volem adjuntar un fitxer a l'informe (com un document PDF o un full de c\u00e0lcul) perqu\u00e8 l'usuari el puga descarregar, utilitzarem el component <code>Attachment</code>, indicant la ruta del fitxer de la mateixa manera que al component anterior.</li> </ul> <p>El codi seg\u00fcent mostra com utilitzar aquests components a l'informe de vendes del mes de desembre creat anteriorment.</p> Python<pre><code>titulo = dp.HTML('''\n&lt;p style=\"font-size:30px;text-align:center;color:#ffffff;background-color:#4d4d4d;\"&gt;\n    Informe de ventas\n&lt;/p&gt;''')\ndata_path = os.path.join(base_path, \"data.csv\")\nfichero = dp.Attachment(file=data_path)\ntexto = dp.Text('**Puedes descargar el fichero con los datos del informe.**')\nimage_path = os.path.join(base_path, \"img\", \"report.png\")\nimagen = dp.Media(file=image_path)\nreport = dp.Report(imagen, titulo, unidades, texto, fichero)\nreport_path = os.path.join(base_path, \"informe4.html\")\nreport.save(path=report_path, open=True)\n</code></pre> <p>Pots descarregar la imatge utilitzada, el resultat de l'informe i el codi Python complet de l'exemple.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#organitzar-els-components-dun-informe","title":"Organitzar els components d'un informe","text":"<p>Com hem pogut comprovar als informes que hem fet fins ara amb <code>DataPane</code>, els diferents components que afegim a un informe (com les taules de dades, el contingut HTML o les imatges) s'apilen verticalment un sota l'altre, com en un layout vertical. Encara que a alguns casos poden ser suficients, la llibreria incorpora diferents opcions per organitzar els components de l'informe.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#grups-de-components","title":"Grups de components","text":"<p>Datapane permet definir grups de components en un informe, organitzant els components del grup en forma de taula. En crear el grup, podem indicar el nombre de files i columnes que volem.</p> Python<pre><code>dp.Report(\ndp.Group(\ncomponent1,component2,component3,component4,\ncolumns=2, rows=2))\n</code></pre> <p>En aquest exemple es crea un informe que cont\u00e9 un grup amb quatre components, organitzats en dues files i dues columnes. Per a organitzacions m\u00e9s complexes, \u00e9s possible incloure-hi grups dins d'altres grups.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#pagines","title":"P\u00e0gines","text":"<p>Una altra de les opcions que incorpora<code>DataPane</code> per a l'organitzaci\u00f3 dels components s\u00f3n les p\u00e0gines. Les p\u00e0gines permeten que un informe estiga format per diversos informes (cadasc\u00fa en una p\u00e0gina), de manera que l'usuari es puga moure entre les p\u00e0gines des de la part superior de l'informe. La idea \u00e9s similar a la dels diferents fulls en un full de c\u00e0lcul.</p> Python<pre><code>dp.Report(\ndp.Page(\ntitle=\"P\u00e0gina 1\",\nblocks=[componente2, componente3]\n),\ndp.Page(\ntitle=\"P\u00e0gina 2\",\nblocks=[componente3, componente4]\n)\n)\n</code></pre> <p>A l'exemple, es crea un informe amb dues p\u00e0gines. A cadascuna se li assigna un t\u00edtol amb la propietat <code>title</code> (ser\u00e0 el que l'usuari veur\u00e0 a la part superior de l'informe per moure's entre les p\u00e0gines), i els components que la formen amb el par\u00e0metre <code>blocks</code>.</p> <p>\u00c9s important destacar que no \u00e9s possible organitzar unes p\u00e0gines dins d'altres, i que si utilitzem p\u00e0gines han d'estar directament contingudes dins del component <code>Report</code>.</p>"},{"location":"unitats/6-Informes/teoria/2-Disseny%20d%27informes/#selectors","title":"Selectors","text":"<p>Els selectors s'utilitzen per incloure en un informe diferents components relacionats entre si, de manera que l'usuari decideix quin vol visualitzar. Per exemple, es pot utilitzar per incloure en un informe una taula de dades i un gr\u00e0fic, i que l'usuari puga alternar entre tots dos components en lloc de veure'ls alhora.</p> Python<pre><code>dp.Report(dp.Select(blocks=[componente1, componente2, componente3]))\n</code></pre> <p>A l'exemple es crea un informe amb un selector que permetr\u00e0 a l'usuari triar entre tres components. La manera com l'usuari triar\u00e0 el component que voleu visualitzar dependr\u00e0 del nombre de components que tingui el selector. Per a menys de 5 opcions es fan servir pestanyes, i si s'hi inclouen 5 o m\u00e9s s'utilitza un desplegable. L'etiqueta associada a cada opci\u00f3 s'estableix amb la propietat label que tenen tots els components de <code>DataPane</code>.</p>"},{"location":"unitats/6-Informes/teoria/3-Grafics/","title":"3 - Elaboraci\u00f3 de gr\u00e0fics","text":""},{"location":"unitats/6-Informes/teoria/3-Grafics/#elaboracio-de-grafics","title":"Elaboraci\u00f3 de gr\u00e0fics","text":"<p>Els gr\u00e0fics s\u00f3n una eina habitual per presentar informaci\u00f3 en un informe, ja que permeten mostrar de manera visual relacions en les dades que dif\u00edcilment es podrien observar representant-les en forma de taula.</p> <p><code>DataPane</code> permet incloure gr\u00e0fics als informes per mitj\u00e0 del component <code>Plot</code>. Aquest component rep el gr\u00e0fic a mostrar, que s'haur\u00e0 de crear amb una llibreria especialitzada de gr\u00e0fics.<code>DataPane</code> \u00e9s compatible amb les principals llibreries Python per a gr\u00e0fics, com Matplotlib, Altair, Plotly o Bokeh.</p> <p>Nosaltres utilitzarem la llibreria <code>matplotlib</code>, que encara que no est\u00e0 inclosa a la biblioteca est\u00e0ndard de Python, se'l considera com l'est\u00e0ndard de facto per a la generaci\u00f3 de gr\u00e0fics a Python. A m\u00e9s, es pot utilitzar directament des d'un DataFrame de <code>pandas</code>.</p> <p>Tipus de gr\u00e0fics matplotlib</p> <p>Tot i que en els apartats seg\u00fcents ens centrarem en els tipus de gr\u00e0fics m\u00e9s utilitzats, la llibreria matplotlib permet generar gr\u00e0fics de multitud de tipus diferents. Busca a la documentaci\u00f3 si necessites incloure gr\u00e0fics d'altre tipus.</p>"},{"location":"unitats/6-Informes/teoria/3-Grafics/#grafics-de-linies","title":"Gr\u00e0fics de l\u00ednies","text":"<p>Un dels tipus m\u00e9s habituals de gr\u00e0fics s\u00f3n els de l\u00ednies, que permeten representar gr\u00e0ficament la relaci\u00f3 entre dues variables utilitzant eixos cartesians (abscises i ordenades, o simplement x i y). Aquest tipus de gr\u00e0fic \u00e9s molt utilitzat per mostrar els canvis produ\u00efts en una variable segons una altra. La segona variable sol ser el temps, convertint el gr\u00e0fic en una representaci\u00f3 d'una s\u00e8rie temporal.</p> <p>Construirem un gr\u00e0fic de l\u00ednies utilitzant les mateixes dades d'origen que a l'apartat anterior, que contenen la informaci\u00f3 mensual de vendes dels diferents comercials d'una empresa. A partir d'aquestes dades, podem obtenir el gr\u00e0fic de l\u00ednies seg\u00fcent, que mostra l'evoluci\u00f3 al llarg de l'any del nombre total d'unitats venudes per tots els comercials.</p> <p> </p> Gr\u00e0fic de l\u00ednies <p>El codi necessari per generar un informe amb aquest gr\u00e0fic s'inclou a continuaci\u00f3:</p> Python<pre><code>ventas_mes = df.groupby(['Mes'], sort=False).sum()\ngrafico_matplotlib = ventas_mes.plot(y='Unidades')\ngrafico_datapane = dp.Plot(grafico_matplotlib)\n</code></pre> <p>A la primera l\u00ednia, creem un nou DataFrame amb les dades de vendes agrupades per mes (utilitzant el m\u00e8tode <code>groupby()</code>) aplicant la funci\u00f3 d'agregaci\u00f3 de suma. D'aquesta manera tindrem el total d'unitats i l'import per cada mes.</p> <p>A la segona l\u00ednia del codi s'utilitza el m\u00e8tode <code>Plot</code> del DataFrame per generar un nou gr\u00e0fic amb la llibreria <code>Matplotlib</code>. Com a par\u00e0metre del m\u00e8tode indiquem quina columna del DataFrame s'ha de representar a l'eix y (en aquest cas les unitats venudes).</p> <p>A la darrera l\u00ednia, a partir del gr\u00e0fic anterior, creem un nou objecte Plot de <code>DataPane</code>, que podrem inserir en un informe com la resta de components que hem vist a l'apartat anterior.</p>"},{"location":"unitats/6-Informes/teoria/3-Grafics/#grafics-de-barres","title":"Gr\u00e0fics de barres","text":"<p>Els gr\u00e0fics de barres, igual que els de l\u00ednies, tamb\u00e9 permeten representar la relaci\u00f3 entre dues variables. Per\u00f2 en aquest cas, una de les variables (que normalment se situa a l'eix horitzontal) sol tenir valors qualitatius o discrets (dades categ\u00f2riques). Per a cadascun, el valor de l'altra variable es representar\u00e0 amb l'al\u00e7ada d'una barra o columna.</p> <p>Per a les nostres dades de vendes, un possible gr\u00e0fic de barres seria el que mostraria, per a cada venedor, l'import total de vendes en tots els mesos.</p> <p> </p> Gr\u00e0fic de barres <p>El codi necessari per generar un informe amb aquest gr\u00e0fic \u00e9s molt similar al del gr\u00e0fic de l\u00ednies:</p> Python<pre><code>ventas_vendedor = df.groupby(['Nombre']).sum()\ngrafico_matplotlib = ventas_vendedor.plot.bar(y='Importe (\u20ac)')\ngrafico_datapane = dp.Plot(grafico_matplotlib)\n</code></pre> <p>Com es pot apreciar, en aquest cas, les dades s'agrupen pel nom del venedor. Per generar un gr\u00e0fic de barres es fa servir el m\u00e8tode <code>plot.bar</code> del DataFrame. En aquest cas representarem l'import. Finalment, de la mateixa manera que a l'exemple anterior, es crea el component Plot de <code>DataPane</code> a partir del gr\u00e0fic de Matplotlib.</p>"},{"location":"unitats/6-Informes/teoria/3-Grafics/#grafics-de-sectors","title":"Gr\u00e0fics de sectors","text":"<p>Els gr\u00e0fics de sectors (tamb\u00e9 coneguts com a gr\u00e0fics de past\u00eds) representen en un cercle la distribuci\u00f3 d'una variable, normalment discreta. \u00c9s un dels gr\u00e0fics m\u00e9s habituals, ja que permeten comparar r\u00e0pidament la import\u00e0ncia dels diferents valors de la variable.</p> <p>Seguint amb les nostres dades de vendes, podr\u00edem plantejar un gr\u00e0fic de sectors que representi les unitats totals venudes per cada venedor.</p> <p>El codi associat a aquest gr\u00e0fic \u00e9s molt similar al dels exemples anteriors:</p> Python<pre><code>grafico_matplotlib = ventas_vendedor.plot.pie(y='Unidades',legend=False, ylabel=\"\")\ngrafico_datapane = dp.Plot(grafico_matplotlib)\n</code></pre> <p>Com es pot observar, es fa servir el mateix DataFrame que a l'exemple anterior (vendes_venedor). Per generar el gr\u00e0fic utilitzem el m\u00e8tode <code>plot.pie</code> del DataFrame, a qui indiquem que representarem les unitats. A m\u00e9s, traiem la llegenda del gr\u00e0fic (que en aquest cas no aporta informaci\u00f3) i l'etiqueta de la variable representada. Finalment, de la mateixa manera que en els casos anteriors, se'n crea el component Plot de <code>DataPane</code> a partir del gr\u00e0fic deMatplotlib.</p> <p>Exemple</p> <p>Pots decarregar el codi per generar l'informe que inclou els tres gr\u00e0fics vistos en aquest apartat i l'informe generat.</p>"},{"location":"unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/","title":"4 - Desenvolupament d'aplicacions amb informes","text":""},{"location":"unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/#desenvolupament-daplicacions-amb-informes","title":"Desenvolupament d'aplicacions amb informes","text":"<p>Quan tenim els nostres informes dissenyats, hem d'integrar-los amb les nostres aplicacions. Com hem vist, la llibreria <code>DataPane</code> genera els informes en format HTML, cosa que facilitar\u00e0 la tasca dintegraci\u00f3, a m\u00e9s de permetre el desplegament dels informes en un servidor remot.</p>"},{"location":"unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/#integracio-dinformes-a-una-aplicacio-qt","title":"Integraci\u00f3 d'informes a una aplicaci\u00f3 Qt","text":"<p>Per integrar un informe fet amb la llibreria <code>DataPane</code> en una aplicaci\u00f3 Qt tenim dues alternatives:</p> <ol> <li>Obrir l'informe al navegador predeterminat del sistema</li> <li>Utilitzar el component <code>QWebEngineView</code> per incrustar l'informe a la finestra de l'aplicaci\u00f3</li> </ol>"},{"location":"unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/#obrir-linforme-al-navegador-predeterminat","title":"Obrir l'informe al navegador predeterminat","text":"<p>Podem fer que un informe s'obri al navegador predeterminat del sistema com a resposta a una acci\u00f3 de l'usuari (per exemple, la pulsaci\u00f3 d'un bot\u00f3 o una opci\u00f3 d'un men\u00fa). Per fer-ho, s'utilitza la classe QDesktopServices inclosa al m\u00f2dul QtGui. Aquesta classe disposa del m\u00e8tode est\u00e0tic <code>openUrl</code>, que obrir\u00e0 al navegador predeterminat la URL rebuda com a par\u00e0metre (utilitzant el tipus <code>QUrl</code>).</p> <p>El codi seg\u00fcent permet obrir un dels informes desenvolupats a l'apartat anterior al navegador predeterminat.</p> Python<pre><code>ruta_base = os.path.dirname(__file__)\nruta_absoluta = os.path.join(ruta_base, \"informe1.html\")\nQDesktopServices.openUrl(QUrl.fromLocalFile(ruta_absoluta))\n</code></pre> <p>A la primera l\u00ednia es construeix la ruta absoluta del fitxer a partir de la seva ruta relativa. A continuaci\u00f3, s'utilitza el m\u00e8tode <code>openUrl</code> de <code>QDesktopServices</code> per obrir l'informe, passant-li com a par\u00e0metre un objecte <code>QUrl</code> constru\u00eft a partir de la ruta absoluta.</p>"},{"location":"unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/#utilitzar-el-componentqwebengineview","title":"Utilitzar el componentQWebEngineView","text":"<p>Si en lloc d'obrir l'informe al navegador predeterminat volem incrustar-lo a la finestra de la nostra aplicaci\u00f3, haurem d'utilitzar el component de QtQWebEngineView. Aquest component s'utilitza per mostrar qualsevol contingut web, tant local com remot, i es basa en el motor de navegaci\u00f3 Chromium.</p> <p>El codi que s'inclou a continuaci\u00f3 mostra com utilitzar aquest component, partint de la ruta absoluta obtinguda al codi anterior.</p> <p></p>Python<pre><code>view = QWebEngineView()\nview.load(QUrl.fromLocalFile(ruta_absoluta))\n</code></pre> El primer que fem \u00e9s crear el component. A continuaci\u00f3, s'invoca el m\u00e8tode <code>load()</code>, que iniciar\u00e0 la c\u00e0rrega del document especificat en forma d'objecte QUrl (de la mateixa manera que a l'exemple anterior). \u00c9s important destacar que la c\u00e0rrega es realitzar\u00e0 de forma as\u00edncrona, oferint el component senyals i ranures per controlar el proc\u00e9s de c\u00e0rrega. Als enlla\u00e7os de la unitat hi ha la refer\u00e8ncia a la documentaci\u00f3 d'aquest component.  <p>Exemple</p> <p>Als recursos de la unitat hi ha el fitxer de codi Python, una aplicaci\u00f3 Qt que combina les dues maneres d'integrar un informe. A la part superior de la finestra s'inclou un bot\u00f3 que en ser premut obri l'informe al navegador predeterminat. La resta de la finestra l'ocupa un QWebEngineView que mostra el mateix informe directament a l'aplicaci\u00f3.</p> <p> </p> Aplicaci\u00f3 amb informes integrats"},{"location":"unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/#origens-creuats","title":"Origens creuats","text":"<p>Recursos d'orige creuat (Cross-origin resources!)</p> <p>Els llocs web defineixen l\u2019origen de seguretat per accedir de manera segura als recursos dels altres per a l\u2019scripting del client o les bases de dades. Un origen consisteix en un nom d\u2019amfitri\u00f3, un esquema i un n\u00famero de port. Per exemple, els llocs http://www.example.com/my/page.html i http://www.example.com/my/overview.html tenen perm\u00eds per compartir la mateixa base de dades o accedir als documents dels altres quan s\u2019utilitzen en conjunts de marcs HTML i JavaScript. Al mateix temps, http://www.malicious.com/evil.html es veu impedida d\u2019accedir als recursos de http://www.example.com/, perqu\u00e8 s\u00f3n d\u2019un origen de seguretat diferent. Per defecte, els esquemes locals com file:// i qrc:// es consideren del mateix origen de seguretat i poden accedir als recursos dels altres. Els recursos locals estan per defecte restringits per accedir al contingut remot, la qual cosa significa que file:// no podr\u00e0 accedir a http://domain.com/foo.html.</p> <p>A\u00e7\u00f2 es tradueix en que les nostres p\u00e0gines web locals no es carregaran al WebView a no ser que habilitem els origens remots a les nostres p\u00e0gines locals. Ho farem de la seg\u00fcent forma:</p> Python<pre><code>from PySide6.QtWebEngineCore import QWebEngineSettings\n...\nview = QWebEngineView()\nview.settings().setAttribute(QWebEngineSettings.LocalContentCanAccessRemoteUrls, True)\nview.load(QUrl.fromLocalFile(html_path))\n</code></pre>"},{"location":"unitats/6-Informes/teoria/4-Aplicacions%20amb%20informes/#desplegament-dinformes-a-un-servidor","title":"Desplegament d'informes a un servidor","text":"<p>Com ja hem comentat, el fet que els informes dissenyats amb<code>DataPane</code> siguin fitxers HTML permet el seu desplegament en un servidor web. Aquesta opci\u00f3 facilita que un mateix informe puga ser consultat de diferents maneres (des de diferents aplicacions o des d'una intranet, per exemple).</p> <p>Informes a la web</p> <p>L'opci\u00f3 de desplegar els informes en un servidor web t\u00e9 sentit quan els informes no s'han de generar en el moment de la consulta, sin\u00f3 que es poden generar de forma programada amb antelaci\u00f3 (per exemple, informes mensuals que s'elaboren una vegada al mes).</p> <p>Els dos mecanismes comentats anteriorment per integrar un informe a una aplicaci\u00f3 Qt s\u00f3n perfectament v\u00e0lids per a informes desplegats en un servidor. Simplement haurem de canviar la URL subministrada, que en aquest cas referenciar\u00e0 al servidor on estan allotjats els informes.   </p> <p>N\u00favol</p> <p>Els prove\u00efdors de serveis al n\u00favol ofereixen la possibilitat de desplegar de forma senzilla contingut web est\u00e0tic, com \u00e9s el cas dels informes generats amb <code>DataPane</code>. AAzure trobem el servei <code>Static Web Apps</code>, mentre que a AWS podem fer-ho amb el servei <code>Amplify</code>. Tamb\u00e9 ho podem publicar a github.</p> <p>Finalment, comentar que els desenvolupadors de la llibreria<code>DataPane</code> ofereixen un servei d'emmagatzematge d'informes a internet (datapane.com), que permet pujar els informes directament des del codi Python que els genera. Per aix\u00f2 s'utilitza el m\u00e8tode <code>upload()</code> del component Report. Consulteu la documentaci\u00f3 si voleu servir aquest m\u00e8tode.</p>"},{"location":"unitats/7-ModelView/enlla%C3%A7os/enlla%C3%A7os/","title":"Unitat 5 - Arquitectura Model-Vista","text":""},{"location":"unitats/7-ModelView/enlla%C3%A7os/enlla%C3%A7os/#unitat-5-arquitectura-model-vista","title":"Unitat 5 - Arquitectura Model-Vista","text":""},{"location":"unitats/7-ModelView/enlla%C3%A7os/enlla%C3%A7os/#enllacos-dinteres","title":"Enlla\u00e7os d'inter\u00e9s","text":"<ol> <li>Tutorial de l'arquitectura Model-View de la documentaci\u00f3 oficial de PySide6</li> </ol>"},{"location":"unitats/7-ModelView/tasques/1%20-%20Pr%C3%A0ctiques/","title":"1   Pr\u00e0ctiques","text":""},{"location":"unitats/7-ModelView/tasques/1%20-%20Pr%C3%A0ctiques/#aplicacio-de-llista-de-tasques-per-modul","title":"Aplicaci\u00f3 de llista de tasques per m\u00f2dul","text":"<p>Es pret\u00e9n desenvolupar una aplicaci\u00f3 que ens permeta gestionar les tasques per cadascun dels m\u00f2duls que estem cursant. A la finestra principal tindrem:</p> <ul> <li>A la part esquerra una llista de m\u00f2duls.</li> <li>A la part dreta una llista de tasques.</li> <li>Al fer clic sobre qualsevol dels m\u00f2duls es carregaran les tasques corresponents a eixe m\u00f2dul.</li> <li>L\u2019aplicaci\u00f3 ens permetr\u00e0 insertar, eliminar i editar tant els m\u00f2duls com les tasques.</li> <li>Abans d\u2019eliminar es demanar\u00e0 confirmaci\u00f3.</li> <li>La informaci\u00f3 estar\u00e0 guardada en una base de dades amb dos taules relacionades.</li> </ul> <p>Compte</p> <p>Hem d'aplicar el qu\u00e8 hem vist en la teoria d'aquesta unitat per millorar el codi de l'aplicaci\u00f3 que estavem desenvolupant, tant la part d'acc\u00e9s a les dades com el patr\u00f3 Model/View.</p> <p>Alguns m\u00e8todes \u00fatils per a realitzar la tasca seran model.setFilter, view.hideColumn, model.removeColumn...</p> <p>Com sempre, consulteu la documentaci\u00f3 de QSqlTableModel i QTableView per a m\u00e9s informaci\u00f3.</p>"},{"location":"unitats/7-ModelView/teoria/1-Introduccio/","title":"1 Introduccio","text":""},{"location":"unitats/7-ModelView/teoria/1-Introduccio/#1-introduccio","title":"1. Introducci\u00f3","text":"<p>Qualsevol aplicaci\u00f3 necessita dades per al seu funcionament. La gran majoria de vegades, estes dades residixen en una base de dades, per tant, necessitem la creaci\u00f3 d'aplicacions que les utilitzen.</p> <p>PySide t\u00e9 les seues pr\u00f2pies classes per ajudar-nos a crear, connectar-nos i gestionar les nostres bases de dades de manera coherent. </p> <p>En esta unitat aprendrem a:</p> <ul> <li>Utilitzar el suport SQL de PySide per connectar-nos a una base de dades.</li> <li>Executar consultes SQL en una base de dades mitjan\u00e7ant PySide.</li> <li>Utilitzar l'arquitectura Model-View de PySide en aplicacions de bases de dades.</li> <li>Mostrar i editar dades amb diferents widgets de PySide.</li> </ul> <p>Atenci\u00f3</p> <p>Aquesta unitat requereix un coneixement b\u00e0sic del llenguatge SQL.</p>"},{"location":"unitats/7-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/","title":"2 Connexio a base de dades","text":""},{"location":"unitats/7-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#connexio-a-una-base-de-dades-sql-des-de-python","title":"Connexi\u00f3 a una base de dades SQL des de Python","text":"<p>\u00das de llibreries per a gestionar bases de dades</p> <p>Podr\u00edem utilitzar llibreries espec\u00edfiques de python3 per gestionar bases de dades, per\u00f2 en esta unitat utilitzarem la tecnologia pr\u00f2pia de Qt. A\u00e7\u00f2 ens ajudar\u00e0 a aprofitar la integraci\u00f3 entre les classes SQL de PySide i l'arquitectura Model-View. A m\u00e9s, no afegirem depend\u00e8ncies addicionals a la nostra aplicaci\u00f3. Per exemple, no utilitzarem el m\u00f2dul sqlite3 per gestionar una base de dades SQLite3, sin\u00f3 que utilitzarem les classes que ens proporciona PySide6.</p>"},{"location":"unitats/7-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#creacio-duna-connexio-de-base-de-dades","title":"Creaci\u00f3 d'una connexi\u00f3 de base de dades","text":"<p>Per connectar a base de dades necessiten informaci\u00f3 general sobre la seua configuraci\u00f3:</p> <ul> <li>El sistema de gesti\u00f3 de bases de dades (SGBD)</li> <li>El nom d'usuari</li> <li>La contrasenya</li> <li>El host on est\u00e0 allotjada</li> </ul> <p>Nosaltres utilitzarem SQLite 3 per la seua baixa configuraci\u00f3 requerida, ja que ens permet llegir i escriure directament a les bases de dades allotjades al disc dur, sense necessitat d'un proc\u00e9s de servidor separat. </p> <p>Un altre avantatge \u00e9s que la seua llibreria est\u00e0 inclosa a les llibreries est\u00e0ndars de Python3 i tamb\u00e9 a PySide, de manera que no cal que instal\u00b7leu res m\u00e9s per comen\u00e7ar a treballar amb elles.</p>"},{"location":"unitats/7-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#la-classe-qsqldatabase","title":"La classe QSqlDatabase","text":"<p>A PySide, podeu crear una connexi\u00f3 de base de dades mitjan\u00e7ant la classe QSqlDatabase. Aquesta classe representa una connexi\u00f3 i proporciona una interf\u00edcie per accedir a la base de dades. </p> <p>Per crear una connexi\u00f3, utilitzarem el m\u00e8tode .addDatabase() que rep com a arguments:</p> <ul> <li>Un driver SQL, string amb el nom del controlador compatible amb PySide</li> <li>Un nom de connexi\u00f3 (opcional). En cas de no passar-lo, s'assinar\u00e0 el nom per defecte qt_sql_default_connection.</li> </ul> Python<pre><code>QSqlDatabase.addDatabase(\ndriver, connectionName=QSqlDatabase.defaultConnection\n)\n</code></pre> <p>Els drivers d'SQL disponibles a PySide6 s\u00f3n els seg\u00fcents:</p> Nom del driver Sistema de gesti\u00f3 de bases de dades QDB2 IBM Db2 (versi\u00f3 7.1 i posterior) QIBASE Borland InterBase QMYSQL/M ARIADB   MySQL o MariaDB (versi\u00f3 5.0 i superior) QOCI Interf\u00edcie de crides d'Oracle QODBC Connectivitat de base de dades oberta (ODBC) QPSQL PostgreSQL (versions 7.3 i posteriors) QSQLITE2 SQLite 2 (obsolet des de Qt 5.14) QSQLITE SQLite 3 QTDS Sybase Adaptive Server (obsolet des de Qt 4.7) <p>Si ja teniu una connexi\u00f3 amb el mateix nom, se sobreescriur\u00e0.</p> <p>El m\u00e8tode .addDatabase() afig una connexi\u00f3 de base de dades a una llista de connexions disponibles. Aquesta llista \u00e9s un registre global que PySide mant\u00e9 amb les connexions disponibles en una aplicaci\u00f3.</p> <p>Un vegada creada una connexi\u00f3, podem d'establir diversos atributs que dependran del controlador que utilitzem. En general, haurem d'establir el host, el nom de la base de dades, el nom d'usuari i la contrasenya per accedir a la base de dades. Per fer-ho utilitzarem els m\u00e8todes .setHostName(host), .setDatabaseName(name), .setUserName(username) i .setPassword(password) respectivament.</p> <p>Contrasenya de connexi\u00f3</p> <p>La contrasenya qu\u00e8 passeu com a argument a .setPassword() s'emmagatzema en text sense format i es pot recuperar m\u00e9s tard amb el m\u00e8tode .password(). Aquest \u00e9s un risc de seguretat greu que haur\u00edeu d'evitar introduir a les vostres aplicacions de base de dades. Aprendrem a fer-ho m\u00e9s segur m\u00e9s endavant.</p> <p>En el cas de les bases de dades SQLite, el nom de la base de dades \u00e9s normalment un nom de fitxer o una ruta que inclou el nom del fitxer de la base de dades. Tamb\u00e9 podem utilitzar el nom especial :memory: per a una base de dades allotjada en mem\u00f2ria, de forma que evitem accessos a disc que s\u00f3n molt m\u00e9s lents.</p> Python<pre><code>from PySide6.QtSql import QSqlDatabase\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\"contacts.sqlite\")\ndatabase_name = connection.databaseName()\nconnection_name = connection.connectionName()\n</code></pre>"},{"location":"unitats/7-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#gestio-de-multiples-connexions","title":"Gesti\u00f3 de m\u00faltiples connexions","text":"<p>Potser necessitem utilitzar diverses connexions. Per exemple, \u00e9s possible que vulgam registrar les interaccions dels usuaris amb la base de dades mitjan\u00e7ant una connexi\u00f3 espec\u00edfica per a cada usuari o que la nostra aplicaci\u00f3 haja de connectar a diverses bases de dades per recollir informaci\u00f3 i actualitzar les dades locals.</p> <p>Per gestionar aquestes situacions, podem proporcionar noms espec\u00edfics per a les nostres connexions i fer refer\u00e8ncia a cada connexi\u00f3 pel seu nom.</p> Python<pre><code>from PySide6.QtSql import QSqlDatabase\nconnection1 = QSqlDatabase.addDatabase(\"QSQLITE\", \"connection1\")\nconnection1.setDatabaseName(\"contacts.sqlite\")\nconnection2 = QSqlDatabase.addDatabase(\"QSQLITE\", \"connection2\")\nconnection2.setDatabaseName(\"contacts.sqlite\")\ndatabase_name1 = connection1.databaseName()\nconnection_name1 = connection1.connectionName()\ndatabase_name2 = connection2.databaseName()\nconnection_name2 = connection2.connectionName()\n</code></pre>"},{"location":"unitats/7-ModelView/teoria/2-Connexio%20a%20base%20de%20dades/#obertura-duna-connexio-de-base-de-dades","title":"Obertura d'una connexi\u00f3 de base de dades","text":"<p>Una vegada establida la connexi\u00f3, hem d'obrir aquesta connexi\u00f3 per poder interactuar amb la nostra base de dades. Per fer-ho, utilitzem el m\u00e8tode .open() de la connexi\u00f3. Es pot utilitzar de dues formes:</p> <ul> <li>.open() obre una connexi\u00f3 de base de dades utilitzant els valors de connexi\u00f3 actuals.</li> <li>.open(username, password) obre una connexi\u00f3 a la base de dades mitjan\u00e7ant el fitxer username i password.</li> </ul> <p>El m\u00e8tode torna  True si la connexi\u00f3 t\u00e9 \u00e8xit. En cas contrari, torna False. En cas de no poder establir la connexi\u00f3, podeu utilitzar .lastError() per obtenir informaci\u00f3 sobre el que ha passat.</p> <p>Note</p> <p>.setPassword(password) emmagatzema les contrasenyes com a text sense format, la qual cosa suposa un risc de seguretat. D'altra banda, .open() no emmagatzema mai les contrasenyes, sin\u00f3 que la passa directament al controlador en obrir la connexi\u00f3. Despr\u00e9s d'aix\u00f2, descarta la contrasenya. Per tant, utilitzar .open() per gestionar les nostres contrasenyes \u00e9s el cam\u00ed a seguir si voleu evitar problemes de seguretat.</p> <p>Note</p> <p>En utilitzar .open() amb una connexi\u00f3 que utilitza el controlador SQLite, si el fitxer de base de dades no existeix, es crear\u00e0 autom\u00e0ticament un fitxer de base de dades nou i buit.</p> <p>Hauriem d'assegurar-nos que tenim una connexi\u00f3 v\u00e0lida abans d'intentar fer qualsevol operaci\u00f3 amb les nostres dades. En cas contrari, la nostra aplicaci\u00f3 pot fallar. </p> <p>Per exemple, qu\u00e8 passa si no tenim permisos d'escriptura per al directori en qu\u00e8 estem intentant crear aquest fitxer de base de dades? Hem d'assegurar-nos que estem gestionant qualsevol error que es puga produir en obrir una connexi\u00f3.</p> <p>Una manera habitual d'utilitzar .open() \u00e9s la seg\u00fcent:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase\nfrom PySide6.QtWidgets import QApplication, QMessageBox, QLabel\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\")\n)\n# connection.setDatabaseName(\"/contacts.sqlite\")\napplication = QApplication(sys.argv)\nif not connection.open():\nQMessageBox.critical(\nNone,\n\"Error connectant a la base de dades!\",\n\"Database Error: %s\" % connection.lastError().databaseText(),\n)\nsys.exit(1)\nwindow = QLabel(\"Connectat a la base de dades!\")\nwindow.setWindowTitle(\"Database open\")\nwindow.resize(200, 100)\nwindow.show()\nsys.exit(application.exec_())\n</code></pre>"},{"location":"unitats/7-ModelView/teoria/3-Execucio%20de%20consultes/","title":"Execucio de consultes SQL amb PySide","text":""},{"location":"unitats/7-ModelView/teoria/3-Execucio%20de%20consultes/#execucio-de-consultes-sql-amb-pyside","title":"Execucio de consultes SQL amb PySide","text":"<p>Amb una connexi\u00f3 de base de dades ja podem comen\u00e7ar a treballar amb la nostra base de dades. </p> <p>Per fer-ho, podem utilitzar consultes i objectes QSqlQuery basats en strings. QSqlQuery ens permet executar qualsevol classe de consulta SQL a la nostra base de dades, ja siguen sent\u00e8ncies de llenguatge de manipulaci\u00f3 de dades (DML), com ara SELECT, INSERT, UPDATE i DELETE, o sent\u00e8ncies de llenguatge de definici\u00f3 de dades (DDL), com ara CREATE TABLE, etc.</p> <p>QSqlQuery t\u00e9 diversos constructors:</p> <ul> <li>QSqlQuery(query, connection) construeix un objecte de consulta mitjan\u00e7ant una cadena SQL query i una connexi\u00f3 a base de dades connection. Si no especifiqueu una connexi\u00f3, o si la connexi\u00f3 especificada no \u00e9s v\u00e0lida, s'utilitzar\u00e0 la connexi\u00f3 de base de dades per defecte. Si query no \u00e9s una cadena buida, s'executar\u00e0 immediatament.</li> <li>QSqlQuery(connection) construeix un objecte de consulta utilitzant connection.</li> <li>QSqlQuery() la consulta utilitzar\u00e0 la connexi\u00f3 de base de dades predeterminada, si n'hi ha.</li> </ul> <p>Per executar una consulta, utilitzem .exec() de l'objecte de consulta. Torna True si la consulta ha tingut \u00e8xit i, en cas contrari, torna False. Podem utilitzar .exec() de dues maneres diferents:</p> <ul> <li>.exec(query) executa la consulta SQL basada en cadenes continguda a query. </li> <li>.exec() executa una consulta SQL preparada pr\u00e8viament.</li> </ul>"},{"location":"unitats/7-ModelView/teoria/3-Execucio%20de%20consultes/#consultes-estatiques","title":"Consultes est\u00e0tiques","text":"<p>Una consulta est\u00e0tica \u00e9s aquella que no obt\u00e9 ningun argument de fora de la consulta.</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\n# Create the connection\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\n# Open the connection\nif not con.open():\nprint(\"Database Error: %s\" % con.lastError().databaseText())\nsys.exit(1)\n# Create a query and execute it right away using .exec()\ncreateTableQuery = QSqlQuery()\ncreateTableQuery.exec(\n\"\"\"\n    CREATE TABLE contacts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\n        name VARCHAR(40) NOT NULL,\n        job VARCHAR(50),\n        email VARCHAR(40) NOT NULL\n    )\n    \"\"\"\n)\nprint(con.tables())\n</code></pre>"},{"location":"unitats/7-ModelView/teoria/3-Execucio%20de%20consultes/#consultes-dinamiques-formatacio-de-cadena","title":"Consultes din\u00e0miques: formataci\u00f3 de cadena","text":"<p>Les consultes que accepten par\u00e0metres en el moment de l'execuci\u00f3 es coneixen com a consultes din\u00e0miques. L'\u00fas de par\u00e0metres ens permet ajustar la consulta i recuperar dades en resposta a valors de par\u00e0metres determinats. Valors diferents produiran resultats diferents. </p> <p>Hi ha dues formes de construir la consulta utilitzant els valors dels par\u00e0metres d'entrada:</p> <ul> <li>Crear la consulta de manera din\u00e0mica, utilitzant el format de cadena per interpolar els valors dels par\u00e0metres.</li> <li>Preparar la consulta utilitzant par\u00e0metres de marcador de posici\u00f3 i, a continuaci\u00f3, enlla\u00e7ar els valors espec\u00edfics als par\u00e0metres.</li> </ul> <p>Vulnerabilitat de les consultes construides mitjan\u00e7ant cadenes</p> <p>El primer enfocament ens permet crear consultes din\u00e0miques r\u00e0pidament. Per\u00f2 la nostra base de dades quedar\u00e0 exposada a atacs d'injecci\u00f3 SQL, podent aix\u00ed quedar la informaci\u00f3 compromesa.</p> <p>Ac\u00ed tenim un exemple de construcci\u00f3 de la consulta utilitzant la formataci\u00f3 de cadenes de text:</p> Python<pre><code>name = \"Ferran\"\njob = \"Professor\"\nemail = \"ferran@example.com\"\nquery = QSqlQuery()\nquery.exec(\nf\"\"\"INSERT INTO contacts (name, job, email)\n    VALUES ('{name}', '{job}', '{email}')\"\"\"\n)\n</code></pre> <p>\u00das de cometes simples en la construcci\u00f3 de la consulta</p> <p>Perqu\u00e8 aquest tipus de consulta din\u00e0mica funcione, hem d'assegurar-nos que els valors que s'han d'inserir tinguen el tipus de dades adequat. Per tant, utilitzem cometes simples al voltant del marcador de posici\u00f3 de la cadena f perqu\u00e8 aquests valors han de ser cadenes.</p>"},{"location":"unitats/7-ModelView/teoria/3-Execucio%20de%20consultes/#consultes-dinamiques-parametres-de-marcador-de-posicio","title":"Consultes din\u00e0miques: par\u00e0metres de marcador de posici\u00f3","text":"<p>El segon enfocament per executar consultes din\u00e0miques requereix que preparem les consultes pr\u00e8viament utilitzant una plantilla amb marcadors de posici\u00f3 per als par\u00e0metres. PySide admet dos estils de marcador de posici\u00f3 de par\u00e0metres:</p> <ul> <li>L'estil Oracle, que utilitza marcadors de posici\u00f3 amb nom com ara :name o :email.</li> <li>L'estil ODBC, utilitza un signe d'interrogaci\u00f3 (?) com a marcador de posici\u00f3.</li> </ul> <p>Per crear aquest tipus de consulta din\u00e0mica, primer creem una plantilla amb un marcador de posici\u00f3 per a cada par\u00e0metre de consulta i despr\u00e9s passem aquesta plantilla com a argument al m\u00e8tode .prepare(), que analitza, compila i prepara la plantilla de consulta per a l'execuci\u00f3. Si la plantilla t\u00e9 problemes, com ara un error de sintaxi SQL, no es pot compilar la plantilla i retorna False.</p> <p>Si el proc\u00e9s de preparaci\u00f3 t\u00e9 \u00e8xit, .prepare() torna True. Despr\u00e9s d'aquest pas, estem en situaci\u00f3 de poder passar un valor espec\u00edfic a cada par\u00e0metre amb:</p> <ul> <li>.bindValue() amb nom o posicionals o </li> <li>.addBindValue() amb par\u00e0metres posicionals. </li> </ul> <p>.bindValue() t\u00e9 les dues variants seg\u00fcents:</p> <ul> <li>.bindValue(placeholder, val)</li> <li>.bindValue(pos, val)</li> </ul> <p>A la primera variaci\u00f3, placeholder representa un marcador de posici\u00f3 d'estil Oracle. En la segona variaci\u00f3, pos representa un nombre enter amb la posici\u00f3 d'un par\u00e0metre a la consulta, comen\u00e7ant pel 0. En ambdues variacions, val mant\u00e9 el valor que s'ha d'enlla\u00e7ar a un par\u00e0metre espec\u00edfic.</p> <p>.addBindValue() afegeix un valor a la llista de marcadors de posici\u00f3 mitjan\u00e7ant l'enlla\u00e7 posicional. Aix\u00f2 vol dir que l'ordre de les crides a .addBindValue() determina quin valor s'associar\u00e0 a cada par\u00e0metre de marcador de posici\u00f3 a la consulta preparada.</p> <p>Per comen\u00e7ar a utilitzar consultes preparades, podeu preparar un INSERT INTO per omplir la vostra base de dades amb algunes dades de mostra. Ampliem l'exemple anterior:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\n# Create the connection\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\n# Open the connection\nif not con.open():\nprint(\"Database Error: %s\" % con.lastError().databaseText())\nsys.exit(1)\n# Create a query and execute it right away using .exec()\ncreateTableQuery = QSqlQuery()\ncreateTableQuery.exec(\n\"\"\"\n    CREATE TABLE contacts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE NOT NULL,\n        name VARCHAR(40) NOT NULL,\n        job VARCHAR(50),\n        email VARCHAR(40) NOT NULL\n    )\n    \"\"\"\n)\ninsertDataQuery = QSqlQuery()\n# Estil OBDC\nprepared = insertDataQuery.prepare(\n\"\"\"\n    INSERT INTO contacts (\n        name,\n        job,\n        email\n    )\n    VALUES (?, ?, ?)\n    \"\"\"\n)\nif prepared:\ndata = [\n(\"Lara\", \"Senior Web Developer\", \"lara@example.com\"),\n(\"David\", \"Project Manager\", \"david@example.com\")\n]\n# Inserci\u00f3 amb addBindValue\nfor name, job, email in data:\ninsertDataQuery.addBindValue(name)\ninsertDataQuery.addBindValue(job)\ninsertDataQuery.addBindValue(email)\ninsertDataQuery.exec()\ninsertDataQuery = QSqlQuery()\n# Estil Oracle\nprepared = insertDataQuery.prepare(\n\"\"\"\n    INSERT INTO contacts (\n        name,\n        job,\n        email\n    )\n    VALUES (:name, :job, :email)\n    \"\"\"\n)\nif prepared:\ndata = [\n(\"Davinia\", \"Data Analyst\", \"davinia@example.com\"),\n(\"Juli\", \"Senior Python Developer\", \"juli@example.com\")\n]\nfor name, job, email in data:\ninsertDataQuery.bindValue(2, email)  # Inserci\u00f3 per posici\u00f3\ninsertDataQuery.bindValue(\":job\", job)  # Inserci\u00f3 amb placeholder\ninsertDataQuery.bindValue(\":name\", name)\ninsertDataQuery.exec()\n</code></pre> <p>Nota</p> <p>Fixeu-se a les l\u00ednies 32 i 68, on s'han utilitzat els dos estils de preparaci\u00f3 de sent\u00e8ncia SQL. Fixeu-se tamb\u00e9 a les l\u00ednies 50-53, on s'est\u00e0 utilitzant la posici\u00f3 per a inserir amb addBindValue. Mentre que a les l\u00ednies 75-78, s'est\u00e0 utilitzant els placeholders i la posici\u00f3 per a fer binding.</p> <p>Aquest enfocament per crear consultes din\u00e0miques \u00e9s \u00fatil quan voleu personalitzar les vostres consultes utilitzant valors que provenen de l'entrada de l'usuari.</p> <p>Injecci\u00f3 d'SQL</p> <p>Recordeu que cada vegada que utilitzeu l'entrada de l'usuari per completar una consulta en una base de dades, us enfronteu al risc de seguretat de la injecci\u00f3 SQL.</p> <p>A PySide, la combinaci\u00f3 de .prepare(), .bindValue(), i .addBindValue() us protegeix completament dels atacs d'injecci\u00f3 SQL, de manera que aquesta \u00e9s la manera correcta d'utilitzar entrades no fiables per completar les vostres consultes.</p>"},{"location":"unitats/7-ModelView/teoria/3-Execucio%20de%20consultes/#navegacio-pels-registres-en-una-consulta","title":"Navegaci\u00f3 pels registres en una consulta","text":"<p>Si executem una SELECT, el nostre objecte QSqlQuery mantindr\u00e0 registres que complisquen amb els criteris de la consulta. Si cap dada coincideix amb els criteris, la nostra consulta estar\u00e0 buida.</p> <p>QSqlQuery proporciona un conjunt de m\u00e8todes que ens permeten navegar a trav\u00e9s dels registres, o files, resultat d'una consulta:</p> M\u00e8tode Navega a ... .next() El seg\u00fcent registre .previous() El registre anterior .first() El primer registre .last() L'\u00faltim registre .seek(index, relative=False) El registre en la posici\u00f3 index <p>Per a accedir als valors dels registres o columnes, els seg\u00fcents m\u00e8todes tamb\u00e9 ens poden ser \u00fatils:</p> M\u00e8tode Recupera .value(index) El valor de la columna index .record() El registre actual .indexOf(column) L'\u00edndex de la columna column. -1 si no existeix <p>Tots els m\u00e8todes tornen True o False, i ens permeten navegar a trav\u00e9s del resultat d'una consulta sense haver de consultar de nou la base de dades. Els podem utilitzar en bucles per rec\u00f3rrer tots els registres.</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\")\n)\nif not connection.open():\nprint(\"Error connectant a la base de dades!\",\nf\"Database Error: {connection.lastError().databaseText()}\")\nsys.exit(1)\nelse:  # Connected\nquery = QSqlQuery()\nif query.exec(\"SELECT name, job, email FROM contacts\"):\nwhile query.next():\nprint(\nf\"Nom: {query.value('name')} \\tTreball: {query.value('job')} \\tCorreu: {query.value('email')}\")\nquery.finish()\n</code></pre> <p>Tancament de la consulta</p> <p>Tingau en compte que mentre tenim una consulta activa, l'acc\u00e9s a la base de dades estar\u00e0 bloquejat i des d'una aplicaci\u00f3 externa no es podran modificar els seus registres fins que la desactivem. Per fer-ho, i a m\u00e9s alliberar la mem\u00f2ria que t\u00e9 associada, utilitzem el m\u00e8tode .finish(). </p> <p>Pots fer la prova posant un punt d'interrupci\u00f3 al while i amb una altra aplicaci\u00f3 intentar modificar els registres. Et donar\u00e0 un error:</p> <p>SQL Error [5]: [SQLITE_BUSY] The database file is locked (database is locked).</p>"},{"location":"unitats/7-ModelView/teoria/3-Execucio%20de%20consultes/#tancament-i-eliminacio-de-connexions-de-base-de-dades","title":"Tancament i eliminaci\u00f3 de connexions de base de dades","text":"<p>Per tancar una connexi\u00f3 a PySide, utilitzem el m\u00e8tode .close() de la connexi\u00f3. Aquest m\u00e8tode tanca la connexi\u00f3 i allibera els recursos adquirits. Tamb\u00e9 invalida els objectes QSqlQuery associats perqu\u00e8 no poden funcionar correctament sense una connexi\u00f3 activa. Amb el m\u00e8tode .isOpen() podem comprovar si la connexi\u00f3 est\u00e0 oberta o no.</p> <p>Tancament de connexions</p> <p>Tingueu en compte que els objectes QSqlQuery queden a la mem\u00f2ria despr\u00e9s de tancar la seua connexi\u00f3 associada, de manera que hem d'inactivar les consultes amb .finish() o .clear(), o suprimir l'objecte QSqlQuery abans de tancar la connexi\u00f3.</p> <p>Reutilitzaci\u00f3 de connexions</p> <p>Podem reobrir i reutilitzar qualsevol connexi\u00f3 pr\u00e8viament tancada ja que .close() no elimina les connexions de la llista de connexions disponibles.</p> <p>Tamb\u00e9 podem eliminar completament les connexions de la nostra base de dades mitjan\u00e7ant .removeDatabase().</p> <p>En definitiva, primer tanquem les consultes amb .finish(), despr\u00e9s tanqueu la base de dades amb .close(), i finalment eliminem la connexi\u00f3 amb .removeDatabase().</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\nconnection = QSqlDatabase.addDatabase(\"QSQLITE\")\nconnection.setDatabaseName(\nos.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\")\n)\nif not connection.open():\nprint(\"Error connectant a la base de dades!\",\nf\"Database Error: {connection.lastError().databaseText()}\")\nsys.exit(1)\nelse:  # Connected\nquery = QSqlQuery()\nif query.exec(\"SELECT name, job, email FROM contacts\"):\nwhile query.next():\nprint(\nf\"Nom: {query.value('name')} \\tTreball: {query.value('job')} \\tCorreu: {query.value('email')}\")\nquery.finish()\nconnection.close()\nprint(\"Connexions disponibles: {}\".format(QSqlDatabase.connectionNames()))\nQSqlDatabase.removeDatabase(QSqlDatabase.database().connectionName())\nprint(\"Connexions disponibles: {}\".format(QSqlDatabase.connectionNames()))\n</code></pre>"},{"location":"unitats/7-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/","title":"Visualitzaci\u00f3 i edici\u00f3 de dades amb PySide","text":""},{"location":"unitats/7-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#visualitzacio-i-edicio-de-dades-amb-pyside","title":"Visualitzaci\u00f3 i edici\u00f3 de dades amb PySide","text":"<p>Un requisit com\u00fa a les aplicacions GUI que utilitzen bases de dades \u00e9s la capacitat de carregar, mostrar i editar dades de la base de dades mitjan\u00e7ant diferents Widgets.Els que se solen utilitzar s\u00f3n les taules, les llistes, els arbres i les llistes desplegables.</p> <p>PySide ofereix dos tipus diferents de Widgets per gestionar dades:</p> <ul> <li>Els Widgets est\u00e0ndard inclouen contenidors interns per emmagatzemar dades.</li> <li>Els widgets de visualitzaci\u00f3 no mantenen contenidors de dades interns, sin\u00f3 que utilitzen models per accedir a les dades.</li> </ul> <p>El segon enfocament aprofita la programaci\u00f3 Model-View de PySide. Amb aquest enfocament, tenim Widgets que representen vistes com ara taules, llistes i arbres i classes model que es comuniquen amb les vostres dades.</p>"},{"location":"unitats/7-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#arquitectura-model-view-de-pyside","title":"Arquitectura Model-View de PySide","text":"<p>El patr\u00f3 de disseny Model-View-Controller (MVC) \u00e9s un patr\u00f3 destinat a dividir el codi d'una aplicaci\u00f3 en tres capes generals, cadascuna amb una funci\u00f3 diferent.</p> <p>El model s'ocupa de la l\u00f2gica de l'aplicaci\u00f3, la vista proporciona representacions en pantalla i el controlador connecta el model i la vista per fer que l'aplicaci\u00f3 funcione correctament, mantenint la persist\u00e8ncia de les dades.</p> <p>Qt proporciona una variaci\u00f3 personalitzada de MVC. L'anomenen arquitectura Model-View i tamb\u00e9 est\u00e0 disponible per a PySide. El patr\u00f3 tamb\u00e9 separa la l\u00f2gica en tres components:</p> <ul> <li> <p>Els models es comuniquen amb les dades i accedeixen a elles. Tamb\u00e9 defineixen una interf\u00edcie que utilitzen les vistes i els delegats per accedir a les dades. Tots els models es basen en QAbstractItemModel. Alguns models que s'utilitzen habitualment inclouen QStandardItemModel, QFileSystemModel, i models relacionats amb SQL.</p> </li> <li> <p>Les vistes s\u00f3n les responsables de mostrar les dades a l'usuari. Tamb\u00e9 tenen una funcionalitat similar al controlador en el patr\u00f3 MVC. Totes les vistes es basen en QAbstractItemView. Algunes vistes d'\u00fas habitual s\u00f3n QListView, QTableView i QTreeView.</p> </li> <li> <p>Els Delegats presenten els elements a les vistes i proporcionen widgets per poder modificar-los. Tamb\u00e9 es comuniquen amb el model si s'ha modificat un element. La classe base \u00e9s QAbstractItemDelegate.</p> </li> </ul> <p>La separaci\u00f3 de classes en aquests tres components implica que els canvis en els models es reflectiran autom\u00e0ticament en les vistes, i els canvis en les vistes o a trav\u00e9s dels delegats actualitzaran el model autom\u00e0ticament.</p> <p>A m\u00e9s, podem mostrar les mateixes dades en diferents vistes amb un \u00fanic model.</p>"},{"location":"unitats/7-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-components-estandard","title":"\u00das de components est\u00e0ndard","text":"<p>PySide ofereix diversos components est\u00e0ndard per mostrar i editar dades a les vostres aplicacions. Aquests proporcionen vistes com ara taules, arbres i llistes. Tamb\u00e9 proporcionen un contenidor intern per emmagatzemar dades i delegats convenients per editar-les. Totes aquestes caracter\u00edstiques s'agrupen en una sola classe.</p> <p>Hi ha tres d'aquestes classes est\u00e0ndards:</p> <ul> <li>QListWidget -&gt; llista d'elements</li> <li>QTreeWidget -&gt; arbre jer\u00e0rquic d'elements</li> <li>QTableWidget -&gt; taula d'elements</li> <li>QTableWidget \u00e9s el m\u00e9s \u00fatil quan es tracta de mostrar i editar dades. Crea una matriu 2D d'objectes  QTableWidgetItem. Cada element t\u00e9 un valor individual en forma d'string i aquests valors es mostren en cel\u00b7les que s'organitzen en una taula de files i columnes.</li> </ul> <p>Les operacions m\u00e9s importants que podem realitzar sobre ells s\u00f3n:</p> <ul> <li>Edici\u00f3 del contingut dels seus elements mitjan\u00e7ant objectes delegats</li> <li>Afegir nous elements utilitzant .setItem()</li> <li>Configurar el nombre de files i columnes mitjan\u00e7ant .setRowCount() i.setColumnCount()</li> <li>Afegir etiquetes de cap\u00e7alera verticals i horitzontals amb setHorizontalHeaderLabels() i .setVerticalHeaderLabels</li> </ul> <p></p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\nfrom PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQMessageBox,\nQTableWidget,\nQTableWidgetItem,\n)\nclass Contacts(QMainWindow):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"QTableView Example\")\nself.resize(450, 250)\n# Set up the view and load the data\nself.view = QTableWidget()\nself.view.setColumnCount(4)\nself.view.setHorizontalHeaderLabels([\"ID\", \"Name\", \"Job\", \"Email\"])\nquery = QSqlQuery(\"SELECT id, name, job, email FROM contacts\")\nwhile query.next():\nrows = self.view.rowCount()\nself.view.setRowCount(rows + 1)\nself.view.setItem(rows, 0, QTableWidgetItem(str(query.value(0))))\nself.view.setItem(rows, 1, QTableWidgetItem(query.value(1)))\nself.view.setItem(rows, 2, QTableWidgetItem(query.value(2)))\nself.view.setItem(rows, 3, QTableWidgetItem(query.value(3)))\nself.view.resizeColumnsToContents()\nself.setCentralWidget(self.view)\nquery.finish()\nQSqlDatabase.removeDatabase(QSqlDatabase.database().connectionName())\ndef createConnection():\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(os.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\nif not con.open():\nQMessageBox.critical(\nNone,\n\"QTableView Example - Error!\",\n\"Database Error: %s\" % con.lastError().databaseText(),\n)\nreturn con\napp = QApplication(sys.argv)\nconnection = createConnection()\nif not connection.isOpen():\nsys.exit(1)\nwin = Contacts()\nwin.show()\nQSqlDatabase.removeDatabase(QSqlDatabase.database().connectionName())\nsys.exit(app.exec())\n</code></pre> <p>Mostrar i editar taules de bases de dades amb Widgets est\u00e0ndard \u00e9s una tasca dif\u00edcil, ja que tindrem dues c\u00f2pies de les mateixes dades que haurem de sincronitzar per mantindre la coher\u00e8ncia entre les dades i les visualitzacions:</p> <ul> <li>A la nostra base de dades</li> <li>Al widget, als contenidors interns, normalment propietats d'aquest</li> </ul> <p>Si seguim aquet patr\u00f3, som responsables de sincronitzar les dues c\u00f2pies de les nostres dades manualment, cosa que pot ser una operaci\u00f3 molesta i propensa a errors. Afortunadament, podem utilitzar l'arquitectura Model-View de PySide per evitar la majoria d'aquests problemes.</p>"},{"location":"unitats/7-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-components-amb-patro-model-view","title":"\u00das de components amb patr\u00f3 Model-View","text":"<p>Les classes que seguixen el patr\u00f3 Model-View de PySide eliminen els problemes de duplicaci\u00f3 i sincronitzaci\u00f3 de dades que es poden produir quan s'utilitzen classes est\u00e0ndard per crear aplicacions de bases de dades. L'arquitectura Model-View ens permet utilitzar diverses vistes per mostrar les mateixes dades perqu\u00e8 podem passar un model a moltes vistes.</p> <ul> <li>Les classes model proporcionen una interf\u00edcie de programaci\u00f3 d'aplicacions (API) que podem utilitzar per manipular dades. </li> <li>Les classes de visualitzaci\u00f3 proporcionen objectes delegats convenients que podem utilitzar per editar dades a la vista directament. </li> </ul> <p>Definim el model</p> <p>Per connectar una vista amb un m\u00f2dul determinat, heu de fer una crida .setModel() de l'objecte de vista.</p> <p>PySide ofereix un conjunt de classes de vista que admeten l'arquitectura Model-View:</p> <ul> <li>QListView -&gt; llista d'elements que prenen valors directament d'una classe model</li> <li>QTreeView -&gt; arbre jer\u00e0rquic d'elements que prenen valors directament d'una classe model</li> <li>QTableView -&gt; taula d'elements que prenen valors directament d'una classe model</li> </ul> <p>Podem utilitzar aquestes classes de vista juntament amb classes de model per crear les nostres aplicacions de base de dades. Aix\u00f2 far\u00e0 que siguen m\u00e9s robustes, m\u00e9s r\u00e0pides de codificar i menys propenses a errors.</p> <p>Aquestes s\u00f3n algunes de les classes models que proporciona PySide per treballar amb bases de dades SQL:</p> <ul> <li>QSqlQueryModel -&gt; model de dades de nom\u00e9s lectura per a consultes SQL</li> <li>QSqlTableModel -&gt; model de dades editable per llegir i escriure registres en una \u00fanica taula</li> <li>QSqlRelationalTableModel -&gt; model de dades editable per llegir i escriure registres en una taula relacional</li> </ul> <p>Una vegada connectat un d'aquests models a una taula o consulta de base de dades, podem utilitzar-los per omplir les nostres visualitzacions. Les vistes proporcionen objectes delegats que ens permeten modificar les dades directament a la vista. El model connectat a la vista actualitzar\u00e0 les dades de la vostra base de dades per reflectir qualsevol canvi a la vista. Tingueu en compte que no cal que actualitzem les dades de la base de dades manualment. El model ho far\u00e0 per nosaltres.</p> <p>Aqu\u00ed hi ha un exemple que mostra els conceptes b\u00e0sics de com utilitzar un QTableView i un QSqlTableModel junts per crear una aplicaci\u00f3 de base de dades mitjan\u00e7ant l'arquitectura Model-View de PySide:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtSql import QSqlDatabase, QSqlTableModel\nfrom PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQMessageBox,\nQTableView,\n)\nclass Contacts(QMainWindow):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"QTableView Example\")\nself.resize(415, 200)\n# Set up the model\nself.model = QSqlTableModel(self)\nself.model.setTable(\"contacts\")\nself.model.setEditStrategy(QSqlTableModel.OnFieldChange)\nself.model.setHeaderData(0, Qt.Horizontal, \"ID\")\nself.model.setHeaderData(1, Qt.Horizontal, \"Name\")\nself.model.setHeaderData(2, Qt.Horizontal, \"Job\")\nself.model.setHeaderData(3, Qt.Horizontal, \"Email\")\nself.model.select()\n# Set up the view\nself.view = QTableView()\nself.view.setModel(self.model)\nself.view.resizeColumnsToContents()\nself.setCentralWidget(self.view)\ndef createConnection():\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(os.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\nif not con.open():\nQMessageBox.critical(\nNone,\n\"QTableView Example - Error!\",\n\"Database Error: %s\" % con.lastError().databaseText(),\n)\nreturn False\nreturn True\napp = QApplication(sys.argv)\nif not createConnection():\nsys.exit(1)\nwin = Contacts()\nwin.show()\nsys.exit(app.exec_())\n</code></pre> <p>Per editar les dades d'una cel\u00b7la de la taula, podeu fer doble clic a la cel\u00b7la. A la cel\u00b7la es mostrar\u00e0 un component de delegat convenient, que us permetr\u00e0 editar el contingut. A continuaci\u00f3, podeu pr\u00e9mer Enter per guardar els canvis.</p> <p>\u00das de Model-View</p> <p>La capacitat de gestionar i guardar autom\u00e0ticament els canvis a les dades \u00e9s un dels avantatges m\u00e9s importants de l'\u00fas de les classes Model-View de PySide. L'arquitectura Model-View millorar\u00e0 la nostra productivitat i reduir\u00e0 els errors que poden apar\u00e8ixer quan hem d'escriure el codi de manipulaci\u00f3 de dades per nosaltres mateixos.</p>"},{"location":"unitats/7-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-components-amb-models-predefinits","title":"\u00das de components amb models predefinits","text":"<p>\u00c9s molt senzill utilitzar un model predefinit per a mostrar i editar informaci\u00f3. Els models predefinits que podem utilitzar a Qt s\u00f3n:</p> <ul> <li>QSqlTableModel (el que hem utilitzat a l'exemple)</li> <li>QStringListModel</li> <li>QStandardItemModel</li> <li>QFileSystemModel</li> <li>QSqlQueryModel</li> <li>QSqlRelationalTableModel</li> <li>QSortFilterProxyModel</li> </ul> <p>Veiem un exemple amb QSqlTableModel, que \u00e9s dels m\u00e9s utilitzats en aplicacions:</p> Python<pre><code>import sys\nimport os\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtSql import QSqlDatabase, QSqlTableModel\nfrom PySide6.QtWidgets import (\nQApplication,\nQMainWindow,\nQMessageBox,\nQTableView,\n)\nclass Contacts(QMainWindow):\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nself.setWindowTitle(\"QTableView Example\")\nself.resize(415, 200)\n# Set up the model\nself.model = QSqlTableModel(self)\nself.model.setTable(\"contacts\")\nself.model.setEditStrategy(QSqlTableModel.OnFieldChange)\nself.model.setHeaderData(0, Qt.Horizontal, \"ID\")\nself.model.setHeaderData(1, Qt.Horizontal, \"Nom\")\nself.model.setHeaderData(2, Qt.Horizontal, \"Treball\")\nself.model.setHeaderData(3, Qt.Horizontal, \"Correu\")\nself.model.select()\n# Set up the view\nself.view = QTableView()\nself.view.setModel(self.model)\nself.view.resizeColumnsToContents()\nself.setCentralWidget(self.view)\ndef createConnection():\ncon = QSqlDatabase.addDatabase(\"QSQLITE\")\ncon.setDatabaseName(os.path.join(os.path.dirname(__file__),\n\"contacts.sqlite\"))\nif not con.open():\nQMessageBox.critical(\nNone,\n\"QTableView Example - Error!\",\n\"Database Error: %s\" % con.lastError().databaseText(),\n)\nreturn False\nreturn True\napp = QApplication(sys.argv)\nif not createConnection():\nsys.exit(1)\nwin = Contacts()\nwin.show()\nsys.exit(app.exec_())\n</code></pre> <p>Models predefinits</p> <p>Sempre que siga possible, utilitzarem models predefinits, ja que ens estalviaran molta feina i ens evitaran errors de programaci\u00f3. Sols si amb la funcionalitat d'aquests no \u00e9s suficient, implementarem models abstractes.</p> <p>Models abstractes</p> <p>L'\u00fas de models abstractes queda fora de l'abasts d'este curs, per\u00f2 podeu trobar exemples al seg\u00fcent enlla\u00e7</p>"},{"location":"unitats/7-ModelView/teoria/4-Visualitzacio%20i%20edicio%20de%20dades/#us-de-delegats","title":"\u00das de delegats","text":"<p>Quan la informaci\u00f3 que volem editar no \u00e9s un text, podem fer \u00fas de delegats per modificar-la. Per exemple, un SpinBox per a editar un enter, un ComboBox per a limitar les opcions d'un text, un DateEdit per a editar un data...</p> <p>Al seg\u00fcent exemple mostrem com utilitzar un SpinBox com a delegat en totes les cel\u00b7les:</p> Python<pre><code>import sys\nfrom PySide6.QtWidgets import (QApplication, QStyledItemDelegate, QSpinBox,\nQTableView)\nfrom PySide6.QtGui import QStandardItemModel, Qt\nfrom PySide6.QtCore import QModelIndex\nclass SpinBoxDelegate(QStyledItemDelegate):\n\"\"\"A delegate that allows the user to change integer values from the model\n       using a spin box widget. \"\"\"\ndef __init__(self, parent=None):\nsuper().__init__(parent)\ndef createEditor(self, parent, option, index):\neditor = QSpinBox(parent)\neditor.setFrame(False)\neditor.setMinimum(0)\neditor.setMaximum(100)\nreturn editor\ndef setEditorData(self, editor, index):\nvalue = index.model().data(index, Qt.EditRole)\neditor.setValue(value)\ndef setModelData(self, editor, model, index):\neditor.interpretText()\nvalue = editor.value()\nmodel.setData(index, value, Qt.EditRole)\ndef updateEditorGeometry(self, editor, option, index):\neditor.setGeometry(option.rect)\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nmodel = QStandardItemModel(4, 2)\ntableView = QTableView()\ntableView.setModel(model)\ndelegate = SpinBoxDelegate()\ntableView.setItemDelegate(delegate)\ntableView.horizontalHeader().setStretchLastSection(True)\nfor row in range(4):\nfor column in range(2):\nindex = model.index(row, column, QModelIndex())\nvalue = (row + 1) * (column + 1)\nmodel.setData(index, value)\ntableView.setWindowTitle(\"Spin Box Delegate\")\ntableView.show()\nsys.exit(app.exec())\n</code></pre> <p>Delegats per a una sola columna</p> <p>Per assignar delegat a una sola columna podem utilitzar el m\u00e8tode setDelegateForColumn().</p>"},{"location":"unitats/8-Components-Designer/enlla%C3%A7os/enlla%C3%A7os/","title":"Unitat 4 - Components d'usuari","text":""},{"location":"unitats/8-Components-Designer/enlla%C3%A7os/enlla%C3%A7os/#unitat-4-components-dusuari","title":"Unitat 4 - Components d'usuari","text":""},{"location":"unitats/8-Components-Designer/enlla%C3%A7os/enlla%C3%A7os/#enllacos-dinteres","title":"Enlla\u00e7os d'inter\u00e9s","text":"<ol> <li>Repositori de llibreries Qt Inqlude</li> <li>Col\u00b7lecci\u00f3 de widgets de Qt Marketplace</li> <li>Col\u00b7lecci\u00f3 de widgets Qt a la KDE Store</li> <li>Documentaci\u00f3 de PySide6 amb exemples de com personalitzar Widgets mitjan\u00e7ant fulls d'estil</li> <li>Documentaci\u00f3 PySide6 - QElapsedTimer Class</li> <li>Documentaci\u00f3 PySide6 - QTimer Class</li> <li>Documentaci\u00f3n PySide6 - QTime Class</li> <li>Article de com gestionar les variables d'entorn en Windows i Linux</li> <li>Variables de entorno en Mac OS X</li> <li>PySide6 - Exemples de widgets</li> </ol>"},{"location":"unitats/8-Components-Designer/tasques/1-Activitats/","title":"1 Activitats","text":""},{"location":"unitats/8-Components-Designer/tasques/1-Activitats/#activitat-1","title":"Activitat 1","text":""},{"location":"unitats/8-Components-Designer/tasques/2-Pr%C3%A0ctiques/","title":"2 Pr\u00e0ctiques","text":""},{"location":"unitats/8-Components-Designer/tasques/2-Pr%C3%A0ctiques/#practica-1","title":"Pr\u00e0ctica 1","text":""},{"location":"unitats/8-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/","title":"1 Alternatives en la creaci\u00f3 de components","text":""},{"location":"unitats/8-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#1-alternatives-en-la-creacio-de-nous-components","title":"1. Alternatives en la creaci\u00f3 de nous components","text":"<p>Totes les tecnologies destinades a la creaci\u00f3 d'interf\u00edcies d'usuari inclouen un conjunt de components per utilitzar als formularis dissenyats, format pels controls m\u00e9s habituals a les aplicacions GUI. Tot i aix\u00f2, en algunes ocasions la funcionalitat de la nostra aplicaci\u00f3 pot requerir l'\u00fas d'un component que la nostra tecnologia d'interf\u00edcie no inclou.</p> <p>Per incorporar nous components a les nostres aplicacions tenim dues alternatives:</p> <ul> <li> <p>Utilitzar components desenvolupats per tercers (empreses o desenvolupadors independents). \u00c9s important con\u00e8ixer la llic\u00e8ncia que s'aplica al component, sobretot si es tracta d'una llic\u00e8ncia comercial o lliure.</p> </li> <li> <p>Desenvolupar el component que necessitem per utilitzar-lo a la nostra aplicaci\u00f3. La majoria de les tecnologies d'interf\u00edcie d'usuari incorporen mecanismes que permeten als desenvolupadors crear components nous, com veurem al llarg d'aquesta unitat. </p> </li> </ul> <p>!!!warning 'IMPORTANT'     En el cas particular del framework Qt, la varietat de components inclosos \u00e9s molt \u00e0mplia, i \u00e9s una de les raons per les quals l'oferta de controls desenvolupats per tercers no \u00e9s tan abundant com en altres tecnologies. Als enlla\u00e7os de la unitat s'inclouen alguns llocs web on aconseguir controls de tercers per Qt.</p>"},{"location":"unitats/8-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#11-personalitzar-laparenca-del-component","title":"1.1 Personalitzar l'aparen\u00e7a del component","text":"<p>De vegades, la funcionalitat del nou component que necessitem coincideix completament amb la d'un control existent, i simplement un canvi en la seva aparen\u00e7a visual pot ser suficient. Moltes de les tecnologies d'interf\u00edcie existents permeten modificar completament l'aparen\u00e7a visual d'un component, de manera que, encara que no canvia la l\u00f2gica, l'usuari el percebr\u00e0 com un control diferent.</p> <p>EXEMPLE</p> <p>Avui dia \u00e9s habitual trobar a les interf\u00edcies que utilitzem (sobretot a les destinades a dispositius m\u00f2bils) un control de tipus interruptor o switch, que ens permet alternar entre dos estats. La funcionalitat d'aquest control \u00e9s realment la mateixa que una casella de verificaci\u00f3, per la qual cosa podr\u00edem canviar la seva aparen\u00e7a perqu\u00e8 es comporti visualment com un interruptor.</p> <p></p>"},{"location":"unitats/8-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#12-derivar-dun-component-existent","title":"1.2 Derivar d'un component existent","text":"<p>Moltes vegades, la funcionalitat del nou component que volem crear no coincideix exactament amb la de cap component existent, per\u00f2 \u00e9s molt similar. En aquests casos, la soluci\u00f3 sol consistir a crear un component derivat del que ja n'hi ha, realitzant les modificacions pertinents (que normalment consistiran a afegir propietats, senyals i ranures).</p> <p>No sempre necessitarem derivar directament d'un component existent, sin\u00f3 que de vegades ser\u00e0 m\u00e9s convenient basar-se en alguna classe superior a la cadena d'her\u00e8ncia del component, que aporti la funcionalitat base que necessitem per al nostre nou control.</p> <p>EXEMPLE</p> <p>Qt disposa d'algunes classes abstractes que serveixen de base per crear alguns components. Per exemple, de la classe QAbstractButton deriven els diferents tipus de botons (QCheckBox, QPushButton, QRadioButton i QToolButton). Si ens plantegem dissenyar un bot\u00f3 personalitzat, podr\u00edem optar per partir directament de la classe abstracta, o d'alguna de les classes derivades. </p>"},{"location":"unitats/8-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#13-crear-un-component-completament-nou","title":"1.3 Crear un component completament nou","text":"<p>Si la funcionalitat del nostre nou component no est\u00e0 relacionada amb la de cap altre component existent, haurem de crear-lo des de zero. En la majoria dels casos, aix\u00f2 implica heretar una classe base antecessora de tots els components (en el cas de Qt, seria la classe QWidget). </p> <p>En el cas de crear un component totalment nou, haurem d'alguna manera definir-ne la geometria i l'aparen\u00e7a visual. A Qt disposem per a aix\u00f2 de la classe QPainter, amb una gran quantitat de m\u00e8todes per poder dibuixar el nostre control.  </p>"},{"location":"unitats/8-Components-Designer/teoria/1-Alternatives%20en%20la%20creaci%C3%B3%20de%20components/#14-afegir-diversos-components-existents","title":"1.4 Afegir diversos components existents","text":"<p>\u00c9s habitual trobar una \u00faltima opci\u00f3 per crear nous components, consistent a afegir diversos components existents (o fins i tot combinar components inclosos al framework amb altres creats per nosaltres o per tercers). </p> <p>EXEMPLE</p> <p>Un possible exemple de component agregat seria un quadre de text amb indicador del nombre de car\u00e0cters escrits. En aquest cas, haur\u00edem d'afegir un quadre de text on l'usuari escriuria i una etiqueta per indicar el nombre de car\u00e0cters.</p>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/","title":"2 Nous components","text":""},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#2-creacio-de-nous-components-per-codi","title":"2. Creaci\u00f3 de nous components per codi.","text":"<p>Els components s\u00f3n utilitzats, entre altres coses, per amagar la complexitat del programari en parts m\u00e9s manejables. Cada component amaga la seva complexitat darrere d'una interf\u00edcie formada per les seves propietats i m\u00e8todes a qu\u00e8 es t\u00e9 acc\u00e9s. Poden introduir-se i eliminar-se, fins i tot ser intercanviats com a part dun tot. </p> <p>Aix\u00f2 redueix la complexitat del desenvolupament programari i millora el seu manteniment, permetent que el mateix codi pugui ser reutilitzat a diferents llocs. El resultat \u00e9s un bloc de codi encapsulat en una classe independent que passa a formar part del banc de peces disponibles per formar part de desenvolupaments m\u00e9s complexos.</p>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#21-components-definits-per-lusuari","title":"2.1 Components definits per l'usuari","text":"<p>Per comen\u00e7ar a desenvolupar un component propi, el m\u00e9s f\u00e0cil \u00e9s buscar un component des del qual partir, de manera que se n'hereten les propietats i m\u00e8todes i aix\u00ed poder utilitzar-los en el component que volem crear. Per exemple, si voleu un di\u00e0leg customitzat, podem heretar de QDialog, si volem un component bot\u00f3 amb alguna funcionalitat customitzada, podem heretar de QButton. En cas que el nostre component no guardi relaci\u00f3 estreta amb altres components, el m\u00e9s adequat ser\u00e0 heretar de QWidget directament, que \u00e9s la classe base des de la qual hereta la resta de Widgtes.</p> <p>A m\u00e9s, podem utilitzar classes privades als nostres components que ens ajudin a produir un codi m\u00e9s organitzat i mantenible.</p>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#22-exemple-component-cronometre","title":"2.2 Exemple: component cron\u00f2metre","text":"<p>Il\u00b7lustrarem tot aix\u00f2 amb un exemple que anirem construint pas a pas.</p> <p>En alguna de les nostres aplicacions ens pot fer falta un component visual que serveixi per mesurar el temps transcorregut, per exemple podria servir per mesurar el temps que portem per fer una tasca de classe, per mesurar el transcurs d'una activitat esportiva, etc. Crearem un component que posteriorment podem afegir a diferents aplicacions amb interf\u00edcie gr\u00e0fica d'usuari, sense necessitat de tornar-lo a crear a cadascuna, sin\u00f3 que reutilitzarem el codi generat per a la seva creaci\u00f3.</p>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#221-eleccio-de-lobjecte-base","title":"2.2.1 Elecci\u00f3 de l'objecte base","text":"<p>Si pensem en quin component utilitzar com a base, veiem que no hi ha cap component al qual puguem afegir funcionalitat de forma r\u00e0pida i que ens serveixi per a la nostra finalitat, aix\u00ed que partim de la classe base QWidget i en farem servir d'altres ginys per construir el nostre component.</p>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#221-classe-cronometre-sense-interficie","title":"2.2.1 Classe cron\u00f2metre (sense interf\u00edcie)","text":"<p>Comencem definint una classe que ens servir\u00e0 per controlar de manera interna el temps transcorregut i el temps transcorregut entre pauses, ja que construirem un cron\u00f2metre amb la possibilitat de pausa. D'aquesta classe obtindrem, de tant en tant, el temps transcorregut des que vam posar en marxa el cron\u00f2metre i la difer\u00e8ncia entre el transcorregut i el pausat en cas d'haver utilitzat alguna pausa. </p> <p>La classe utilitzada a Qt per controlar el temps transcorregut \u00e9s QElapsedTimer. La idea \u00e9s fer servir el comptador de temps transcorregut (__temps_transcorregut) en posar en marxa el comptador. Si mentre estigueu en marxa, volem pausar el compte, fem \u00fas d'un altre comptador (__temps_pausat) per mesurar el temps que el comptador ha estat pausat, aix\u00ed, mostrarem la difer\u00e8ncia entre tots dos per mostrar el temps correcte del cron\u00f2metre. Per controlar tot aix\u00f2 definirem la seva interf\u00edcie a la secci\u00f3 seg\u00fcent.</p> Python<pre><code>from PySide6.QtCore import QTime, QElapsedTimer\nclass Cronometre():\ndef __init__(self):\nself.__temps_transcorregut = QElapsedTimer()\nself.__temps_pausa = QElapsedTimer()\nself.__acumulador = 0\ndef reiniciar(self):\nself.__temps_transcorregut.restart()\nself.__acumulador = 0\ndef getTime(self):\nreturn QTime(0, 0).addMSecs(self.__temps_transcorregut.elapsed() - self.__acumulador)\ndef pausar(self):\nself.__temps_pausa.restart()\ndef continuar(self):\nself.__acumulador = self.__acumulador + self.__tiempo_pausa.elapsed()\n</code></pre> <p>Fixa't que hem definit totes les propietats de l'anterior classe com a privades, ja que van precedides de doble gui\u00f3 baix. De manera que des de fora de la classe no s'hi pot accedir, nom\u00e9s podem interactuar amb el control del temps a trav\u00e9s dels seus m\u00e8todes reiniciar, pausar i continuar. Amb obtenirTemps, obtindr\u00edem el temps de marxa del cron\u00f2metre, independentment de si ha estat pausat o no.</p>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#222-definicio-de-la-interficie-del-component","title":"2.2.2 Definici\u00f3 de la interf\u00edcie del component","text":"<p>Un cop tenim definida la classe que controla el nostre temps, \u00e9s moment de definir la interf\u00edcie del nostre component que en far\u00e0 \u00fas. Per mostrar el temps transcorregut podem fer \u00fas d\u201funa etiqueta (QLabel) amb el format hhss, on hh s\u00f3n les hores transcorregudes, mm els minuts i ss els segons. Es podria reescriure el codi perqu\u00e8 el cron\u00f2metre tingu\u00e9s la possibilitat d'explicar els mil\u00b7lisegons, per\u00f2 per a l'exemple que estem desenvolupant el deixarem en segons.</p> <p>Definirem tamb\u00e9 un parell de botons (QPushButton), un per iniciar/parar i reiniciar el compte i un altre per pausar/continuar. A m\u00e9s, el nostre cron\u00f2metre tindr\u00e0 la possibilitat d'avisar mitjan\u00e7ant l'emissi\u00f3 d'un senyal definit per codi que s'ha arribat al temps marcat a l'av\u00eds. Aquest senyal ser\u00e0 em\u00e8s quan el temps d'av\u00eds i el temps del cron\u00f2metre coincideixin, sempre que el checkbox estigui activat. Per introduir el temps fem \u00fas d'un QTimeEdit. La interf\u00edcie quedaria de la manera seg\u00fcent:</p> <p></p> <p>El codi complet del component \u00e9s el seg\u00fcent. </p> Python<pre><code>from PySide6.QtWidgets import (\nQLabel, QWidget, QPushButton, QVBoxLayout, QCheckBox,\nQTimeEdit, QHBoxLayout\n)\nfrom PySide6.QtCore import (\nQTime, QTimer, Slot, QElapsedTimer, QSize, Qt, Signal\n)\nfrom PySide6.QtGui import QIcon\nimport recursos_cronometre\nclass Cronometro():\ndef __init__(self):\nself.__tiempo_transcurrido = QElapsedTimer()\nself.__tiempo_pausa = QElapsedTimer()\nself.__acumulador = 0\ndef iniciar(self):\nself.__tiempo_transcurrido.restart()\nself.__acumulador = 0\ndef obtenerTiempo(self):\nreturn QTime(0, 0).addMSecs(\nself.__tiempo_transcurrido.elapsed() - self.__acumulador)\ndef pausar(self):\nself.__tiempo_pausa.restart()\ndef continuar(self):\nself.__acumulador = self.__acumulador + self.__tiempo_pausa.elapsed()\nclass CronometroUI(QWidget):\nmensaje = Signal(str)\nCRONOMETRO_RESET = 0\nCRONOMETRO_INICIADO = 1\nCRONOMETRO_PAUSADO = 2\nCRONOMETRO_PARADO = 3\nLISTA_ICONOS = {\n'play': ':/icons/play.png',\n'pause': ':/icons/pause.png',\n'stop': ':/icons/stop.png',\n'resume': ':/icons/resume.png',\n'restart': ':/icons/restart.png'\n}\ndef __init__(self, parent=None):\nsuper().__init__(parent)\nlayout = QVBoxLayout()\nself.__estado = self.CRONOMETRO_RESET\nself.setLayout(layout)\nself.__cronometro = Cronometro()\nself.__tiempo = QTimer(self)\nself.__tiempo_aviso = QTime(0, 0, 0, 0)\nself.etiqueta = QLabel(QTime(0, 0).toString(\"hh:mm:ss\"), self)\nself.etiqueta.setMinimumHeight(50)\nself.etiqueta.setAlignment(Qt.AlignCenter)\nself.etiqueta.setStyleSheet(\n\"background-color: white;\"\n\"border: 2px solid black;\"\n\"font-size: 25px\"\n)\nself.boton_inicio = QPushButton(\nQIcon(self.LISTA_ICONOS['play']), \"\", self)\nself.boton_inicio.setIconSize(QSize(50, 50))\n# self.boton_inicio.setCheckable(True)\nself.boton_pausa = QPushButton(\nQIcon(self.LISTA_ICONOS['pause']), \"\", self)\nself.boton_pausa.setIconSize(QSize(50, 50))\n# self.boton_inicio.setCheckable(True)\nself.boton_pausa.setDisabled(True)\nself.aviso = QCheckBox(\"Avisar cuando llegue a ...\", self)\nself.editor_tiempo_aviso = QTimeEdit(QTime(0, 0), self)\nself.editor_tiempo_aviso.setDisplayFormat(\"hh:mm:ss\")\nlayout_horizontal = QHBoxLayout()\nlayout_horizontal.addWidget(self.aviso)\nlayout_horizontal.addWidget(self.editor_tiempo_aviso)\nlayout.addLayout(layout_horizontal)\nlayout.addWidget(self.etiqueta)\nlayout.addWidget(self.boton_inicio)\nlayout.addWidget(self.boton_pausa)\nself.__tiempo.timeout.connect(self.actualizar_tiempo)\nself.boton_inicio.clicked.connect(self.iniciar_parar)\nself.boton_pausa.clicked.connect(self.pausar_continuar)\nself.editor_tiempo_aviso.timeChanged.connect(\nself.actualizar_tiempo_aviso)\n@Slot()\ndef actualizar_tiempo(self):\ncrono_actual = self.__cronometro.obtenerTiempo()\nself.etiqueta.setText(\ncrono_actual.toString(\"hh:mm:ss\"))\nself.etiqueta.repaint()  # Actualiza el valor antes de lanzar aviso\nif self.aviso.isChecked():\nif -200 &lt; self.__tiempo_aviso.msecsTo(crono_actual) &lt; 200:\nself.mensaje.emit(\"Tiempo l\u00edmite alcanzado\")\n@Slot()\ndef iniciar_parar(self):\nif self.__estado == self.CRONOMETRO_RESET:  # Iniciar\nself.__cronometro.iniciar()\nself.__tiempo.start(1000)\nself.__estado = self.CRONOMETRO_INICIADO\nself.boton_pausa.setDisabled(False)\nself.boton_inicio.setIcon(QIcon(self.LISTA_ICONOS['stop']))\nelif self.__estado == self.CRONOMETRO_PARADO:  # Reiniciar\nself.__estado = self.CRONOMETRO_RESET\nself.etiqueta.setText(\nQTime(0, 0).toString(\"hh:mm:ss\"))\nself.boton_inicio.setIcon(QIcon(self.LISTA_ICONOS['play']))\nelse:  # Parar\nself.__tiempo.stop()\nself.__estado = self.CRONOMETRO_PARADO\nself.boton_inicio.setIcon(QIcon(self.LISTA_ICONOS['restart']))\nself.boton_pausa.setDisabled(True)\n@Slot()\ndef pausar_continuar(self):\nif self.__estado == self.CRONOMETRO_INICIADO:  # Pausar\nself.__cronometro.pausar()\nself.__tiempo.stop()\nself.__estado = self.CRONOMETRO_PAUSADO\nself.boton_pausa.setIcon(QIcon(self.LISTA_ICONOS['resume']))\nself.boton_inicio.setDisabled(True)\nelse:  # Continuar\nself.__cronometro.continuar()\nself.__tiempo.start()\nself.__estado = self.CRONOMETRO_INICIADO\nself.boton_pausa.setIcon(QIcon(self.LISTA_ICONOS['pause']))\nself.boton_inicio.setDisabled(False)\n@Slot()\ndef actualizar_tiempo_aviso(self):\nself.__tiempo_aviso = self.editor_tiempo_aviso.time()\nif __name__ == \"__main__\":\nfrom PySide6.QtWidgets import QApplication\napp = QApplication([])\ncrono = CronometroUI()\ncrono.show()\napp.exec()\n</code></pre> <p>\u00das de recursos</p> <p>Si et fixes, a la l\u00ednia 42, s'ha definit un diccionari amb les rutes a les icones. Per a definir les rutes s'ha utilitzat els dos punt \":\" per a fer refer\u00e8ncia als recursos. No es tracta d'una ruta al disc dur, sin\u00f3 que s'indica la ruta al recurs. Aquesta s'indica a un arxiu de recursos \".qrc\"</p> <p>Mira la relaci\u00f3 entre ':/icons/play.png' i el seg\u00fcent arxiu .qrc </p>XML<pre><code>&lt;!DOCTYPE RCC&gt;\n&lt;RCC version=\"1.0\"&gt;\n&lt;qresource prefix=\"icons\"&gt;\n&lt;file alias=\"play.png\"&gt;images/play.png&lt;/file&gt;\n&lt;file alias=\"pause.png\"&gt;images/pause.png&lt;/file&gt;\n&lt;file alias=\"resume.png\"&gt;images/resume.png&lt;/file&gt;\n&lt;file alias=\"stop.png\"&gt;images/stop.png&lt;/file&gt;\n&lt;file alias=\"restart.png\"&gt;images/restart.png&lt;/file&gt;\n&lt;/qresource&gt;\n&lt;/RCC&gt;\n</code></pre> <p>Per a indicar la ruta al recurs hem utilitzat el prefix i l'alias, mentre que el contingut de l'etiqueta xml indica la ruta on es troba la imatge al disc dur.</p> <p>Per a produir un arxiu .py de recursos, utilitzarem pyside6-rcc. Aix\u00ed, generarem l'arxiu recursos_cronometre.py amb la seg\u00fcent ordre:</p> Bash<pre><code>pyside6-rcc recursos_cronometre.qrc -o recursos_cronometre.py\n</code></pre>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#223-senyals-definits-per-lusuari","title":"2.2.3 Senyals definits per l'usuari","text":"<p>Com hem comentat anteriorment, farem servir l'emissi\u00f3 d'un senyal per avisar que el temps s'ha complert. Per aix\u00f2, nom\u00e9s cal definir un senyal en el nostre component i emetre'l per codi quan es donen les condicions que desitgem, ja sigui un esdeveniment de l'usuari o unes condicions que es compleixin.</p> <p>A la definici\u00f3 del senyal, es rep com a par\u00e0metre el tipus d'informaci\u00f3 que l'acompanyar\u00e0 quan s'emeti. En el punt en qu\u00e8 emetem el senyal, donarem valor a aquesta informaci\u00f3, definint-ne ja el valor. En aquest cas emetrem al costat del senyal, un missatge indicant que s'ha complert el temps, aix\u00ed que en la seva definici\u00f3 li passarem com a argument un str. Aquest senyal definit mitjan\u00e7ant codi, s'utilitzar\u00e0 igual que qualsevol altre senyal, \u00e9s a dir, el connectarem a un slot per executar la funcionalitat desitjada quan s'emeti. Mostrem aqu\u00ed els fragments que afecten la definici\u00f3 i emissi\u00f3 del senyal:</p> <p>Senyal mensaje</p> <p>De moment sols emetem el senyal, per\u00f2 s'executar\u00e0 res en emetre aquesta, ja que no li hem assignat un slot. Si incorporem este component a una aplicaci\u00f3, en podr\u00edem fer \u00fas.</p> Python<pre><code>from PySide6.QtCore import Signal\n...\nself.mensaje = Signal(str)\n...\nself.mensaje.emit(\u200b\u200b\"Temps l\u00edmit assolit\")\n</code></pre>"},{"location":"unitats/8-Components-Designer/teoria/2-Nous%20components/#224-logica-interna-del-component","title":"2.2.4 L\u00f2gica interna del component","text":"<p>Nom\u00e9s cal definir la l\u00f2gica interna del component. La idea b\u00e0sica \u00e9s, definim un QTimer, que \u00e9s la classe Qt utilitzada per implementar temporitzadors. S'usa connectant una ranura al seu senyal timeout, que ser\u00e0 emesa a intervals regulars cada x mil\u00b7lisegons. El nombre de mil\u00b7lisegons es rep com a argument a la seva funci\u00f3 start().  Veiem aqu\u00ed la part que fa refer\u00e8ncia al temporitzador en el nostre component:</p> Python<pre><code>from PySide6.QtCore import QTimer\n...\nself.__temps = QTimer(self)\nself.__tiempo.timeout.connect(self.actualitzar_temps)\n...\nself.__tiempo.start (1000)\n...\nself.__tiempo.stop()\n...\n</code></pre> <p>Al nostre component definim un QTimer privat, que no podr\u00e0 ser modificat des de fora del nostre component. Cada segon actualitzar\u00e0 el temps mostrat al display del component, ja que hem llan\u00e7at el QTimer amb el par\u00e0metre 1000.  En actualitzar el cron\u00f2metre tamb\u00e9 comprovar\u00e0 si heu d'emetre el senyal d'av\u00eds. En cas que la difer\u00e8ncia entre el temps del cron\u00f2metre i de l'av\u00eds sigui menor de 200 mil\u00b7lisegons, es llan\u00e7ar\u00e0 l'av\u00eds. S'ha de deixar un petit marge perqu\u00e8 es poden produir retards en els processos que s'estan executant a l'ordinador, i de no deixar aquest marge, la comparaci\u00f3 entre el temps actual i el del timeout pot ser massa gran i no llan\u00e7ar l'av\u00eds, sobretot en ordinadors lents o amb molts processos en execuci\u00f3.</p> Python<pre><code>self.__temps = QTimer(self)\nself.__tiempo.timeout.connect(self.actualitzar_temps)\n@Slot()\ndef actualitzar_temps(self):\ncrono_actual = self.__cronometro.obtenerTemps()\nself.etiqueta.setText(\ncrono_actual.toString(\"hh:mm:ss\"))\nself.etiqueta.repaint() \n# Perqu\u00e8 actualitzeu el valor abans de llan\u00e7ar l'av\u00eds\nif self.aviso.isChecked():\nif -200 &lt; self.__temps_aviso.msecsTo(crono_actual) &lt; 200:\nself.mensaje.emit(\u200b\u200b\"Temps l\u00edmit assolit\")\n</code></pre> <p>Finalment, necessitem representar l'estat intern del cron\u00f2metre per implementar les funcionalitats de parar/iniciar i reiniciar per una banda i les de pausar/continuar per una altra. Per aix\u00f2 definim quatre estats:</p> Text Only<pre><code>    CRONOMETRO_RESET = 0 # Estat inicial\n    CRONOMETRO_INICIADO = 1\n    CRONOMETRO_PAUSADO = 2\n    CRONOMETRO_PARADO = 3\n</code></pre> <p>De l'estat inicial passar\u00e0 a iniciat prement en iniciar (play). Des d'aquest es podr\u00e0 parar (stop) o pausar (pause), passant als estats aturat i pausat respectivament. En estat pausat podr\u00e0 iniciar-se novament amb el continuar (continue) i passar\u00e0 a iniciat. Des de l'estat aturat, si feu clic a reiniciar (restart) tornareu a l'estat inicial. En el diagrama d'estats seg\u00fcent queda reflectit l'anterior comportament.</p> <p></p> <p>Amb aix\u00f2 tenim complet el codi del nostre component, disponible a l'arxiu DI_U04_A02_01.py (recorda que fa \u00fas del fitxer de recursos DI_U04_A02_03.py). Per\u00f2 un component per si mateix no \u00e9s \u00fatil, ja que no podem executar-lo, ja que nom\u00e9s cont\u00e9 la definici\u00f3 i la implementaci\u00f3 d'una classe, per\u00f2 cap inst\u00e0ncia de la mateixa. Per aix\u00f2, veurem en el seg\u00fcent apartat, com integrar-lo en una aplicaci\u00f3.</p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/","title":"Utilitzaci\u00f3 dels nous components en aplicacions.","text":""},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#utilitzacio-dels-nous-components-en-aplicacions","title":"Utilitzaci\u00f3 dels nous components en aplicacions.","text":"<p>La creaci\u00f3 d'un nou component ens afegeix una nova possibilitat al nostre banc de peces utilitzables. Aquests nous components, ara, poden ser utilitzats en diferents aplicacions per crear desenvolupaments m\u00e9s complexos sense haver de reescriure el codi. Aix\u00ed tenim la possibilitat de reutilitzar codi escrit per nosaltres mateixos o per tercers i utilitzar-lo a les nostres aplicacions. </p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#importacio-de-components","title":"Importaci\u00f3 de components","text":"<p>Per fer servir els nostres components, el primer pas sempre ser\u00e0 incorporar el codi dels nostres components a una aplicaci\u00f3 amb la instrucci\u00f3 import de python. A partir d'aquest moment, les classes definides en aquests fitxers de codi passaran a estar disponibles a la nostra aplicaci\u00f3.</p> <p>Estudiem una mica el sistema d'importaci\u00f3 de m\u00f2duls i paquets de python abans de fer servir els nostres components.</p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#moduls","title":"M\u00f2duls","text":"<p>Un m\u00f2dul de python es defineix segons el glossari de python.org com:</p> <p>Objecte de python</p> <p>Un objecte serveix com a unitat organitzativa del codi de Python. Tenen un espai de noms que cont\u00e9 objectes Python arbitraris. Es carreguen mitjan\u00e7ant el proc\u00e9s d'importaci\u00f3.</p> <p>A la pr\u00e0ctica, un m\u00f2dul python \u00e9s un fitxer .py amb codi.</p> <p>Per exemple, imaginem que tenim un fitxer constants.py amb el codi PI=3.14159 al seu interior. Aleshores usar\u00edem el codi seg\u00fcent, situat a la mateixa ruta que el fitxer de constants, per imprimir el valor de la constant per consola:</p> Python<pre><code>import constants\nprint(constants.PI)\n</code></pre>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#paquets","title":"Paquets","text":"<p>Un paquet de python es defineix segons el glossari de python .org com:</p> <p>\u201cUn m\u00f2dul de Python que pot contenir subm\u00f2duls o, recursivament, subpaquets. T\u00e8cnicament, un paquet \u00e9s un m\u00f2dul de Python amb un atribut path.\u201d</p> <p>Fixa't que un paquet no ha de ser un m\u00f2dul, aix\u00ed que no importa si el que estem important est\u00e0 estructurat com un m\u00f2dul o com un paquet. Per a un usuari, aix\u00f2 \u00e9s indiferent, ja que la importaci\u00f3 funciona de manera an\u00e0loga.</p> <p>A la pr\u00e0ctica, un paquet \u00e9s una carpeta que cont\u00e9 fitxers de python i altres carpetes. Per crear un paquet, cal crear un directori i al seu interior, un fitxer anomenat init.py. Aquest fitxer cont\u00e9 el codi quan es tracta com un m\u00f2dul. Es pot deixar buit en cas que vulguem organitzar el nostre codi en una estructura de subcarpetes. Tamb\u00e9 podeu contenir imports impl\u00edcits.</p> <p>Vegem un exemple:</p> Text Only<pre><code>app.py\n\nidiomes/\n\n\u251c\u2500\u2500 africa/\n\n\u2502   \u251c\u2500\u2500 __init__.py \n\n\u2502   \u2514\u2500\u2500 suahilli.py\n\n\u251c\u2500\u2500\u2500 europa/\n\n\u2502   \u251c\u2500\u2500 __init__.py\n\n\u251c\u2500\u2500\u2500 espa\u00f1ol.py\n\n\u251c\u2500\u2500 ingles.py\n\n\u2514\u2500\u2500 __init__.py -&gt; buit\n</code></pre> Arxiu Contingut idioma/init.py (buit) idiomes/africa/init.py (buit) idiomes/africa/suahilli.py salutaci\u00f3 = 'Salamu, Dunia!' idiomes/europa/init.py from . import espanyol idiomes/europa/espa\u00f1ol.py salutaci\u00f3 = 'Hola m\u00f3n!' idiomes/europa/ingles.py salutaci\u00f3 = 'Hello world!' <p>Utilitzarem aquest paquet al fitxer app.py. El codi quedaria com segueix:</p> Python<pre><code>from idiomes.africa import suahili\nprint(suahili.salut)\nfrom idiomes import europa\nprint(europa.espanyol.salut)\nimport idiomes.europa.ingles as angl\u00e8s\nprint(angles.salut)\n</code></pre> <p>Fixeu-vos que en el primer cas, per utilitzar la salutaci\u00f3 a suahilli, hem de fer l'import expl\u00edcitament per poder-lo fer servir. En el segon cas, ja que tenim l'import en idiomes/europa/init.py, nom\u00e9s cal importar el paquet europa per poder fer servir la salutaci\u00f3 en espanyol. En el darrer cas, necessitem importar el m\u00f2dul ingles.py per poder fer servir la salutaci\u00f3 en aquest idioma.</p> <p>Si executem el codi, obtenim el resultat seg\u00fcent per consola:</p> Bash Session<pre><code>Salamu, Dunia!\nHola m\u00f3n!\nHello world!\n</code></pre> <p>Nota</p> <p>Aquesta forma d'estructurar i usar els paquets i m\u00f2duls, pot servir-vos per mantenir el codi dels vostres components organitzats de forma l\u00f2gica i c\u00f2moda per utilitzar-lo en el desenvolupament de projectes.</p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#us-de-components-a-laplicacio-principal","title":"\u00das de components a l'aplicaci\u00f3 principal","text":"<p>Un cop importat el component a la nostra aplicaci\u00f3, procedim a utilitzar-lo com qualsevol altre component de la llibreria PySide6. El primer pas ser\u00e0 crear les inst\u00e0ncies que en necessitem, per posteriorment actuar sobre l'objecte. Tindrem disponibles totes les propietats i els m\u00e8todes p\u00fablics que hagi heretat de la seva classe base, m\u00e9s les propietats i m\u00e8todes que us haguem definit en la seva implementaci\u00f3.</p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#exemple-cronometre","title":"Exemple cron\u00f2metre","text":"<p>Continuant amb l'exemple del cron\u00f2metre, incorporarem el nostre component a una aplicaci\u00f3.</p> <p>Com hem indicat, el primer pas consistir\u00e0 a importar el nostre component:</p> Python<pre><code>from cronoimetre import CronometroUI\n</code></pre> <p>A m\u00e9s necessitem importar tamb\u00e9 el nostre arxiu de recursos compilat, ja que si et fixes a l'arxiu recursos_a03.qrc, veureu que hem definit un recurs cronometro.png per carregar la nostra icona d'aplicaci\u00f3.</p> Python<pre><code>import recursos_a03.py \n</code></pre> <p>Amb els m\u00f2duls necessaris incorporats al nostre codi, utilitzarem el nostre component com ho far\u00edem amb qualsevol altre component de la PySide6. En aquesta ocasi\u00f3 crearem una aplicaci\u00f3 que estigui sempre al system tray o safata del sistema. Anem a veure el codi per aconseguir aquest prop\u00f2sit.</p> <p>Primer creem l'aplicaci\u00f3 i configurem que no es tanque en tancar l'\u00faltima finestra (perqu\u00e8 es mantinga a la safata del sistema encara que tanquem la finestra) i assignem una icona.</p> Python<pre><code>    app = QApplication([])\napp.setQuitOnLastWindowClosed(False)\napp.setWindowIcon(QIcon(\":/icons/cronometro.png\"))\n</code></pre> <p>Assignem una icona a la safata del sistema i connectem el senyal activated perqu\u00e8 ens mostri/oculti la finestra d'execuci\u00f3 de l'aplicaci\u00f3:</p> Python<pre><code>    icon = QIcon(QIcon(\":/icons/cronometro.png\"))\ntray = QSystemTrayIcon()\ntray.setIcon(icon)\ntray.setVisible(True)\ntray.activated.connect(mostrar_ocultar)\n</code></pre> <p>Seguidament inst\u00e0nciem al component i li assignem un t\u00edtol. Tamb\u00e9 configurem que sempre siga visible, per quan fem clic a la icona de l'aplicaci\u00f3 a la safata del sistema ens mostre l'aplicaci\u00f3.</p> Python<pre><code>    cronometro.setWindowTitle(\"Cron\u00f2metre PySide6\")\ncronometro.setWindowFlag(Qt.WindowStaysOnTopHint)\n</code></pre> <p>Finalment, ens queda afegir la possibilitat d'acabar l'aplicaci\u00f3 des de la safata del sistema. D'altra manera, nom\u00e9s seria possible acabar matant el proc\u00e9s, ja que en tancar la finestra l'aplicaci\u00f3 es mant\u00e9 en execuci\u00f3. </p> <p>Per fer-ho, creem una acci\u00f3 de sortir a la qual connectem l'slot quit de l'aplicaci\u00f3. Finalment, afegim aquesta acci\u00f3 a un men\u00fa contextual que apareixer\u00e0 en fer clic amb el bot\u00f3 secundari del ratol\u00ed sobre la icona de l'aplicaci\u00f3 a la safata del sistema.</p> Python<pre><code>    accion_sortir = QAction(\"Sortir\", cron\u00f2metre)\naccion_salir.triggered.connect(app.quit)\nmenu = QMenu()\nmenu.addAction(accion_sortir)\ntray.setContextMenu(menu)\n</code></pre>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#us-del-senyal-del-component","title":"\u00das del senyal del component","text":"<p>Quan creem el component, definirem un senyal que s'emetia sempre que el temps a qu\u00e8 arriba el cron\u00f2metre coincidira amb el temps d'av\u00eds i el checkbox d'avisar estigu\u00e9s marcat. Farem \u00fas daquest senyal.</p> <p>El disseny del component no defineix un comportament predeterminat a l'esdeveniment en complir-se el temps d'av\u00eds, sin\u00f3 que simplement s'emet el senyal acompanyat d'un missatge, aix\u00ed que ens dota de llibertat total per utilitzar aquest senyal i connectar-lo a l'slot que definim a la nostra aplicaci\u00f3.</p> <p>Nosaltres la farem servir per mostrar un QMessageBox amb el missatge que ens envia el senyal informant que el temps s'ha complert. No \u00e9s obligatori fer servir aquest missatge, podem utilitzar el nostre propi missatge si aix\u00ed ho desitgem.</p> Python<pre><code>cronometro.mensaje.connect(mostrar_aviso)\n@Slot()\ndef mostrar_aviso(missatge):\nQMessageBox.information(cronometre, \"Cron\u00f2metre PySide6\", missatge)\n</code></pre>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#us-de-decoradors-a-python","title":"\u00das de decoradors a Python","text":"<p>T'haur\u00e0s fixat en l'apartat anterior que fem servir la instrucci\u00f3 @Slot() abans de definir l'slot. Veurem en aquest apartat qu\u00e8 s\u00f3n els decoradors i com podem utilitzar-los als nostres components per no haver de reescriure el codi de les aplicacions si volem canviar la implementaci\u00f3 dels components.</p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#decoradors","title":"Decoradors","text":"<p>Una funci\u00f3 de decorat o un decorador \u00e9s b\u00e0sicament una funci\u00f3 que afegeix nova funcionalitat a una funci\u00f3 que es passa com a argument. Aix\u00f2 ens permet afegir una funcionalitat nova a una funci\u00f3 existent sense modificar el codi de la funci\u00f3 original ni el codi on aquesta funci\u00f3 s'utilitza.</p> <p>Fixa't al seg\u00fcent fragment de codi. </p> Python<pre><code>def funcio():\nprint(\"Funcionalitat original\")\nfuncio()\n</code></pre> <p>Si executem la funci\u00f3, obtindrem per pantalla Funcionalitat original. Com podem afegir una nova funcionalitat sense tocar el codi de la funci\u00f3 original? Aqu\u00ed \u00e9s on entren en joc els decoradors.</p> <p>Afegim un decorador a la funci\u00f3 original:</p> Python<pre><code>def decorador(funcio_original):\ndef nova_funcio():\nprint(\"Funcionalitat extra\")\nfuncio_original()\nreturn nova_funcio\n@decorador\ndef funcio():\nprint(\"Funcionalitat original\")\nfuncio()\nSi ara executem de nou el codi, la sortida per consola mostrar\u00e0 els dos missatges:\n~~~console\nFuncionalitat extra\nFuncionalitat original\n</code></pre> <p>Analitzem una mica el codi. La funcio decoradora rep com a par\u00e0metre una funci\u00f3 (funcio_original) i t\u00e9 una funci\u00f3 imbricada una altra funci\u00f3 (nova_funcio). La funci\u00f3 original s'executa dins de la nova funci\u00f3 per mantenir la seva funcionalitat mentre afegeix nova funcionalitat a la crida. La funci\u00f3 decoradora torna la nova funci\u00f3, aix\u00ed que en executar una funci\u00f3 que decorem amb aquesta funci\u00f3 decoradora, s'executar\u00e0 la funci\u00f3 original m\u00e9s la funci\u00f3 afegida sense canviar la implementaci\u00f3 de la funci\u00f3 original.</p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#el-decorador-slot","title":"El decorador @Slot()","text":"<p>Encara que PySide6 permet que qualsevol objecte callable de Python, com s\u00f3n les funcions, es facin servir com a ranures quan es connecten a senyals, de vegades cal marcar expl\u00edcitament un m\u00e8tode de Python com una ranura Qt. </p> <p>PySide6 proporciona el decorador de funcions Slot() per fer-ho. A m\u00e9s, connectar un senyal a un m\u00e8tode Python decorat tamb\u00e9 t\u00e9 l'avantatge de reduir la quantitat de mem\u00f2ria utilitzada i \u00e9s una mica m\u00e9s r\u00e0pid, aix\u00ed que \u00e9s recomanable, encara que no necessari utilitzar-los a les ranures.</p>"},{"location":"unitats/8-Components-Designer/teoria/3-Utilitzaci%C3%B3%20dels%20components/#el-decorador-property","title":"El decorador @property","text":"<p>Partim del codi seg\u00fcent:</p> Python<pre><code>class Component:\ndef __init__(self, atribut):\nself.atributo = atribut\ncomponent = Component(10)\nprint(component.atributo)\n</code></pre> <p>Aquest atribut d'inst\u00e0ncia \u00e9s p\u00fablic perqu\u00e8 el seu nom no t\u00e9 un gui\u00f3 baix, per declarar-lo com a protegit, ni un doble gui\u00f3 baix, per declarar-lo com a privat. At\u00e9s que l'atribut \u00e9s p\u00fablic podem accedir-hi directament des de fora de la classe per imprimir-lo com \u00e9s el cas.</p> <p>En executar el codi, veurem a la consola el text 10.</p> <p>Per\u00f2 suposem que ens demanen que protegim aquest atribut passant-lo a privat i validem que el valor \u00e9s un enter positiu abans d'assignar-lo. Com ho fem?</p> <p>Si canviem el codi i el passem a privat, ja no hi podrem accedir des de fora de la classe:</p> Python<pre><code>class Component:\ndef __init__(self, atribut):\nself.__atribut = atribut\ncomponent = Component(10)\nprint(component.__atribut)\n</code></pre> <p>En executar el codi no sortir\u00e0 un error com el seg\u00fcent:</p> <p>AttributeError: 'Component' object has no attribute '__atribut'.</p> <p>En aquest punt, el m\u00e9s probable \u00e9s que decidiu afegir m\u00e8todes getters i setters per llegir i assignar el valor de l'atribut. Per\u00f2 aix\u00f2 t\u00e9 un problema grav\u00edssim. Si la classe ja est\u00e0 en \u00fas en algun projecte, fallar\u00e0 el programa a cada l\u00ednia que llegiu o assigneu l'atribut, ja que anteriorment era p\u00fablic i estem obligant els desenvolupadors a canviar el seu codi en canviar la nostra classe.</p> <p>Per\u00f2 aqu\u00ed \u00e9s on podem fer \u00fas del decorador @property, de manera que canviarem la nostra classe sense obligar a canviar el codi de les aplicacions que en fan \u00fas.</p> <p>Reescrivim aleshores la nostra classe amb el decorador @property:</p> Python<pre><code>class Component:\ndef __init__(self, atribut):\nself.__atribut = atribut\n@property\ndef atribut(self):\nreturn self.__atribut\n@atribut.setter\ndef atribut(self, nou_valor):\nif nou_atribut &gt; 0 and isinstance(nou_atribut, int):\nself.__atribut = nou_valor\nelse:\nprint(\"Per favor, introdu\u00efu un valor enter positiu per a l'atribut\")\n</code></pre> <p>Ara, no caldria reescriure el codi de l'aplicaci\u00f3, ja que en llegir el valor d'atribut, s'executaria el getter atribut(), retornant el valor de l'atribut privat. I en assignar el valor, s'executaria el setter atribut(nou_valor).</p> <p>Si utilitzem la classe amb el codi seg\u00fcent:</p> Python<pre><code>component = Component(10)\nprint(component.atributo)\ncomponent.atribut = -1\nprint(component.atribut)\ncomponent.atribut = 20\nprint(component.atribut)\n</code></pre> <p>El resultat seria el seg\u00fcent:</p> Bash Session<pre><code>10\nSi us plau, introdu\u00efu un valor enter positiu per a l'atribut\n10\n20\n</code></pre> <p>Fixeu-vos que en intentar assignar un valor negatiu, l'atribut no canvia de valor, sin\u00f3 que simplement llan\u00e7a l'av\u00eds per consola.</p> <p>En resum, en definir propietats de components, podem canviar la implementaci\u00f3 interna sense afectar els programes, per la qual cosa podem afegir getters i setters que actuen com a intermediaris de manera transparent per evitar accedir o modificar les dades directament. En farem \u00fas a les tasques.</p>"},{"location":"unitats/8-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/","title":"Integraci\u00f3 de components en eines de disseny","text":""},{"location":"unitats/8-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/#integracio-de-components-en-eines-de-disseny","title":"Integraci\u00f3 de components en eines de disseny","text":"<p>En els apartats anteriors hem vist com crear nous components i la manera d'utilitzar-los a les nostres aplicacions, directament al codi del programa. Tot i aix\u00f2, tamb\u00e9 resulta pr\u00e0ctic disposar d'aquests components personalitzats quan dissenyem la interf\u00edcie per mitj\u00e0 d'una eina visual de disseny.</p> <p>En aquest apartat veurem els dos mecanismes que ofereix Qt Designer per poder dissenyar formularis que incloguen components personalitzats:</p> <ul> <li>Promoci\u00f3 de components.</li> <li>Creaci\u00f3 de complements (plugins).</li> </ul>"},{"location":"unitats/8-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/#promocio-de-components","title":"Promoci\u00f3 de components","text":"<p>\u00c9s possible que durant el disseny de la interf\u00edcie d'usuari amb Qt Designer no tinguem disponible el component personalitzat que volem fer servir. Per exemple, pot ser que el component no estigui finalitzat, o que sigui espec\u00edfic per a una plataforma i el disseny s'estigui realitzant en una altra de diferent. En aquesta situaci\u00f3, podem utilitzar la funcionalitat de Qt Designer coneguda com a promoci\u00f3 de components.</p> <p>La promoci\u00f3 de components ens permet com a dissenyadors utilitzar un component que s\u00ed que tenim disponible a Qt Designer, en representaci\u00f3 del component personalitzat que no tenim. D'aquesta manera podrem fer el disseny de la interf\u00edcie encara que no disposem del nou control. </p>"},{"location":"unitats/8-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/#promocio-del-component-a-qt-designer","title":"Promoci\u00f3 del component a Qt Designer","text":"<p>El primer que hem de fer per utilitzar la promoci\u00f3 de components \u00e9s arrossegar des de la Caixa de ginys de Qt Designer al formulari el component que actuar\u00e0 com a representant. Si el component personalitzat s'ha creat derivant d'un component existent, l'ideal ser\u00e0 utilitzar aquest component base com a representant. Si no, sempre podem utilitzar com a representant un component de tipus QWidget (que trobem a la secci\u00f3 Containers de la Caixa de widgets).</p> <p>Exemple</p> <p>Si el component personalitzat que no tenim disponible \u00e9s un nou tipus de bot\u00f3 que heu creat derivant de QPushButton, el representant ser\u00e0 un control d'aquest tipus. Aix\u00ed, el comportament del component al dissenyador a la previsualitzaci\u00f3 ser\u00e0 m\u00e9s proper al que tindr\u00e0 el nou component quan se substitueixi.</p> <p>Un cop inserit el component, haurem d'obrir el di\u00e0leg Widgets promocionats mitjan\u00e7ant l'opci\u00f3 Promocionar del men\u00fa contextual del component.</p> <p>En aquest di\u00e0leg haurem de completar la informaci\u00f3 seg\u00fcent:</p> <p>Nom de la classe promocionada: indicarem la classe del nostre component personalitzat. Fitxer de cap\u00e7alera: aqu\u00ed escriurem el nom del m\u00f2dul Python que cont\u00e9 el component (el nom del fitxer de codi sense cap extensi\u00f3). </p> <p>Un cop completada la informaci\u00f3, haurem de pr\u00e9mer el bot\u00f3 Afegeix (que afegir\u00e0 aquesta configuraci\u00f3 de promoci\u00f3 a Qt Designer, per si volem reutilitzar-la), i despr\u00e9s al bot\u00f3 Promocionar (que aplicar\u00e0 aquesta configuraci\u00f3 de promoci\u00f3 al component on estem).</p> <p>Podem degradar un component promocionat de nou al vostre tipus inicial amb l'opci\u00f3 Degradar del men\u00fa contextual del component.</p> <p>Exemple</p> <p>El seg\u00fcent fragment cont\u00e9 el disseny d'un formulari en qu\u00e8 s'ha utilitzat la promoci\u00f3 de components per poder incloure el cron\u00f2metre desenvolupat en apartats anteriors. S'ha generat amb Qt Designer.</p> XML<pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ui version=\"4.0\"&gt;\n&lt;class&gt;MainWindow&lt;/class&gt;\n&lt;widget class=\"QMainWindow\" name=\"MainWindow\"&gt;\n&lt;property name=\"geometry\"&gt;\n&lt;rect&gt;\n&lt;x&gt;0&lt;/x&gt;\n&lt;y&gt;0&lt;/y&gt;\n&lt;width&gt;460&lt;/width&gt;\n&lt;height&gt;297&lt;/height&gt;\n&lt;/rect&gt;\n&lt;/property&gt;\n&lt;property name=\"windowTitle\"&gt;\n&lt;string&gt;Ejemplo de promoci\u00f3n&lt;/string&gt;\n&lt;/property&gt;\n&lt;widget class=\"QWidget\" name=\"centralwidget\"&gt;\n&lt;layout class=\"QVBoxLayout\" name=\"verticalLayout\"&gt;\n&lt;item&gt;\n&lt;widget class=\"CronometroUI\" name=\"widget\" native=\"true\"/&gt;\n&lt;/item&gt;\n&lt;/layout&gt;\n&lt;/widget&gt;\n&lt;/widget&gt;\n&lt;customwidgets&gt;\n&lt;customwidget&gt;\n&lt;class&gt;CronometroUI&lt;/class&gt;\n&lt;extends&gt;QWidget&lt;/extends&gt;\n&lt;header&gt;DI_U04_A02_01&lt;/header&gt;\n&lt;container&gt;1&lt;/container&gt;\n&lt;/customwidget&gt;\n&lt;/customwidgets&gt;\n&lt;resources/&gt;\n&lt;connections/&gt;\n&lt;/ui&gt;\n</code></pre>"},{"location":"unitats/8-Components-Designer/teoria/4-Integraci%C3%B3%20en%20dissenyador/#us-de-la-interficie-dissenyada-en-una-aplicacio","title":"\u00das de la interf\u00edcie dissenyada en una aplicaci\u00f3","text":"<p>Quan el disseny del formulari estigui finalitzat i s'hagin promocionat els components necessaris, arriba el moment d'utilitzar la interf\u00edcie dissenyada en una aplicaci\u00f3. Com vam veure a la unitat 5, hi ha dos mecanismes per fer-ho: convertint el fitxer UI a Python amb l'eina uic, o carregant-lo directament amb la classe QUiLoader.</p> <p>Si optem per la primera opci\u00f3, la promoci\u00f3 de components no introduir\u00e0 cap canvi respecte al que ja vam aprendre a la unitat 3. Quan l'eina uic generi el codi Python associat al disseny, introduir\u00e0 la classe promocionada en lloc de la del component que realment arrosseguem des de la Caixa de widgets. A m\u00e9s, afegir\u00e0 l'ordre import necess\u00e0ria per carregar el m\u00f2dul indicat al di\u00e0leg de promoci\u00f3, per la qual cosa el codi generat per uic es podr\u00e0 utilitzar directament des del nostre programa principal.</p> <p>Si carregarem el fitxer de disseny amb la utilitat QUiLoader directament, s\u00ed que caldr\u00e0 fer una modificaci\u00f3 al nostre programa principal. Abans de carregar el fitxer UI (amb el m\u00e8tode load de QUiLoader) haurem d'indicar al carregador que el formulari t\u00e9 un nou tipus de component. Per aix\u00f2 utilitzarem el m\u00e8tode registerCustomWidget de QUiLoader, passant-li com a par\u00e0metre la classe associada al nou component. Aquesta refer\u00e8ncia a la nova classe ens portar\u00e0 a haver dafegir la cl\u00e0usula import corresponent.</p> <p>EXEMPLE</p> <p>Als recursos de la unitat trobar\u00e0s tamb\u00e9 el fitxer DI_U04_A04_02.py, que cont\u00e9 el programa principal modificat per poder utilitzar el fitxer de disseny DI_U04_A04_01.ui.</p> <p>[Final de quadre]</p> <p>4.2 Creaci\u00f3 de complements (plugins)</p> <p>Quan s\u00ed que tenim disponible el nou component durant el disseny de la interf\u00edcie, Qt Designer ens ofereix una alternativa a la promoci\u00f3 de components, que ens permetr\u00e0 integrar-lo completament a l'eina. Per aix\u00f2 haurem de desenvolupar un complement (plugin) associat al nostre component personalitzat.</p> <p>Quan tinguem el plugin desenvolupat, el nostre component apareixer\u00e0 a la Caixa de ginys com la resta de controls est\u00e0ndard de Qt. El desenvolupador podr\u00e0 arrossegar-lo al formulari, obtenint una representaci\u00f3 realista de com el component apareixer\u00e0 a la seva aplicaci\u00f3.</p> <p>A. Actualitzar la variable d'entorn PYSIDE_DESIGNER_PLUGINS</p> <p>El primer pas per fer que el nostre component estigui disponible a Qt Designer \u00e9s actualitzar la variable d'entorn PYSIDE_DESIGNER_PLUGINS, que contindr\u00e0 les rutes de tots els connectors que h\u00e0gim desenvolupat. Si \u00e9s el nostre primer plugin, primer haurem de crear la variable d'entorn. Si ja existeix, simplement afegirem la ruta del nou plugin al contingut previ de la variable.</p> <p>Als enlla\u00e7os de la unitat s'inclouen articles on s'explica com gestionar les variables d'entorn als sistemes operatius Windows, Linux i MacOS.</p> <p>B. Crear l' script de registre per al plugin</p> <p>Al directori del plugin que hem incl\u00f2s a la variable d'entorn, a m\u00e9s del fitxer Python del nou component, caldr\u00e0 incloure un script Python amb la informaci\u00f3 que Qt Designer necessita per registrar el component. </p> <p>Perqu\u00e8 Qt Designer reconegui correctament el plugin, el nom del fitxer que cont\u00e9 l'script de registre ha d'estar format per la paraula register, seguida del nom del fitxer que cont\u00e9 el nou component.</p> <p>EXEMPLE</p> <p>L'script de registre associat al component creat als apartats anteriors (el cron\u00f2metre) s'hauria de dir registerDI_U04_A02_01.py.</p> <p>[Final de quadre]</p> <p>En aquest script farem \u00fas de la classe QPyDesignerCustomWidgetCollection, inclosa al m\u00f2dul PySide6.QtDesigner. Aquesta classe disposa del m\u00e8tode est\u00e0tic registerCustomWidget que sencarregar\u00e0 de realitzar el registre del nou component. Aquest m\u00e8tode rep els par\u00e0metres seg\u00fcents:</p> <p>type: el nom de la classe del nostre nou component. \u00c9s l'\u00fanic par\u00e0metre obligatori del m\u00e8tode i cal indicar-lo en primer lloc. Per poder referenciar el nou tipus caldr\u00e0 incloure a l'script la cl\u00e0usula import corresponent. xml: descripci\u00f3 en format Qt UI de com es crear\u00e0 el component en situar-se en un formulari, incloent valors inicials que s'hagin de donar a algunes de les propietats.  tool_tip: text d'ajuda que es mostrar\u00e0 a la Caixa de ginys quan se situ\u00ef el punter del ratol\u00ed a sobre del nou component. icon: ruta a la icona que es mostrar\u00e0 a la Caixa de ginys. Pot ser una ruta local o una refer\u00e8ncia a un recurs. group: nom del grup de controls a la Caixa de ginys on s'inclour\u00e0 el component. Heu de coincidir amb el nom que veiem a Qt Designer. module: nom del m\u00f2dul Python on es troba el component (normalment, el fitxer de codi sense l'extensi\u00f3). Quan utilitzem l'eina uic per generar el codi s'inserir\u00e0 al resultat una cl\u00e0usula import per a aquest m\u00f2dul.</p> <p>EXEMPLE</p> <p>El fitxer DI_U04_A04_03.py incl\u00f2s als recursos de la unitat cont\u00e9 l'script de registre complet per al component cron\u00f2metre. Tamb\u00e9 s'hi inclou el fitxer de recursos per a la icona (DI_U04_A04_04.qrc), la pr\u00f2pia icona (DI_U04_A04_05.png) i el resultat de compilar el fitxer de recursos amb l'eina rcc (DI_U04_A04_06.py). Per poder utilitzar l'script de registre caldria canviar-li el nom tal com s'ha indicat anteriorment (haur\u00edeu d'anomenar registerDI_U04_A02_01.py).</p> <p>[Final de quadre]</p> <p>A la seg\u00fcent imatge podem veure com el component s'ha integrat a la Caixa de ginys de Qt Designer (situat dins de la secci\u00f3 Display Widgets), i la forma en qu\u00e8 es mostra un cop l'arrosseguem al formulari.</p> <p>C. \u00das de la interf\u00edcie dissenyada en una aplicaci\u00f3</p> <p>Quan integrem un nou component a Qt Designer mitjan\u00e7ant un plugin, l'\u00fas del fitxer UI resultant en una aplicaci\u00f3 no requereix cap acci\u00f3 especial. Es podr\u00e0 optar per qualsevol dels dos m\u00e8todes comentats a la unitat 3 (conversi\u00f3 a codi Python amb uic, o c\u00e0rrega directa amb QUiLoader), sense realitzar cap modificaci\u00f3</p>"},{"location":"unitats/9-Testing-distribucio/code/funcions/ci_es_primo/","title":"ci_es_primo","text":""},{"location":"unitats/9-Testing-distribucio/code/funcions/ci_es_primo/#ci_es_primo","title":"ci_es_primo","text":"<p>C\u00a1Integraci\u00f3 continua sobre el projecte de funcions</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/1-pytest/","title":"Activitat resolta 1 - Proves unit\u00e0ries amb pytest","text":""},{"location":"unitats/9-Testing-distribucio/tasques/activitats/1-pytest/#activitat-resolta-1-proves-unitaries-amb-pytest","title":"Activitat resolta 1 - Proves unit\u00e0ries amb <code>pytest</code>","text":"<p>Al proc\u00e9s de producci\u00f3 de programari s'introdueixen involunt\u00e0riament alguns errors que han de ser corregits abans de posar la soluci\u00f3 en producci\u00f3. \u00c9s per aix\u00f2 que hi ha el programari testing o les proves d'aplicacions. Aquest proc\u00e9s es desenvolupa en paral\u00b7lel a totes les etapes del desenvolupament i ens serveix com a verificaci\u00f3 i validaci\u00f3 que el programari compleix amb la seva comesa i ho fa de manera adequada.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/1-pytest/#objectiu","title":"Objectiu","text":"<p>Hem vist a la teoria que un dels tipus de proves sobre aplicacions imprescindibles s\u00f3n les proves unit\u00e0ries. Una de les eines m\u00e9s utilitzades per dur a terme aquestes proves unit\u00e0ries a python \u00e9s <code>pytest</code>. Utilitzarem pytest per realitzar unes proves unit\u00e0ries sobre la funci\u00f3 de suma de dos n\u00fameros.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/1-pytest/#solucio","title":"Soluci\u00f3:","text":"<p>El primer que hem de fer \u00e9s instal\u00b7lar pytest al nostre sistema:</p> Bash<pre><code>pip install pytest\n</code></pre> <p>Per comprovar que realment est\u00e0 instal\u00b7lat, pots executar des de consola:</p> Bash<pre><code>pytest --version\n</code></pre> <p>El funcionament de pytest \u00e9s similar a qualsevol llibreria de proves. Utilitzem <code>assert</code> perqu\u00e8 la llibreria comprove si es compleix una determinada condici\u00f3. En cas de complir-se, s'ha comprovat que passa el test; en cas contrari, alguna cosa ha fallat:</p> Python<pre><code>assert Val1 == Val2     #\u00bfVal1 igual Val2?\nassert Val1 != Val2     #\u00bfVal1 diferent Val2?\nassert Val1 &lt; Val2      #\u00bfVal1 \u00e9s m\u00e9s petit que Val2?\nassert Val1 &lt;= Val2     #Val1 menor o igual que Val2?\nassert Val1 &gt; Val2      #\u00bfVal1 m\u00e9s gran que Val2?\nassert Val1 &gt;= Val2     #Val1 m\u00e9s gran o igual que Val2?\n</code></pre> <p>Definim una funci\u00f3 suma dins d'un operacions.py.</p> Python<pre><code>def suma_enteros(sumando1, sumando2):\nif not isinstance(sumando1, int) or not isinstance(sumando2, int):\nraise TypeError('Proporciona solo enteros')\nelse:\nresultado = sumando1 + sumando2\nreturn resultado\n</code></pre> <p>Ara definim un fitxer de test sobre la suma. \u00c9s impossible cobrir tots els casos ja que hi ha infinits n\u00fameros, per\u00f2 podem fer agrupacions de proves, per exemple:</p> <ul> <li>sumar el zero amb ell mateix, ja que \u00e9s l'element neutre de l'operaci\u00f3 suma</li> <li>sumar dos positius</li> <li>resumeix els negatius</li> <li>sumar un positiu i un negatiu</li> </ul> <p>Ara definirem un fitxer de test per a les diferents agrupacions i per comprovar que es llan\u00e7a l'excepci\u00f3 si no passem sencers a la funci\u00f3.</p> Python<pre><code>import pytest\nimport operaciones\ndef test_suma_cero():\nassert operaciones.suma_enteros(0,0) == 0\ndef test_suma_positivos():\nassert operaciones.suma_enteros(5,5) == 10\ndef test_suma_positivos_negativos():\nassert operaciones.suma_enteros(-5,5) == 0\ndef test_suma_nagativo():\nassert operaciones.suma_enteros(-5,-5) == -10\ndef test_suma_excepcion_sumando1():\nwith pytest.raises(TypeError):\noperaciones.suma_enteros(5.0,5) == 0\ndef test_suma_excepcion_sumando2():\nwith pytest.raises(TypeError):\noperaciones.suma_enteros(5.0,'a') == 0\ndef test_suma_excepcion_sumandos():\nwith pytest.raises(TypeError):\noperaciones.suma_enteros(True,'a') == 0\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/1-pytest/#integracio-del-testing-a-vscode","title":"Integraci\u00f3 del testing a vscode","text":"<p>Es pot utilitzar el VSCode per llan\u00e7ar els tests de forma integrada, resultant molt m\u00e9s c\u00f2mode llan\u00e7ar-los. Per fer-ho prem la combinaci\u00f3 de tecles Ctrl + Shift + P (o a trav\u00e9s del men\u00fa View -&gt; Command Palette), i busca \u201cTests\u201d. Seleccioneu l'opci\u00f3 \u201cPython: Configure Tests\u201d.</p> <p> </p> Python configure test <p>Ens demanar\u00e0 triar quina eina volem fer servir. Seleccionem pytest (recorda que ha d'estar instal\u00b7lada amb pip).</p> <p> </p> Seleccionar framework <p>Finalment seleccionem la carpeta on tenim definits els tests test_*.py. Ens apareixer\u00e0 al panell esquerre del VSCode una proveta de laboratori des d'on podem llan\u00e7ar i depurar els tests.</p> <p> </p> Image caption"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/","title":"Activitat resolta 2 - Desenvolupament guiat per proves","text":""},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#activitat-resolta-2-tdd","title":"Activitat resolta 2 - TDD","text":"<p>Ja hem insistit en la import\u00e0ncia que tenen les proves de programari en el desenvolupament de les aplicacions per assegurar un alt grau de qualitat als nostres projectes. En aquesta unitat ens centrarem en una t\u00e8cnica de programaci\u00f3 centrada en aquesta fase de proves que a m\u00e9s s'ajusta a la filosofia de desenvolupament \u00e0gil. \u00c9s l'anomenat desenvolupament guiat per proves odesenvolupament impulsat per proves(TDD).</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#objectiu","title":"Objectiu","text":"<p>Ara que ja sabem escriure proves unit\u00e0ries amb pytest i automatitzar-ne l'execuci\u00f3, tot sense sortir del nostre entorn de desenvolupament, aplicarem la t\u00e8cnica de TDD per realitzar la implementaci\u00f3 d'una funci\u00f3 per esbrinar si un nombre \u00e9s primer.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#solucio","title":"Soluci\u00f3","text":"<p>Seguirem una s\u00e8rie de regles per seguir el cicle de desenvolupament definit per TDD.</p> <p>El primer que farem ser\u00e0 crear una estructura pel nostre projecte amb el codi i els tests separats:</p> Bash<pre><code>.\n\u251c\u2500\u2500 src\n\u2502 \u251c\u2500\u2500 funcions.py\n\u2502 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 proves\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_src\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 test_funcions.py\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#regla-1-primer-el-test-despres-la-codificacio","title":"Regla 1: Primer el test, despr\u00e9s la codificaci\u00f3.","text":"<p>Aix\u00ed que la primera cosa que haurem d'escriure \u00e9s el test i verificar que falla.</p> <p>El n\u00famero 1 no est\u00e0 considerat com a primer, aix\u00ed que si cridem a la funci\u00f3 amb el n\u00famero 1 hauria de retornar False. Per tant podem escriure la prova seg\u00fcent:</p> <p>test_src/test_funcions.py</p> Python<pre><code>def test_primo_1():\nassert es_primo(1) == False\n</code></pre> <p>En executar el test al VSCode ens fallar\u00e0, igual que si ho fem per consola. L'error ser\u00e0 el seg\u00fcent:</p> Python<pre><code>def test_primo_1():\n&gt; assert ca_primo(1) == False\nE NameError: el nom 'es_primo' no est\u00e0 definit\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#regla-2-afegeix-el-minim-codi-per-superar-el-test","title":"Regla 2: Afegeix el m\u00ednim codi per superar el test","text":"<p>Aix\u00ed que definirem la funci\u00f3 amb la m\u00ednima implementaci\u00f3 per superar el test. Els fitxers quedaran com segueix:</p> <p>src/funcions.py</p> Python<pre><code>def es_primo(num):\nif num == 1:\nreturn False\n</code></pre> <p> Supera el test </p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#regla-3-no-haurieu-de-tindre-mes-dun-test-no-superat-a-la-vegada","title":"Regla 3: No haur\u00edeu de tindre m\u00e9s d'un test no superat a la vegada","text":"<p>Aquesta regla no \u00e9s una regla que s'hagi de seguir estrictament, per\u00f2 ajuda el programador a centrar-se en un sol problema. Ara que la nostra implementaci\u00f3 supera el test per al n\u00famero 1, escriurem un test per a un nombre primer. Farem servir el 2 per a la nostra prova.</p> <p>test_src/test_funcions.py</p> Python<pre><code>def test_es_primo_numero_primo():\nassert es_primo(2) == True\n</code></pre> <p>Si executem els tests, observarem que aquest nou test falla, aix\u00ed que refactoritzarem el codi de la funci\u00f3 es_primo perqu\u00e8 supere tots els tests amb el m\u00ednim codi possible:</p> <p>src/funcions.py</p> Python<pre><code>def es_primo(num):\nif num == 1:\nreturn False\nelse:\nreturn True\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#regla-4-escriu-codi-que-passe-el-test-despres-refactoritza-el-codi","title":"Regla 4: Escriu codi que passe el test, despr\u00e9s refactoritza el codi.","text":"<p>El codi anterior passa ambdues proves, per\u00f2 podem veure f\u00e0cilment que la implementaci\u00f3 no \u00e9s correcta. Quan afegiu un test per a n\u00fameros negatius o el zero, el test fallar\u00e0.</p> <p>test_src/test_funcions.py</p> Python<pre><code>def test_es_primo_negativo():\nassert es_primo(-10) == False\n</code></pre> <p>La refactoritzaci\u00f3 quedaria com:</p> <p>src/funcions.py</p> Python<pre><code>def es_primo(num):\nif num &lt; 2:\nreturn False\nelse:\nreturn True\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#regla-5-un-test-hauria-de-fallar-la-primera-vegada-que-ho-escrius-en-cas-contrari-preguntat-per-que-ho-afegeixes","title":"Regla 5: Un test hauria de fallar la primera vegada que ho escrius, en cas contrari pregunta't per qu\u00e8 ho afegeixes.","text":"<p>Si no hi ha cap test que fallen, no haur\u00edeu d'afegir nova funcionalitat. Aix\u00f2 us obliga a escriure primer els test de nou abans que el codi.</p> <p>Si escrivim un test per a qualsevol nombre compost (no primer m\u00e9s gran que 2) de nou fallar\u00e0, ja que no tornar\u00e0 que s\u00ed que \u00e9s primer.</p> <p>test_src/test_funcions.py</p> Python<pre><code>def test_es_primo_numero_primo_mayor_2():\nassert es_primo(29) == True\n</code></pre> <p>La refactoritzaci\u00f3 quedaria com:</p> <p>src/funcions.py</p> Python<pre><code>def es_primo(num):\nif num &lt; 2:\nreturn False\nfor n in range(2, num):\nif num % n == 0:\nreturn False\nreturn True\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/2-tdd/#regla-6-mai-refactoritzar-sense-tests","title":"Regla 6: mai refactoritzar sense tests.","text":"<p>Un cop tenim ben implementats els tests, podem refactoritzar el codi assegurant que la refactoritzaci\u00f3 no introdueix errors que anteriorment no ten\u00edem.</p> <p>Si observem la funci\u00f3, la podem fer m\u00e9s eficient canviant el rang, ja que el divisor m\u00e9s gran d'un nombre no pot ser m\u00e9s gran que la part sencera de la meitat. Aix\u00ed que podem refactoritzar i deixar la implementaci\u00f3 com segueix, fent la funci\u00f3 molt m\u00e9s eficient:</p> <p>src/funcions.py</p> Python<pre><code>import math\ndef es_primo(num):\nif num &lt; 2:\nreturn False\nfor n in range(2, math.floor(math.sqrt(num) + 1)):\nif num % n == 0:\nreturn False\nreturn True\n</code></pre> <p>Si executem els tests, veurem que els supera tots, assegurant que la nostra implementaci\u00f3 \u00e9s correcta.</p> <p>Instruccions addicionals sobre el seu \u00fas en un context pr\u00e0ctic real.</p> <p>En un desenvolupament real, cada programador provaria el codi en local abans d'enviar les seves modificacions al repositori del projecte. Encara que s'enviaren per error canvis que no superaren els tests, el repositori no els posaria en producci\u00f3, ja que fallarien les proves. Si els tests locals se superen, es pot estar molt segur que no s'introduiran errors que anteriorment no estigueren en el codi, reduint aix\u00ed la possibilitat de defectes.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/3-ci/","title":"Activitat resolta 3 - Integraci\u00f3 continua","text":""},{"location":"unitats/9-Testing-distribucio/tasques/activitats/3-ci/#integracio-continua-amb-github-pages","title":"Integraci\u00f3 continua amb Github Pages","text":"<p>Hem apr\u00e8s en apartats anteriors que les noves metodologies s'orienten a obtenir un producte amb m\u00e9s qualitat amb un temps de lliurament el menor possible. Per aconseguir aquest objectiu, les empreses han implantat la cultura DevOps (development + operations). Entre les seves operacions hi ha la integraci\u00f3 i el lliurament/desplegament continus, que s\u00f3n dues de les peces clau que els permetran aconseguir l'objectiu presentat anteriorment.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/3-ci/#objectiu","title":"Objectiu","text":"<p>En aquesta pr\u00e0ctica muntarem un sistema d'integraci\u00f3 cont\u00ednua amb Github Actions. En concret pujarem el nostre codi desenvolupat en l'activitat anterior, el que consistia a desenvolupar la funci\u00f3 <code>es_primo</code>, per poder fer integraci\u00f3 cont\u00ednua sobre el codi.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/3-ci/#primer-pas-creacio-del-repositori","title":"Primer pas - creaci\u00f3 del repositori","text":"<p>El primer pas ser\u00e0 crear un repositori a github amb el nom, per exemple, ci_es_primo. Afegirem un README, un .gitignore del llenguatge de programaci\u00f3 python i el publicarem sota llic\u00e8ncia GNU/GPL 3.0.</p> <p> </p> Creaci\u00f3 del repositori <p>Una vegada creat el clonem al nostre ordinador i afegim el codi (carpeta <code>src</code>) i les proves (carpeta <code>tests</code>) del nostre projecte.</p> <p> </p> Estructura del repositori <p>pytest!</p> <p>Comproveu que en executar els tests amb vscode tot funciona correctament.</p> <p>Compte!</p> <p>Afegiu .vscode/ a .gitignore per a no incorporar la configuraci\u00f3 local al repositori remot.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/3-ci/#segon-pas-afegim-un-linter","title":"Segon pas - afegim un linter","text":"<p>Ara anem a afegir un linter, que \u00e9s una ferramenta que analitza el codi i busca errors, tant de sintaxi com d'estil. Podem utilitzar l'extensi\u00f3 vscode <code>pylint</code> de Microsoft o intal\u00b7lar i comprovar que la llibreria s'ha instal\u00b7lat al nostre entorn amb:</p> Python<pre><code>pip install pylint\npylint --version\n</code></pre> <p>Si instal\u00b7lem pylint a vscode ens apareixeran els problemes detectats a la pestanya problems. </p> <p> </p> Pylint a vscode <p>Si hem instal\u00b7lat la ferramenta, podem executar la seg\u00fcent ordre (des de l'arrel del repositori) per comprovar els problemes:</p> Bash<pre><code>$ pylint src\n************* Module src.funcions\nsrc/funcions.py:15:0: C0304: Final newline missing (missing-final-newline)\nsrc/funcions.py:1:0: C0114: Missing module docstring (missing-module-docstring)\nsrc/funcions.py:4:0: C0116: Missing function or method docstring (missing-function-docstring)\nsrc/funcions.py:5:4: R1705: Unnecessary \"else\" after \"return\", remove the \"else\" and de-indent the code inside it (no-else-return)\n-------------------------------------------------------------------\nYour code has been rated at 6.36/10 (previous run: 6.36/10, +0.00)\n</code></pre> <p>Pylint CLI front a extensi\u00f3 pylint de MS</p> <p>Com vegeu els resultats no s\u00f3n exactament els mateixos degut a les diferents versions de pylint utilitzades.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/3-ci/#tercer-pas-afegim-una-accio-de-github","title":"Tercer pas - afegim una acci\u00f3 de github","text":"<p>Les accions de Github ens permeten realitzar una s\u00e8rie d'accions cada vegada que es produeix un esdeveniment de Github. L'esdeveniment m\u00e9s utilitzat \u00e9s PUSH, \u00e9s a dir, afegir canvis al nostre repositori. Els fitxers actualitzats normalment seran m\u00f2duls de codi font que es van descarregar pr\u00e8viament de Github, sobre els quals ha treballat i ha fet canvis un programador. Usant una eina de control de versions com Git, prepararem els canvis per integrar-los al repositori original. Com hem vist a la teoria, abans d'integrar el codi font modificat a la c\u00f2pia mestra, ens hem d'assegurar que est\u00e0 lliure d'errors, passant les proves que hav\u00edem definit. Aquesta \u00e9s la part CI d'un flux CI/CD.</p> <p>Per afegir una acci\u00f3 anem a Accions al nostre repositori. Ens suggeriran una s\u00e8rie de configuracions segons el contingut del repositori. En aquest cas, github detecta que \u00e9s un repositori amb codi python, aix\u00ed que ens suggereix alguns fluxos de treball. Seleccionarem de <code>Python application</code> donant-li a <code>Configure</code>. En cas de no apar\u00e9ixer, el podem buscar a la plataforma.</p> <p> </p> Python application action <p>En pr\u00e9mer se'ns presentar\u00e0 en edici\u00f3 un fitxer de configuraci\u00f3 yaml <code>python-app.yml</code>.</p> <p>Simplement observant el fitxer de configuraci\u00f3 es pot intuir com funciona:</p> Text Only<pre><code># This workflow will install Python dependencies, run tests and lint with a single version of Python\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\n\nname: Python application\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python 3.10\n      uses: actions/setup-python@v3\n      with:\n        python-version: \"3.10\"\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install flake8 pytest\n        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n    - name: Lint with flake8\n      run: |\n        # stop the build if there are Python syntax errors or undefined names\n        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n    - name: Test with pytest\n      run: |\n        pytest\n</code></pre> <p>B\u00e0sicament estem configurant que quan es produesca un <code>push</code> o un <code>pull_request</code> sobre la rama principal <code>main</code> es llance l'acci\u00f3. Quan es llance es posar\u00e0 en marxa el <code>build</code> que ser\u00e0 executat amb un sol <code>job</code> o treball (podr\u00edem configurar-ne diversos). El <code>job</code> es porta a terme (<code>run</code>) sobre un contenidor docker que executa la \u00faltima imatge d'ubuntu (<code>ubuntu-latest</code>) i realitza una s\u00e8rie de passos (<code>steps</code>). Els passos s\u00f3n:</p> <ul> <li>portar el codi (checkout)</li> <li>configurar python3 sobre el contenidor</li> <li>instal\u00b7lar les depend\u00e8ncies. Aquest pas s'executa sobre la terminal bash del contenidor, igual que ho far\u00edem al nostre ordinador.</li> <li>executar el linter, tamb\u00e9 sobre la terminal.</li> <li>executar les proves, novament utilitzant la terminal del contenidor.</li> </ul> <p>Si tots els passos anteriors es completen correctament, la integraci\u00f3 haur\u00e0 estat satisfact\u00f2ria. En cas contrari, la construcci\u00f3 fallar\u00e0 i ens enviar\u00e0 un correu electr\u00f2nic a l'adre\u00e7a amb qu\u00e8 ens registrem a github indicant que el flux de treball ha fallat.</p> <p>Canviarem algunes configuracions:</p> <ul> <li>Anem a modificar el nom del fitxer a ci.yml</li> <li>Canviarem tots els <code>name</code> per a que ens ajude a veure en quin pas ha fallat</li> <li>Utilitzarem el linter pylint en comptes de flake8</li> <li>La l\u00ednia d'instal\u00b7lar les depend\u00e8ncies definides al fitxer de requisits no cal, per\u00f2 la deixarem per si en un futur inserim depend\u00e8ncies a una de les factoritzacions.</li> <li>El linter el canviarem perqu\u00e8 la puntuaci\u00f3 a aconseguir siga de 10 (aix\u00f2 \u00e9s la m\u00e0xima puntuaci\u00f3, estem exigint que siguen molt escrupolosos amb la producci\u00f3 de codi).</li> <li>Finalment, executarem les proves amb pytest.</li> </ul> <p>El fitxer quedaria com segueix:</p> Text Only<pre><code># This workflow will install Python dependencies, run tests and lint with a single version of Python\n# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python\n\nname: Integraci\u00f3 cont\u00ednua sobre el projecte funcions\n\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\npermissions:\n  contents: read\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Configurar Python 3.10\n      uses: actions/setup-python@v3\n      with:\n        python-version: \"3.10\"\n    - name: Instal\u00b7lar depend\u00e8ncies\n      run: |\n        python -m pip install --upgrade pip\n        pip install pylint pytest\n        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi\n    - name: Lint amb pylint\n      run: |\n        # stop the build if there are Python syntax errors or undefined names\n        pylint --fail-under=10 src      \n    - name: Proves amb pytest\n      run: |\n        pytest\n</code></pre> <p>En donar-li a <code>satart commit</code>, es realitzar\u00e0 un <code>push</code> sobre el repositori, per la qual cosa l'acci\u00f3 s'executar\u00e0. Si vas al men\u00fa <code>Actions</code> observar\u00e0s que la integraci\u00f3 no ha sigut satisfact\u00f2ria. Aix\u00f2 \u00e9s degut al fet que no hav\u00edem corregit els problemes de <code>linting</code>.</p> <p> </p> Integraci\u00f3 fallida <p>Si fem clic sobre l'enlla\u00e7 de l'error i despr\u00e9s sobre build, ens mostrar\u00e0 el pas que ha fallat al costat de l'eixida per consola del contenidor.</p> <p> </p> Eixida per consola del contenidor"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/3-ci/#quart-pas-modifiquem-el-codi-per-corregir-els-erros","title":"Quart pas - modifiquem el codi per corregir els erros","text":"<p>Ens portem el codi a local i corregim els errors que ens indica el pylint, quedant l'arxiu com segueix:</p> Python<pre><code>\"\"\"M\u00f3dulo que contiene la funci\u00f3n es_primo\"\"\"\nimport math\ndef es_primo(numero):\n\"\"\"\n   Funci\u00f3n para determinar si un n\u00famero es primo:\n   Entrada:\n   - entero: n\u00famero entero a determinar si es primo\n   Salida:\n   - True/False: en caso de ser primo o no\n   \"\"\"\nif numero &lt; 2:\nreturn False\nfor n in range(2, math.floor(math.sqrt(numero) + 1)):\nif numero % n == 0:\nreturn False\nreturn True\nif __name__=='__main__':\nfor i in range(2,100):\nprint(f'{i} -&gt; {es_primo(i)}')\n</code></pre> <p>Comprovaci\u00f3 en local</p> <p>Abans d'enviar els canvis, comproveu que el linter et dona una puntuaci\u00f3 de 10 i que no heu introdu\u00eft errors en la refactoritzaci\u00f3 utilitzant pytest. Si tot \u00e9s correcte ja podeu enviar el codi per a la seua integraci\u00f3. En cas de no ser-ho, corregeix els errors abans de la integraci\u00f3.</p> <p>Finalement comprova que la integraci\u00f3 ha sigut satisfact\u00f2ria a <code>github actions</code>.</p> <p> </p> Integraci\u00f3 satisfact\u00f2ria <p>Pots veure les eixides per consola de cada un dels passos:</p> <p> </p> Eixida per consola dels passos <p>Al seg\u00fcent enlla\u00e7 tens el repositori p\u00fablic amb integraci\u00f3 continua que hem utilitzat a esta activitat.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/4-executable-windows/","title":"Activitat resolta 4 - Executable windows","text":""},{"location":"unitats/9-Testing-distribucio/tasques/activitats/4-executable-windows/#hello-world-executable-per-a-windows","title":"Hello world! - Executable per a windows","text":"<p>No serveix de res desenvolupar una bona aplicaci\u00f3 si despr\u00e9s no pot ser executada per persones de fora de l'equip de desenvolupament. Per aconseguir aquest fi, necessitem empaquetar tota l'aplicaci\u00f3 en un tot, de manera que puga ser distribu\u00efda entre els usuaris finals que en faran \u00fas. </p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/4-executable-windows/#objectiu","title":"Objectiu","text":"<p>En aquesta activitat empaquetarem l'aplicaci\u00f3 <code>Hello world!</code> de PySide6 per a windows a partir del codi font.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/4-executable-windows/#requisits","title":"Requisits","text":"<ul> <li>M\u00e0quina Windows amb python3 instal\u00b7lat. </li> <li>Codi font i recursos de l'aplicaci\u00f3.</li> <li>Es recomana utilitzar el vscode per fer el cas, encara que no \u00e9s imprescindible.</li> </ul>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/4-executable-windows/#solucio","title":"Soluci\u00f3","text":"Python<pre><code>import sys, os\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QPushButton\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QIcon\nmain_path = os.path.dirname(__file__)\nclass MainWindow(QMainWindow):\ndef __init__(self):\nsuper(MainWindow, self).__init__()\nself.setWindowTitle(\"PySide6 executable\")\nlayout = QVBoxLayout()\nlabel = QLabel(\"Hola mundo!\")\nlabel.setAlignment(Qt.AlignCenter)\nlayout.addWidget(label)\nbutton = QPushButton(\"Cerrar\")\nbutton.setIcon(QIcon(os.path.join(main_path, \"resources\", \"close.png\")))\nbutton.pressed.connect(self.close)\nlayout.addWidget(button)\nwidget = QWidget()\nwidget.setLayout(layout)\nself.setCentralWidget(widget)\ndef main():\napp = QApplication(sys.argv)\napp.setWindowIcon(QIcon(os.path.join(main_path, \"resources\", \"hand.png\")))\nwindow = MainWindow()\nwindow.show()\napp.exec()\nif __name__ == \"__main__\":\nmain()\n</code></pre> <p>Executem el codi per veure que funciona en una consola \u201cCommand Prompt\u201d. Per treure el cmd en vscode, utilitzem Ctrl + \u00f1 i llancem un cmd com es mostra a la imatge seg\u00fcent.</p> <p> </p> CMD integrat a vscode <p>Creem un entorn virtual l'activem (si estem usant vscode, ho detectar\u00e0 i ho activar\u00e0 autom\u00e0ticament) i instal\u00b7lem les depend\u00e8ncies:</p> Text Only<pre><code>python3 -m venv venv\nvenv\\scripts\\activate.bat\npip3 install PySide6 PyInstaller\n</code></pre> <p>Llancem l'aplicaci\u00f3 amb:</p> Text Only<pre><code>python hello_world.py\n</code></pre> <p> </p> App Hello world! <p>Utilitzem pyinstaller per crear un executable .exe:</p> <p></p>Text Only<pre><code>pyinstaller --onefile -n \"Hello World!\" -w hello_world.py\n</code></pre> Les opcions es detallen a continuaci\u00f3: <ul> <li>--onefile: indica que voleu un \u00fanic fitxer .exe, com a aplicaci\u00f3 portable (si proves sense aquesta opci\u00f3 observar\u00e0s que el .exe s'acompanya de llibreries din\u00e0miques i altres fitxers necessaris per a l'execuci\u00f3). Executar amb un \u00fanic fitxer \u00e9s m\u00e9s lent, ja que en executar cal descomprimir el codi en una carpeta temporal, en canvi \u00e9s m\u00e9s f\u00e0cil de distribuir en constar d'un \u00fanic fitxer, encara que es podria distribuir en un fitxer comprimit.</li> <li>-n: indica el nom de l'executable. En aquest cas el resultat \u00e9s \u201cHola m\u00f3n!.exe\u201d.</li> <li>-w: indica que \u00e9s una aplicaci\u00f3 amb interf\u00edcie d'usuari (windowed) i no de consola.</li> </ul> <p>Ens crear\u00e0 un parell de carpetes (build i dist). El fitxer executable el podem trobar a dist\\Hola M\u00f3n!.exe, per\u00f2 en executar-lo observar\u00e0s que les imatges no les mostra. Aix\u00f2 \u00e9s degut a que no hem indicat a pyinstaller que necessita altres fitxers (els recursos <code>resources</code>). Per solucionar-ho, editarem l'arxiu <code>Hola Mundo!.spec</code> i a l'apartat d'an\u00e0lisi, a la l\u00ednia <code>datas = []</code>, la deixarem com segueix:</p> <p>dates=[('resources', 'resources')],</p> <p>Estem indicant que copieu la carpeta <code>resources</code> dels fitxers font a una carpeta que acompanyar\u00e0 l'executable i s'anomenar\u00e0 <code>resources</code> tamb\u00e9. En tornar a executar l'aplicaci\u00f3, veureu que ara el resultat \u00e9s l'esperat.</p> <p>Observem, per\u00f2, que la icona que mostra a la barra de tasques no \u00e9s la que hem indicat per codi sin\u00f3 la d'una aplicaci\u00f3 <code>python</code>. Aix\u00f2 passa perqu\u00e8 Windows mira l'executable i el classifica al <code>application group</code> al qual pertany. Per defecte, tots els scripts de Python s'agrupen al mateix grup <code>Python</code>, per la qual cosa es mostra la icona de Python. Per evitar que aix\u00f2 passe, hem de proporcionar a Windows un identificador d'aplicaci\u00f3 diferent. Afegeix el seg\u00fcent fragment de codi a la teua aplicaci\u00f3 i observar\u00e0s que s'ha solucionat:</p> Python<pre><code>import sys, os\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QPushButton\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QIcon\nmain_path = os.path.dirname(__file__)\ntry:\nfrom ctypes import windll  # Codi sols v\u00e0lid en windows\napp_id = 'desenvolupament_interficies.unitat_7.hello_world.1'\nwindll.shell32.SetCurrentProcessExplicitAppUserModelID(app_id)\nexcept ImportError:\npass\nclass MainWindow(QMainWindow):\npass\n</code></pre> <p>Crida de nou pyinstaller amb les opcions indicades i veur\u00e0s que el nou executable a <code>dist</code> s\u00ed que mostra la icona correcta a la barra de tasques.</p> Text Only<pre><code>pyinstaller --onefile -n \"Hello World!\" -w Hola Mundo!.spec\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/5-instalador-linux/","title":"Activitat resolta 5 - Instal\u00b7lador linux","text":""},{"location":"unitats/9-Testing-distribucio/tasques/activitats/5-instalador-linux/#distribucio-daplicacions-per-a-distribucions-linuxmacos","title":"Distribuci\u00f3 d'aplicacions per a distribucions linux/macOS","text":"<p>En l'activitat resolta 4, vam veure com construir un .exe per a Windows. Farem el mateix per\u00f2 en aquesta ocasi\u00f3 construirem un .deb per als derivats de Debian, un .rpm per als derivats de Red Hat i un .pkg per als macOS.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/5-instalador-linux/#requisits","title":"Requisits","text":"<ul> <li>M\u00e0quina amb una distribuci\u00f3 de linux derivada de debian (Ubuntu, LinuxMint...) amb Python3 instal\u00b7lat.</li> <li>Codi font i recursos de l'aplicaci\u00f3.</li> <li>Es recomana utilitzar el vscode per fer el cas, encara que no \u00e9s imprescindible.</li> </ul>"},{"location":"unitats/9-Testing-distribucio/tasques/activitats/5-instalador-linux/#resolucio","title":"Resoluci\u00f3","text":"<p>Partirem del seg\u00fcent codi, que executarem a la m\u00e0quina amb la distribuci\u00f3 de Linux derivada de debian.</p> Python<pre><code>import sys, os\nfrom PySide6.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, QLabel, QPushButton\nfrom PySide6.QtCore import Qt\nfrom PySide6.QtGui import QIcon\nmain_path = os.path.dirname(__file__)\nclass MainWindow(QMainWindow):\ndef __init__(self):\nsuper(MainWindow, self).__init__()\nself.setWindowTitle(\"PySide6 executable\")\nlayout = QVBoxLayout()\nlabel = QLabel(\"Hola mundo!\")\nlabel.setAlignment(Qt.AlignCenter)\nlayout.addWidget(label)\nbutton = QPushButton(\"Cerrar\")\nbutton.setIcon(QIcon(os.path.join(main_path, \"resources\", \"close.png\")))\nbutton.pressed.connect(self.close)\nlayout.addWidget(button)\nwidget = QWidget()\nwidget.setLayout(layout)\nself.setCentralWidget(widget)\ndef main():\napp = QApplication(sys.argv)\napp.setWindowIcon(QIcon(os.path.join(main_path, \"resources\", \"hand.png\")))\nwindow = MainWindow()\nwindow.show()\napp.exec()\nif __name__ == \"__main__\":\nmain()\n</code></pre> <p>Instal\u00b7lem un entorn virtual (venv) i les llibreries PySide6 i pyinstaller:</p> Bash<pre><code>$ python3 -m venv venv\n$ source venv/bin/activate\n(venv) $ pip install PySide6 pyinstaller\n</code></pre> <p>Construim l'executable amb pyinstaller:</p> Bash<pre><code>$ pyinstaller --onefile -n \"hello-world\" --add-data=\"resources:resources\" -w hello_world.py\n</code></pre> <p>A <code>dist/hello-world</code> tindrem l'executable, que podem executar directament fent-hi doble clic.</p> <p> </p> Executable a Linux <p>Necessitem instal\u00b7lar fpm, que \u00e9s una aplicacions de ruby \u200b\u200b(anomenades gemmes) per construir el rpm, deb o pkg segons el nostre sistema operatiu:</p> Bash<pre><code>$ sudo apt-get install ruby\n$ gem install fpm --user-install\n</code></pre> <p>Compte!</p> <p>Comprovem que fpm est\u00e0 instal\u00b7lat i al nostre path, en cas de no ser aix\u00ed l'afegim editant el fitxer ~.bashrc.</p> Bash<pre><code>$ fpm --version\n</code></pre> <p>Crearem un acc\u00e9s directe abans de construir l'aplicaci\u00f3, de manera que puguem accedir r\u00e0pidament. El fitxer ser\u00e0 hola-mundo.desktop amb el contingut seg\u00fcent:</p> Bash<pre><code>[Desktop Entry]\nType=Application\n\nName=hello-world\n\nComment=Hello World! with PySide6.\n\nPath=/opt/hello-world\n\nExec=/opt/hello-world/hello-world\n\nIcon=hello-world\n</code></pre> <p>Ara, amb l'ajuda del seg\u00fcent script farem la construcci\u00f3 de l'instal\u00b7lador i procedirem a instal\u00b7lar-lo:</p> Bash<pre><code>#!/bin/sh\n# Build executable\nsource ../venv/bin/activate\n[ -e build ] &amp;&amp; rm -r build\n[ -e dist ] &amp;&amp; rm -r dist\n[ -e hello-world.spec ] &amp;&amp; rm hello-world.spec\n[ -e hello-world.rpm ] &amp;&amp; rm hello-world.rpm\npyinstaller --onefile -n \"hello-world\" --add-data=\"resources:resources\" -w hello_world.py\n\n# Create folders.\n[ -e pkg ] &amp;&amp; rm -r pkg\nmkdir -p pkg/opt/hello-world\nmkdir -p pkg/usr/share/applications\nmkdir -p pkg/usr/share/icons/hicolor/scalable/apps\n\n# Copy executable file\ncp -r \"dist/hello-world\" \"pkg/opt/hello-world\"\n# Copy icon file\ncp -f resources/hello-world.svg pkg/usr/share/icons/hicolor/scalable/apps/hello-world.svg\n# Copy desktop entry file\ncp -f hello-world.desktop pkg/usr/share/applications\n\n# Change permissions\nfind \"pkg/opt/hello-world/hello-world\" -type f -exec chmod 755 -- {} +\nfind pkg/usr/share -type f -exec chmod 644 -- {} +\n\n# Create package\n# fpm --verbose -C pkg -s dir -t rpm -n \"hello-world\" -v 0.0.1 -p hello-world.rpm\nfpm -C pkg -s dir -t rpm -n \"hello-world\" -v 0.0.1 -p hello-world.rpm\n\n# Install package\nsudo dnf remove hello-world-0.0.1-1.x86_64\nsudo dnf install hello-world.rpm\n</code></pre> <p>Compte!</p> <p>Haurem d'adaptar l'script anterior segons el nostre sistema operatiu: - L\u00ednia 29: l'opci\u00f3 <code>-t</code> indica quin tipus de paquet volem construir. Consulta la documentaci\u00f3 per proporcionar l'opci\u00f3 correcta segons el teu sistema operatiu. - L\u00ednies 32 i 33: Haur\u00e0s de canviar la desinstal\u00b7laci\u00f3 i la instal\u00b7laci\u00f3 segons el sistema operatiu.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/practiques/1-pytest-cartera/","title":"Pr\u00e0ctica 1 - Proves unit\u00e0ries amb pytest","text":""},{"location":"unitats/9-Testing-distribucio/tasques/practiques/1-pytest-cartera/#proves-unitaries-amb-pytest","title":"Proves unit\u00e0ries amb <code>pytest</code>","text":""},{"location":"unitats/9-Testing-distribucio/tasques/practiques/1-pytest-cartera/#part-1-definicio-de-proves","title":"Part 1 - definici\u00f3 de proves","text":"<p>Donat el codi de la classe cartera.py, defineix unes proves unit\u00e0ries per provar-la. </p> Python<pre><code>class SaldoInsuficiente(Exception):\npass\nclass Cartera(object):\ndef __init__(self, saldo_inicial=0):\nself.saldo = 0\ndef gastar(self, cantidad):\nif self.saldo &lt; cantidad:\nraise SaldoInsuficiente(\n'No tienes dinero suficiente. Saldo actual: {}'.format(cantidad))\nself.saldo -= cantidad\ndef ingresar(self, cantidad):\nself.saldo += cantidad\n</code></pre> <p>Els test han de cobrir almenys els aspectes seg\u00fcents:</p> <ul> <li>Comprovar que el saldo inicial per defecte \u00e9s 0</li> <li>Comprovar que el saldo inicial s'assigna correctament en cas de ser un enter positiu</li> <li>Comprovar que en ingressar diners, ens torna la suma del saldo anterior m\u00e9s l'ingr\u00e9s</li> <li>Comprovar que en gastar diners, el saldo \u00e9s la resta del saldo anterior i la quantitat treta</li> <li>Comprovar que ens salta una excepci\u00f3 en gastar m\u00e9s del saldo disponible</li> </ul>"},{"location":"unitats/9-Testing-distribucio/tasques/practiques/1-pytest-cartera/#part-2-refactoritzacio","title":"Part 2 - refactoritzaci\u00f3","text":"<p>Refactoritza el codi de <code>cartera.py</code> perqu\u00e8 en cas de rebre un saldo negatiu, el saldo s'assigne a 0. Fes el seu test corresponent per comprovar que passa el nou test i la resta continua passant-los (prova de regressi\u00f3).</p> <ul> <li>Comprovar que si passem al constructor un saldo negatiu, ens posar\u00e0 a 0 el saldo</li> </ul>"},{"location":"unitats/9-Testing-distribucio/tasques/practiques/2-pytest-qt/","title":"Pr\u00e0ctica 2 - pytest-qt","text":""},{"location":"unitats/9-Testing-distribucio/tasques/practiques/2-pytest-qt/#testing-sobre-interficies-qt-amb-pytest-qt","title":"Testing sobre interf\u00edcies Qt amb pytest-qt","text":"<p><code>pytest-qt</code> \u00e9s un plugin de pytest que ens permet escriure proves sobre aplicacions PySide6, PySide2, PyQt5 i PyQt6.</p> <p>Fixa't en el seg\u00fcent exemple:</p> <p>Exemple</p> Python<pre><code>#!/usr/bin/env python\n# coding: utf-8\n\"\"\"Simple PySide6 example\"\"\"\nimport sys\nfrom PySide6.QtWidgets import QApplication, QLabel, QWidget, QPushButton, QFormLayout\nclass HelloWidget(QWidget):\n\"\"\"HelloWidget example\"\"\"\ndef __init__(self):\n\"\"\"Constructor\"\"\"\n# Window\nsuper(HelloWidget, self).__init__()\nself.resize(200, 150)\nself.setWindowTitle(\"PySide6 Demo\")\n# QLabel\nself.greet_label = QLabel(self)\nself.greet_label.setText(\"Hello World!\")\n# QPushButton\nself.button_greet = QPushButton(\"Go\")\nself.button_greet.clicked.connect(self.greet)\n# create layout\nform_layout = QFormLayout()\nform_layout.addRow(self.tr(\"Label\"), self.greet_label)\nform_layout.addRow(self.tr(\"Say hi: \"), self.button_greet)\nself.setLayout(form_layout)\ndef greet(self):\n\"\"\"Say hello\"\"\"\nself.greet_label.setText(\"Hello!\")\nif __name__ == \"__main__\":\napp = QApplication([])\nwindow = HelloWidget()\nwindow.show()\nsys.exit(app.exec())\n</code></pre> Python<pre><code>\"\"\"Test the hello app\"\"\"\nfrom pytestqt.qt_compat import qt_api\nfrom hello import HelloWidget\ndef test_hello(qtbot):\n\"\"\"test clicking changes a label\"\"\"\nwidget = HelloWidget()\nqtbot.addWidget(widget)\n# click in the Greet button and make sure it updates the appropriate label\nwidget.button_greet.click()\nassert widget.greet_label.text() == \"Hello!\"\n</code></pre> <p>Pots obtindre els fonts del seg\u00fcent enlla\u00e7.</p> <p>Per a m\u00e9s informaci\u00f3 visita la web de documentaci\u00f3 de pytest-qt.</p> <p>Donat el seg\u00fcent dialeg, desenvolupa un test per a comprovar que s'inserta un usuari i la seua contrasenya a una base de dades temporal que s'eliminar\u00e0 en acabar la prova.</p> Python<pre><code>import sys\nimport bcrypt\nfrom PySide6.QtWidgets import QApplication, QDialog, QFormLayout, QLineEdit, QPushButton, QLabel, QMainWindow\nfrom PySide6.QtSql import QSqlDatabase, QSqlQuery\nclass CreateUserDialog(QDialog):\ndef __init__(self, database_path):\nsuper().__init__()\nself.user = QLineEdit(self)\nself.user.setPlaceholderText(\"usuari\")\nself.password = QLineEdit(self)\nself.password.setEchoMode(QLineEdit.Password)\nself.password.setPlaceholderText(\"contrasenya\")\nself.btn_create = QPushButton('Create user', self)\nself.layout = QFormLayout(self)\nself.layout.addRow(QLabel(\"Usuari:\"), self.user)\nself.layout.addRow(QLabel(\"Contrasenya:\"), self.password)\nself.layout.addRow(self.btn_create)\nself.btn_create.clicked.connect(self.createUser)\nself.db = QSqlDatabase.addDatabase('QSQLITE')\nself.db.setDatabaseName(database_path)\ndef createUser(self):\nif self.db.open():\nif (self.user.text() != '' and self.password.text() != ''):\nquery = QSqlQuery()\nquery.prepare(\"INSERT INTO users (user, password) VALUES (?, ?)\")\nquery.addBindValue(self.user.text())\nhashed_password = bcrypt.hashpw(self.password.text().encode('utf-8'), bcrypt.gensalt())\nquery.addBindValue(hashed_password.decode('utf-8'))\nquery.exec()\nself.close()\ndef create_database(self):\nif self.db.open():\nquery = QSqlQuery()\nquery.exec_('CREATE TABLE IF NOT EXISTS users (user TEXT, password BLOB)')\n# Insert some users\nusers = [(\"user1\", \"password1\"), (\"user2\", \"password2\")]\nfor user, password in users:\nhashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\nquery.prepare(\"INSERT INTO users (user, password) VALUES (?, ?)\")\nquery.addBindValue(user)\nquery.addBindValue(hashed_password.decode('utf-8'))\nquery.exec_()\ndef main():    \napp = QApplication(sys.argv)\ndatabase_path = os.path.join(os.path.dirname(__file__), 'users.db')\nlogin = CreateUserDialog(database_path)\nlogin.create_database()\nlogin.show()\nsys.exit(app.exec())\nif __name__ == '__main__':\nmain()\n</code></pre>"},{"location":"unitats/9-Testing-distribucio/tasques/practiques/3-tdd-fatorial/","title":"Pr\u00e0ctica 3 - Desenvolupament guiat per proves","text":""},{"location":"unitats/9-Testing-distribucio/tasques/practiques/3-tdd-fatorial/#metodologia-tdd-a-la-funcio-factorial","title":"Metodologia TDD a la funci\u00f3 factorial","text":"<p>Desenvolupa la funci\u00f3 factorial mitjan\u00e7ant la metodologia TDD.</p> <p>Recorda les regles:</p> <ul> <li>Regla 1: Primer el test, despr\u00e9s la codificaci\u00f3.</li> <li>Regla 2: Afegeix el m\u00ednim codi per superar el test</li> <li>Regla 3: No haur\u00edeu de tindre m\u00e9s d'un test no superat a la vegada</li> <li>Regla 4: Escriu codi que passe el test, despr\u00e9s refactoritza el codi.</li> <li>Regla 5: Un test hauria de fallar la primera vegada que ho escrius, en cas contrari pregunta't per qu\u00e8 ho afegeixes.</li> <li>Regla 6: mai refactoritzar sense tests.</li> </ul> <p>Hauria d'incloure almenys les seg\u00fcents proves:</p> <ul> <li>El factorial d'1 \u00e9s 1</li> <li>Llan\u00e7a una excepci\u00f3 TypeError en no rebre un enter</li> <li>Llan\u00e7a una excepci\u00f3 ValueError en rebre un enter negatiu</li> <li>El factorial de 5 \u00e9s 120</li> </ul>"},{"location":"unitats/9-Testing-distribucio/tasques/practiques/4-ci-factorial/","title":"Pr\u00e0ctica 4 - Integraci\u00f3 continua","text":""},{"location":"unitats/9-Testing-distribucio/tasques/practiques/4-ci-factorial/#integracio-continua-amb-github-actions","title":"Integraci\u00f3 continua amb Github Actions","text":"<p>Utilitzant <code>github actions</code> aplica integraci\u00f3 continua al projecte de la funci\u00f3 factorial de la pr\u00e0ctica anterior.</p>"},{"location":"unitats/9-Testing-distribucio/tasques/practiques/5-executable-instalador/","title":"Pr\u00e0ctica 5 - Instal\u00b7lador","text":""},{"location":"unitats/9-Testing-distribucio/tasques/practiques/5-executable-instalador/#installador","title":"Instal\u00b7lador","text":"<ul> <li> <p>Projectes PySide6:</p> <p>Construeix un instal\u00b7lador del teu projecte per al teu sistema operatiu:</p> <ul> <li>Linux: aplica l'activitat resolta 5 per a crer un instal\u00b7lador.</li> <li>Windows: aplica l'activitat resolta 4 per a crear un executable per a Windows. Posteriorment utilitza InstallForge per crear un instal\u00b7lador.</li> </ul> </li> <li> <p>Projectes Flet:</p> <p>Construeix una aplicaci\u00f3 portable del teu projecte per al teu sistema operatiu i per a un dispositiu Android segons s'explica a la documantaci\u00f3 de Flet.</p> </li> </ul>"},{"location":"unitats/9-Testing-distribucio/teoria/1-metodologies/","title":"1 - Metodologies de desenvolupament de software","text":""},{"location":"unitats/9-Testing-distribucio/teoria/1-metodologies/#metodologies-en-el-desenvolupament-de-programari","title":"Metodologies en el desenvolupament de programari.","text":"<p>Les metodologies \u00e0gils van n\u00e9ixer pels volts de l'any 2000 per donar resposta als problemes que ocasionaven les metodologies tradicionals de desenvolupament d'aplicacions. El principal problema era la baixa qualitat de la soluci\u00f3 i el cost\u00f3s que resultava el manteniment, ja que el lliurament del producte es produ\u00efa en etapes molt avan\u00e7ades del desenvolupament.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/1-metodologies/#metodologies-tradicionals","title":"Metodologies tradicionals","text":"<p>Com el seu nom indica, s\u00f3n les metodologies utilitzades durant molt de temps. El seu prop\u00f2sit principal \u00e9s establir unes directrius r\u00edgides perqu\u00e8 el desenvolupament del projecte sigui previsible. A causa d'aix\u00f2, s\u00f3n processos seq\u00fcencials on les estimacions tindran molta import\u00e0ncia.</p> <p>Una de les metodologies m\u00e9s utilitzades en aquest tipus \u00e9s el desenvolupament en cascada. Consta normalment de cinc fases:</p> <ol> <li>An\u00e0lisi de requisits: requisits que ha de complir. Han de ser molt ben definits, ja que no s'esperen que canvi\u00efn al llarg del proc\u00e9s de desenvolupament. \u00c9s per aix\u00f2 que d'aquesta part se n'encarreguen els desenvolupadors m\u00e9s experimentats.</li> <li>Disseny de la soluci\u00f3: com ser\u00e0 la nostra soluci\u00f3 per complir els requisits marcats.</li> <li>Implementaci\u00f3: codificaci\u00f3 del disseny utilitzant un llenguatge o unes tecnologies concretes.</li> <li>Proves: comprovaci\u00f3 que es compleix els requisits estipulats.</li> <li>Manteniment: modificaci\u00f3 dels problemes que sorgeixin.</li> </ol> <p> </p> Metodologies tradicionals"},{"location":"unitats/9-Testing-distribucio/teoria/1-metodologies/#metodologies-agils","title":"Metodologies \u00e0gils","text":"<p>Les metodologies \u00e0gils s\u00f3n les que es caracteritzen per adaptar-se als canvis que es puguin produir durant el desenvolupament de la soluci\u00f3. S\u00f3n molt m\u00e9s flexibles que les metodologies tradicionals i es basen en 12 principis recollits alEl Manifest Agile, agrupats en 4 valors fonamentals:</p> <ol> <li> <p>Individus i interaccions sobre processos i eines.     Es prioritzen els membres dels equips i les decisions que puguin prendre front a processos preestablerts i eines de control sobre el compliment d'aquests processos. L'\u00e8xit dep\u00e8n molt m\u00e9s de l'equip que dels processos i les eines utilitzats.</p> </li> <li> <p>Programari que s'executa amb una \u00e0mplia documentaci\u00f3.     Es prioritza tenir programari funcionant, desplegat, sense errors i podent ser utilitzats, abans que la documentaci\u00f3, que nom\u00e9s ser\u00e0 \u00fatil si aporta valor a la consecuci\u00f3 de la finalitat esmentada.</p> </li> <li> <p>Col\u00b7laboraci\u00f3 amb el client sobre negociaci\u00f3 contractual.     Es prioritza el contacte continu amb el client, perqu\u00e8 provi el programari que s'est\u00e0 desenvolupant i produeixi uncomentaris, que pot introduir nous canvis en el projecte, abans que uns requisits est\u00e0tics que cal complir.</p> </li> <li> <p>Resposta davant del canvi sobre seguir un pla.     Millora m\u00e9s el programari ladaptaci\u00f3 a un canvi inesperat que la capacitat de seguir un pla establert que estar\u00e0 no alineat amb les noves necessitats aparegudes.</p> </li> </ol> <p> </p> Els 12 principis de les metodologies \u00e0gils <p>Dins la filosofia de metodologies \u00e0gils, les tres m\u00e9s utilitzades s\u00f3n:</p>"},{"location":"unitats/9-Testing-distribucio/teoria/1-metodologies/#scrum","title":"Scrum:","text":"<p>\u00c9s una metodologia que permet realitzar projectes m\u00e9s orientats a les necessitats de l\u2019empresa i dels clients, de manera m\u00e9s eficient i en un menor termini de temps. Scrum es basa en una iteraci\u00f3 cont\u00ednua, on es realitzen petites activitats per a construir un producte o projecte de forma incremental. Els components d\u2019un equip realitzen activitats de forma iterativa i incremental per desenvolupar el projecte.</p> <ul> <li>Planificaci\u00f3 de la iteraci\u00f3: Es defineixen les tasques a realitzar en l\u2019iteraci\u00f3 actual.</li> <li>Llista de tasques (sprint backlog): Es crea una llista de tasques que s\u2019han de completar durant l\u2019iteraci\u00f3.</li> <li>Estimaci\u00f3 de recursos i temps: Es fa una estimaci\u00f3 dels recursos necessaris i del temps que es necessitar\u00e0 per completar cada tasca.</li> <li>Assignaci\u00f3 de tasques: Es reparteixen les tasques entre els membres de l\u2019equip.</li> <li>Reunions di\u00e0ries (Scrum daily meetings): L\u2019equip es reuneix di\u00e0riament per discutir el progr\u00e9s i planificar el treball del dia.</li> </ul> <p> </p> Metodologia scrum"},{"location":"unitats/9-Testing-distribucio/teoria/1-metodologies/#xp-extreme-programming-o-programacio-extrema","title":"XP (Extreme Programming o programaci\u00f3 extrema)","text":"<p>Aquesta metodologia se centra en la millora de la qualitat del software i la capacitat de resposta a les necessitats canviants del client. Algunes de les seves pr\u00e0ctiques m\u00e9s conegudes s\u00f3n la programaci\u00f3 en parelles, el desenvolupament orientat a proves i el refactoring.</p> <p> </p> Programaci\u00f3 extrema"},{"location":"unitats/9-Testing-distribucio/teoria/1-metodologies/#kanban","title":"Kanban","text":"<p>Aquesta metodologia es basa en la gesti\u00f3 visual del treball. El treball es divideix en tasques que es representen visualment en un tauler Kanban, permetent a l\u2019equip veure l\u2019estat de totes les tasques en qualsevol moment.</p> <p> </p> Kanban"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/","title":"2 - Tipus de proves","text":""},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#tipus-de-proves-daplicacions","title":"Tipus de proves d'aplicacions","text":""},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#que-son-les-proves-de-programari","title":"Qu\u00e8 s\u00f3n les proves de programari?","text":"<p>Qualsevol tipus daplicaci\u00f3 necessita ser provada per assegurar uns m\u00ednims de qualitat. Aquesta \u00e9s una etapa fonamental en el proc\u00e9s de desenvolupament, tant en alguns casos que pot arribar a suposar entre el 15 i el 25% de l'esfor\u00e7 total invertit en el desenvolupament de solucions. \u00c9s un proc\u00e9s que ens permet verificar i validar la funcionalitat d'un programa o aplicaci\u00f3 de programari amb l'objectiu de garantir, no nom\u00e9s que est\u00e0 lliure de defectes, sin\u00f3 que a m\u00e9s compleix una s\u00e8rie de requisits establerts pr\u00e8viament a les especificacions del producte. Implica l'execuci\u00f3, ja sigui manual o automatitzada, d'una s\u00e8rie de proves que avalu\u00efn una o diverses propietats del programari. Aquesta etapa de desenvolupament s'ha de fer en paral\u00b7lel a la codificaci\u00f3 per evitar problemes posteriors que s\u00f3n molt m\u00e9s costosos de reparar. \u00c9s en aquesta primera etapa de codificaci\u00f3 quan s'introdueixen la majoria de fallades, per\u00f2 moltes vegades no es detecten fins a etapes m\u00e9s avan\u00e7ades, suposant un problema de costos, ja que com m\u00e9s avan\u00e7at estigui l'estat del projecte, m\u00e9s esfor\u00e7 econ\u00f2mic, de temps i de recursos sol costar.</p> <p> </p> Errors introdu\u00efts, errors trobats i cost de reparaci\u00f3"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#objectius-de-les-proves-de-programari","title":"Objectius de les proves de programari","text":"<p>Entre els objectius principals de l'etapa de testing, podem destacar alguns dels seg\u00fcents:</p> <ul> <li>Detectar i corregir errors en etapes primerenques del desenvolupament.</li> <li>Assegurar la funcionalitat correcta del producte.</li> <li>Proporcionar qualitat a la soluci\u00f3 adoptada.</li> <li>Proveir confian\u00e7a en laplicaci\u00f3 desenvolupada.</li> <li>Assegureu-vos que les modificacions no introdueixin errors nous.</li> <li>Complir els requisits del negoci.</li> <li>Complir els requisits i la satisfacci\u00f3 de lusuari.</li> </ul>"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#tipus-de-proves","title":"Tipus de proves","text":"<p>Les proves de programari es classifiquen generalment en dues categories principals: proves funcionals i proves no funcionals.</p> <ul> <li> <p>Proves funcionals: Les proves funcionals es duen a terme per comprovar la funcionalitat i la usabilitat principalment. Garanteixen o validen que les caracter\u00edstiques i funcionalitats del programari es comporten segons les especificacions, que solen estar en un document anomenat Software Requirement Specification (SRS). Tot i que hi ha molts tipus de proves funcionals per determinar diferents caracter\u00edstiques del programari, ens centrarem en les m\u00e9s \u00fatils i utilitzades, entre les quals destaquem: les proves de fum, proves unit\u00e0ries, proves d'integraci\u00f3, proves de regressi\u00f3 i proves d'acceptaci\u00f3.</p> </li> <li> <p>Proves no funcionals o proves de rendiment: Les proves no funcionals difereixen de les funcionals en qu\u00e8 les funcions a considerar es proven en execuci\u00f3 del sistema, podent avaluar caracter\u00edstiques com ara el rendiment, la fiabilitat, la usabilitat, l'escalabilitat, etc. Normalment es duen a terme mitjan\u00e7ant eines i solucions dautomatitzaci\u00f3.</p> </li> </ul>"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#proves-funcionals","title":"Proves funcionals","text":"<p>Tot i que hi ha m\u00e9s tipus de proves, veurem a continuaci\u00f3 els cinc tipus de proves que es poden considerar indispensables en un projecte de programari.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#proves-unitaries","title":"Proves unit\u00e0ries","text":"<p>S\u00f3n proves realitzades pels propis codificadors i executades sobre els elements l\u00f2gics m\u00ednims del sistema, normalment sobre funcions o classes. Aix\u00f2 ens porta a refactoritzar el codi, \u00e9s a dir, reescriure sense canviar-ne la funcionalitat, en etapes primerenques del desenvolupament. Redueixen dr\u00e0sticament els problemes i temps dedicats a la integraci\u00f3 i permeten provar o depurar el codi sense necessitat de disposar del sistema complet, acotant molt els fragments a reescriure.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#proves-dintegracio-de-components","title":"Proves d'integraci\u00f3 de components","text":"<p>Aquestes proves permeten identificar com funciona el sistema en unir els components de les proves unit\u00e0ries. Que els components funcionin de manera separada no garanteix que ho facin en unir-se entre ells. Tenen com a objectiu trobar defectes en les comunicacions entre les unitats integrades i validar que el programari es comporti de manera esperada entre els diferents components.</p> <p>S'implementen despr\u00e9s de les proves unit\u00e0ries, provant que la integraci\u00f3 de cada part amb les parts confrontants funciona correctament, validant aix\u00ed el comportament dels m\u00f2duls en conjunt.</p> <p>Un exemple d'aquest tipus de proves seria que un usuari en fer login sigui dirigit a la pantalla inicial. D'una banda s'hauria provat el login i de l'altra la pantalla d'inici, es comproven ara en conjunt, \u00e9s a dir, que en fer login es dirigeix \u200b\u200ba la pantalla corresponent i funciona amb l'usuari loguejat.</p> <p>Les bones pr\u00e0ctiques de desenvolupament de qualitat de programari indiquen que aquestes proves, a difer\u00e8ncia de les unit\u00e0ries que s\u00f3n realitzades pels desenvolupadors, han de ser executades per equips externs al desenvolupament, per evitar el biaix que es pogu\u00e9s produir.</p> <p> </p> Proves d'integraci\u00f3"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#proves-de-fum","title":"Proves de fum","text":"<p>Es realitzen a les fases inicials delprovant, i permeten determinar si les parts principals de l'aplicaci\u00f3 estan a punt per a m\u00e9s proves. Aquestes parts poden ser aspectes cr\u00edtics com ara l'inici de sessi\u00f3 o el registre d'usuaris.</p> <p>El resultat de lesprova de fum o proves de fum permet decidir si el programari est\u00e0 llest per afrontar un cicle de proves m\u00e9s exhaustives i costoses, o si cal fer algunes millores abans de passar a la seg\u00fcent fase de testeig. Per dur a terme aquest tipus de proves, cal executar un subconjunt dels casos de prova definits, els quals recorren les funcionalitats cr\u00edtiques i b\u00e0siques del sistema.</p> <p>Solen representar al voltant d'un 5% del total de proves que cal aplicar, i en cas de no passar-les, la nostra aplicaci\u00f3 ha de tornar a l'equip de desenvolupament per corregir els errors o fins i tot comen\u00e7ar una nova aplicaci\u00f3 des de zero.</p> <p> </p> Proves de fum"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#proves-de-regressio","title":"Proves de regressi\u00f3","text":"<p>S\u00f3n les m\u00e9s utilitzades durant la fase de desenvolupament del producte, ja que permeten verificar que els canvis, ja sigui per la incorporaci\u00f3 de noves funcionalitats o la reparaci\u00f3 d'errors, no fan malb\u00e9 parts que anteriorment funcionaven. Normalment s\u00f3n proves automatitzades que es reutilitzen un cop introdu\u00efts els canvis. Aix\u00f2 no obstant, se sol fer un mix si s'han introdu\u00eft grans modificacions o si el programari es troba en una versi\u00f3 inestable. Les t\u00e8cniques aplicades a aquest tipus de tests poden ser, retestejar-ho tot, seleccionar uns casos en concret o prioritzar casos concrets.</p> <p> </p> Proves de regressi\u00f3"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#proves-dacceptacio","title":"Proves d'acceptaci\u00f3","text":"<p>Pertanyen a la fase final de testing i permeten a l'usuari final validar que el programari compleix les especificacions executant-lo en un entorn real. S\u00f3n executades de forma manual sense seguir un procediment concret, sin\u00f3 que l'usuari, juntament amb un analista de proves, va explorant l'aplicaci\u00f3 i provant-ne la funcionalitat pas a pas.</p> <p> </p> Proves acceptaci\u00f3"},{"location":"unitats/9-Testing-distribucio/teoria/2-tipus-proves/#proves-no-funcionals","title":"Proves no funcionals","text":"<p>Les proves no funcionals no solen dur-les a terme els equips de desenvolupament, sin\u00f3 els equips d'implantaci\u00f3 d'aplicacions, que seran els encarregats de, a partir del codi generat per l'equip de desenvolupament, implantar l'aplicaci\u00f3 per ser utilitzada per l'usuari final . Les principals s'enumeren a continuaci\u00f3, encara que les que realment interessen al programador s'han vist a l'apartat anterior:</p> <ul> <li>Proves de rendiment (Prova de perman\u00e8ncia): Avalua el rendiment i la velocitat de resposta de l'aplicaci\u00f3 sota una c\u00e0rrega de treball normal.</li> <li>Prova de c\u00e0rrega (Load testing): Prova el comportament d'unaaplicaci\u00f3 sota un gran volum de treball, superior a la c\u00e0rrega normal.</li> <li>Proves d'estr\u00e8s (Stress Testing): Determinen si el programari continuar\u00e0 funcionant sota una c\u00e0rrega extrema.</li> <li>Proves de volum (Volume Testing): Prova el rendiment del programari carregant quan processa grans volums de dades.</li> <li>Proves de seguretat (Security Testing): Verifiquen si el sistema est\u00e0 protegit contra atacs sobtats o deliberats de fonts internes i externes. Cada cop van adquirint m\u00e9s import\u00e0ncia, a causa de la necessitat de protegir la informaci\u00f3 per part de les empreses i de l'auge dels ciberatacs.</li> <li>Proves de compatibilitat (Compatibility Testing): Comproveu si l'aplicaci\u00f3 \u00e9s compatible amb diferents entorns i sistemes.</li> <li>Proves d'instal\u00b7laci\u00f3 (Install Testing): Verifica el comportament correcte del programari despr\u00e9s de la instal\u00b7laci\u00f3.</li> <li>Proves de recuperaci\u00f3 (Recovery Testing): Determina si un sistema es pot recuperar despr\u00e9s d'una fallada o per contra no ho fa.</li> <li>Proves de confian\u00e7a (Reliability Testing): Garanteix que el programari funciona de manera consistent realitzant una tasca sense fallar dins un per\u00edode espec\u00edfic.</li> <li>Proves d'usabilitat (Usability Testing): Testegen la facilitat d'\u00fas del programari. Aquest tipus de proves \u00e9s molt important tenir-les en compte a lhora de desenvolupar la interf\u00edcie gr\u00e0fica dusuari.</li> <li>Proves de conformitat (Compliance Testing): Determina si un programa o sistema de programari compleix un conjunt definit d'est\u00e0ndards interns o externs abans del llan\u00e7ament a producci\u00f3.</li> </ul>"},{"location":"unitats/9-Testing-distribucio/teoria/3-TDD/","title":"3 - Desenvolupament basat en proves","text":""},{"location":"unitats/9-Testing-distribucio/teoria/3-TDD/#desenvolupament-guiat-per-proves","title":"Desenvolupament guiat per proves","text":""},{"location":"unitats/9-Testing-distribucio/teoria/3-TDD/#que-es-el-desenvolupament-guiat-per-proves","title":"\u00bfQu\u00e8 \u00e9s el desenvolupament guiat per proves?","text":"<p>El terme Test Driven Development (TDD) o desenvolupament guiat per proves \u00e9s un enfocament de desenvolupament de programari en qu\u00e8 es desenvolupen proves per especificar i validar la implementaci\u00f3 de la nostra funcionalitat. El proc\u00e9s seguit pels desenvolupadors \u00e9s el seg\u00fcent:</p> <ol> <li>Es creen primer els casos de prova per a cada funcionalitat i es verifica que la prova falla. - Roig</li> <li>Posteriorment s'escriu el codi m\u00ednim que ens permet passar la prova, sense tenir en compte la funcionalitat. - Verd</li> <li>Es reescriu el codi (refactoritzaci\u00f3) per implementar la funcionalitat desitjada, tenint en compte que siga el m\u00e9s llegible i eficient possible, i comprovant que la prova continua donant un resultat satisfactori. - Refactor</li> </ol> <p>Aquest proc\u00e9s s'anomena comunament Red-Green-Refactor.</p> <p> </p> Testing Software Development <p>Aix\u00f2 fa que el codi siga tan simple com siga possible i la quantitat d'errors que pugui contenir sigui m\u00ednima. A m\u00e9s, aquesta forma de treballar aporta diverses millores, com ara evitar la duplicaci\u00f3 de codi, millorar el manteniment dels programes, augmentar la qualitat del codi i reduir la documentaci\u00f3 a desenvolupar.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/3-TDD/#perque-tdd","title":"Perqu\u00e8 TDD?","text":"<p>La major cr\u00edtica a aquest tipus d'enfocament \u00e9s el temps que es dedica a escriure les proves, que finalment no formaran part de la soluci\u00f3 final. Tot i aix\u00f2, aquest sobreesfor\u00e7 inicial, aporta una s\u00e8rie d'avantatges sobre el nostre desenvolupament:</p> <ul> <li>Desenvolupar les proves implica que s'hagin de con\u00e8ixer les entrades i les sortides perqu\u00e8 la funci\u00f3 s'executi correctament: TDD ens obliga a pensar en la interf\u00edcie de l'aplicaci\u00f3 abans de comen\u00e7ar a codificar. Aix\u00f2 tamb\u00e9 ajuda a la integraci\u00f3 de les diferents parts.</li> <li>M\u00e9s confian\u00e7a en el codi: en tenir proves automatitzades per a totes les funcions, els desenvolupadors se senten m\u00e9s segurs si han de modificar la funcionalitat ja existent o si han de desenvolupar noves funcions. Provar tot el sistema per veure si els nous canvis van trencar el que existia abans es torna una tasca trivial.</li> <li>TDD no elimina tots els errors, per\u00f2 la probabilitat de trobar-los \u00e9s menor: en intentar corregir un error, podeu escriure una prova per assegurar-vos que se solucioni quan acabi la codificaci\u00f3.</li> <li>Les proves es poden utilitzar com a documentaci\u00f3 addicional. A mesura que escrivim les entrades i sortides d'una funci\u00f3, un desenvolupador pot veure la prova i veure com cal utilitzar la seva interf\u00edcie.</li> </ul>"},{"location":"unitats/9-Testing-distribucio/teoria/3-TDD/#cobertura-de-codi","title":"Cobertura de codi","text":"<p>La cobertura de codi \u00e9s una m\u00e8trica que mesura la quantitat de codi font que cobreix el nostre pla de prova. Una cobertura del 100% vol dir que tot el codi que ha escrit ha estat provat per almenys una proves. S'utilitzen diferents m\u00e8triques per obtenir la cobertura, algunes de les m\u00e9s utilitzades s\u00f3n:</p> <ul> <li>Nombre de l\u00ednies de codi provades</li> <li>Nombre de funcions de codi provades</li> <li>N\u00famero branques o camins provats (un cam\u00ed \u00e9s la ruta per on pot passar l'execuci\u00f3 del nostre codi, per exemple una sent\u00e8ncia if seria una bifurcaci\u00f3 que crea dos camins diferents)</li> </ul> <p>Una cobertura de codi alta no significa que l'aplicaci\u00f3 estigui lliure d'errors ja que \u00e9s probable que el codi no hagi estat provat per a tots els escenaris possibles.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/3-TDD/#proves-unitaries-i-dintegracio","title":"Proves unit\u00e0ries i dintegraci\u00f3","text":"<p>En desenvolupar projectes grans, el nombre de funcions i components a desenvolupar augmenta considerablement. Si b\u00e9 les proves unit\u00e0ries ens verifiquen que cadascun d'aquests components es comporta com cal individualment, les proves d'integraci\u00f3 ho fan quan els components es posen a treballar junts.</p> <p>TDD requereix que comencem escrivint una prova que falli, no ens obliga que el tipus de prova hagi de ser de tipus unitari. La nostra primera prova pot ser una prova dintegraci\u00f3 si aix\u00ed ho considerem millor.</p> <p>Si comencem per escriure una prova dintegraci\u00f3, aquesta fallar\u00e0 fins que cada component estigui desenvolupat de forma individual, obligant al desenvolupador a escriure les proves unit\u00e0ries corresponents per a aquests components. Quan es refactorizi el codi per superar la prova dintegraci\u00f3, si est\u00e0 dissenyada correctament, estarem complint amb un requisit dusuari per al nostre sistema.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/3-TDD/#tdd-i-metodologies-agils","title":"TDD i metodologies \u00e0gils","text":"<p>El desenvolupament guiat per proves s'ajusta de forma \u00f2ptima a les metodologies \u00e0gils, on el principal objectiu \u00e9s oferir actualitzacions incrementals a una soluci\u00f3 que va creixent de la manera m\u00e9s r\u00e0pida possible i on la soluci\u00f3 interm\u00e8dia t\u00e9 un alt grau de qualitat. La certesa que el codi compleix les proves unit\u00e0ries i d'integraci\u00f3 suposa que els problemes a l'entorn de producci\u00f3 seran molt menors.</p> <p>TDD tamb\u00e9 s'ajusta perfectament a altres eines utilitzades en les metodologies \u00e0gils, com el pair programing programaci\u00f3 per parelles. Per exemple, un dels desenvolupadors es podria dedicar a escriure les proves i l'altre a la refactoritzaci\u00f3 per superar aquestes proves. Aquests rols es poden intercanviar de manera queambdues parts estan centrades en la part que estan fent i alhora revisen la feina de l'altra persona implicada, aportant beneficis per a tots dos i per al projecte.</p> <p>El desenvolupament guiat pel comportament, o BDD, \u00e9s un refinament de TDD que t\u00e9 com a objectiu optimitzar el desenvolupament a trav\u00e9s de la reducci\u00f3 de les dificultats de comunicaci\u00f3, creant una millor comprensi\u00f3 del client i permetent una comunicaci\u00f3 continuada entre l'equip de desenvolupament i l'usuari final. \u00c9s una manera de combinar els requisits amb el codi i us permet comprendre el comportament del sistema des de la perspectiva comercial/de l'usuari final.</p> <p> </p> Behavior Driven Development <p>La majoria d'empreses que tenen implementades les metodologies \u00e0gils fan \u00fas de les t\u00e8cniques de desenvolupament guiat per proves.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/4-cd-ci/","title":"4 - Integraci\u00f3 i entrega/desplegament continu","text":""},{"location":"unitats/9-Testing-distribucio/teoria/4-cd-ci/#integracio-i-entregadesplegament-continus-cicd","title":"Integraci\u00f3 i entrega/desplegament continus (CI/CD)","text":""},{"location":"unitats/9-Testing-distribucio/teoria/4-cd-ci/#devops","title":"DevOps","text":"<p>El terme DevOps prov\u00e9 de les paraules angleses development  (desenvolupament) i operations (operacions) i fa refer\u00e8ncia a la uni\u00f3 de les diferents persones, processos i tecnologies per oferir solucions millors de manera m\u00e9s r\u00e0pida i eficient.</p> <p>Anteriorment, cada persona de l'equip exercia un rol diferent de manera a\u00efllada. Cadascuna controlava de la seva faceta per\u00f2 no sabia pr\u00e0cticament res de la resta de passos, de qu\u00e8 s'encarregaven altres persones de l'equip. Amb la implantaci\u00f3 de la cultura DevOps, cadascun dels rols est\u00e0 implicat m\u00e9s o menys en cadascuna de les fases del cicle de vida d'una aplicaci\u00f3.</p> <p>Si ens fixem en la l\u00ednia de DevOps disponible a l'enlla\u00e7 del mapa de pr\u00e0ctiques \u00e0gils, veiem que aquesta ruta, ens fa refer\u00e8ncia a quatre conceptes:</p> <ul> <li>Control de versions</li> <li>Construccions autom\u00e0tiques</li> <li>Integraci\u00f3 cont\u00ednua</li> <li>Desplegament continu</li> </ul> <p>El terme de control de versions ja sabem qu\u00e8 \u00e9s i el de construccions autom\u00e0tiques l'estudiarem amb m\u00e9s profunditat a l'apartat seg\u00fcent. En aquest apartat ens centrarem en qu\u00e8 s\u00f3n la integraci\u00f3 i el desplegament continus.</p> <p></p> <p>Refer imatge (traduccions: planificar, monitoritzar, operar, desplegar, llan\u00e7ar, proves cont\u00ednues, construir, codificar)</p>"},{"location":"unitats/9-Testing-distribucio/teoria/4-cd-ci/#que-esla-integracio-continua-ci","title":"Qu\u00e8 \u00e9sla integraci\u00f3 cont\u00ednua (CI)","text":"<p>La integraci\u00f3 continua (CI: continuous integration) \u00e9s una pr\u00e0ctica de desenvolupament de programari on cada membre d'un equip integra el treball amb la resta de manera molt freq\u00fcent. Aquesta integraci\u00f3 pot variar, per\u00f2 se sol produir, almenys, una vegada al dia. Cada integraci\u00f3 que es produeix, es verifica mitjan\u00e7ant una construcci\u00f3 i execuci\u00f3 de les proves definides, per detectar errors com m\u00e9s aviat millor. Tant la construcci\u00f3 com les proves es fan de manera automatitzada, de manera que el temps que es triga a fer una integraci\u00f3 sol ser d'uns minuts.</p> <p></p> <p>El codi font s'allotja en un dip\u00f2sit compartit per tots els membres de l'ordinador. Per treballar sobre aquest desenvolupament, cada desenvolupador obtindr\u00e0 una c\u00f2pia local sobre la qual far\u00e0 les seves modificacions i proves. Un cop verificat el codi en local, aquest s'intentar\u00e0 integrar al repositori com\u00fa ja amb els canvis introdu\u00efts. Una integraci\u00f3 satisfact\u00f2ria ens deixar\u00e0 en situaci\u00f3 de passar a les etapes de desplegament continu seg\u00fcents.</p> <p></p> <p>En cas que la integraci\u00f3 no sigui satisfact\u00f2ria, el sistema bloquejar\u00e0 el progr\u00e9s cap a etapes posteriors, de manera que el problema no arriba arrossegat fins a lusuari final. Quan aquesta situaci\u00f3 es produeix, es rebr\u00e0 una notificaci\u00f3 que la integraci\u00f3 ha fallat, de manera que el problema es resoldr\u00e0 de forma gaireb\u00e9 immediata, en ser la detecci\u00f3 tan primerenca.</p> <p></p> <p>La integraci\u00f3 cont\u00ednua ve necess\u00e0riament acompanyada de transpar\u00e8ncia, ja que tots els membres de l'equip participen del proc\u00e9s, i l'estat d'aquest \u00e9s normalment reportat a tots ells. Aix\u00f2 comporta que quan salta una alerta provocada per algun error a la integraci\u00f3, tots els membres de l'equip s\u00f3n informats i poden col\u00b7laborar per tornar a l'estat satisfactori del proc\u00e9s.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/4-cd-ci/#entrega-i-desplegament-continu-cd","title":"Entrega i desplegament continu (CD)","text":"<p>El lliurament continu (CD) lliurament continu, es refereix al proc\u00e9s de preparar el llan\u00e7ament de l'aplicaci\u00f3, perqu\u00e8 estigui disponible i pugui ser utilitzada per l'usuari final. Si a m\u00e9s s'inclou un proc\u00e9s de desplegament autom\u00e0tic de l'aplicaci\u00f3, estem davant d'un proc\u00e9s dedesplegament continu (CD) o desconnecteu cont\u00ednuament.</p> <p>Fins i tot despr\u00e9s d'haver provat els nostres desenvolupaments amb \u00e8xit, no podem estar segurs al 100% que funcionar\u00e0 en producci\u00f3. Per aix\u00f2, a la majoria de desplegaments, s'introdueix un pas intermedi entre la integraci\u00f3 i la distribuci\u00f3 o desplegament final en un entorn que imiti al m\u00e0xim l'entorn final. \u00c9s freq\u00fcent referir-se a aquests entorns com DEV, PRE de desenvolupament, o de proves i PRO, PROD o de producci\u00f3 respectivament. Si a m\u00e9s, l'equip local es mant\u00e9 el m\u00e9s semblant possible a aquests entorns, reduirem les anomalies en desplegar les nostres aplicacions.</p> <p></p>"},{"location":"unitats/9-Testing-distribucio/teoria/4-cd-ci/#flux-de-cicd","title":"Flux de CI/CD","text":"<p>Els processos de CI i CD normalment estan presentats com una seq\u00fc\u00e8ncia cont\u00ednua de passos o flux, on el nou codi flueix a trav\u00e9s d'una s\u00e8rie de passos o etapes (contrucci\u00f3, proves, posada en producci\u00f3...) i es publica com una nova versi\u00f3 a l'extrem final.</p> <p></p> <p>Cada etapa se sol representar com una unitat l\u00f2gica del proc\u00e9s que es poden executar seq\u00fcencialment i en alguns casos en paral\u00b7lel, agilitzant encara m\u00e9s el proc\u00e9s global.</p> <p></p> <p>Totes les empreses competitives practiquen avui dia la integraci\u00f3 i entrega/desplegaments continus.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/","title":"5 - Empaquetat i distribuci\u00f3 d'aplicacions","text":""},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#empaquetament-i-distribucio-d-aplicacions","title":"Empaquetament i distribuci\u00f3 d\u00b4aplicacions.","text":"<p>L'empaquetat ens serveix per ajuntar totes les parts d'un programari i tractar-les com a tot. Aix\u00ed doncs, tamb\u00e9 permet que sigui distribu\u00eft de forma c\u00f2moda com una \u00fanica entitat i permeti la instal\u00b7laci\u00f3 o execuci\u00f3 de les aplicacions en ordinadors dels usuaris finals.</p> <p>Els paquets contenen tots els fitxers necessaris per a la instal\u00b7laci\u00f3 o execuci\u00f3 del codi, fitxers de dades, fitxers executables binaris, etc... A m\u00e9s tamb\u00e9 contenen informaci\u00f3 com el nom de l'aplicaci\u00f3, la descripci\u00f3, els autors, les versions i els requisits. Aquesta informaci\u00f3 es diu en moltes ocasions elmanifest\u00a0i \u00e9s de gran ajuda als desenvolupadors i els administradors de sistemes.\u00a0</p> <p>Hi ha diferents empaquetats segons el sistema operatiu que s'estigui utilitzant.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#empaquetat-de-programari-a-windows","title":"Empaquetat de programari a Windows","text":"<p>Per al sistema operatiu Windows, l'est\u00e0ndards de facto per a l'empaquetat i la distribuci\u00f3 de paquets \u00e9s elformat .msi'\u00a0(arxius Windows Installer, anteriorment i d'aqu\u00ed el nom, Microsoft Installers).Windows Installer', \u00e9s un servei que ve preinstal\u00b7lat en totes les versions de Windows com una API per crear, mantenir, reparar i desinstal\u00b7lar programari. Aquest tipus de fitxers s\u00f3n una mena de base de dades que contenen tota la informaci\u00f3 necess\u00e0ria per dur a terme tot el proc\u00e9s d'instal\u00b7laci\u00f3 mitjan\u00e7ant una interf\u00edcie d'instal\u00b7laci\u00f3. No es tracta nom\u00e9s de posar certs fitxers en una ruta concreta, sin\u00f3 a m\u00e9s registrar components, generar una seq\u00fc\u00e8ncia de desinstal\u00b7laci\u00f3, editar les entrades al registre de Windows, ...</p> <p>A m\u00e9s, en infinitat d'ocasions trobem que per instal\u00b7lar un programari necessitem executar unfitxer .exe'. Aquest tipus de fitxers s\u00f3nfitxers d'instal\u00b7laci\u00f3 executables'. Hi ha diversos tipus deex':</p> <ul> <li>Instal\u00b7laci\u00f3 de llan\u00e7adors obootstrappers'\u00a0que en realitat     s\u00f3n arxius comprimits amb un arxiu Windows Installer al seu interior     que sexecuta despr\u00e9s del seu llan\u00e7ament.</li> <li>Exe personalitzats no-MSI, que s\u00f3n fitxers executables que     s'encarreguen de la instal\u00b7laci\u00f3 sense utilitzar l'API, \u00e9s a dir,     utilitzen el seu propi sistema d'instal\u00b7laci\u00f3. Aquests, es fan     servir una sola vegada per instal\u00b7lar un altre programa.</li> <li>Fitxers .exe portables o PE (Portable Executable), s\u00f3n fitxers .exe     que contenen tot el necessari per a l'execuci\u00f3 del programa, aix\u00ed     que no cal cap tipus d'instal\u00b7laci\u00f3. Nom\u00e9s cal executar aquests     fitxers perqu\u00e8 l'aplicaci\u00f3 funcioni correctament.</li> </ul> <p>Hi ha alguns avantatges i desavantatges dutilitzar cadascun daquests tipus. El principal desavantatge d'utilitzar un MSI per a una instal\u00b7laci\u00f3 \u00e9s que no permet el seu \u00fas de forma paral\u00b7lela, aix\u00ed que nom\u00e9s podrem realitzar una instal\u00b7laci\u00f3/desinstal\u00b7laci\u00f3 en un moment donat, i haurem d'esperar que acabi per instal\u00b7lar/desinstal\u00b7lar el programa seg\u00fcent. En canvi, els principals avantatges dels MSI s\u00f3n que es crea un punt de restauraci\u00f3 autom\u00e0tic en instal\u00b7lar l'aplicaci\u00f3, permetent la tornada a l'estat anterior de la instal\u00b7laci\u00f3 si aix\u00ed ho desitgem. A m\u00e9s, permeten les instal\u00b7lacions desateses, sense que la intervenci\u00f3 de l'usuari sigui necess\u00e0ria. Aquesta caracter\u00edstica fa que siguin molt populars a entorns empresarials.</p> <p>Per crear paquets d'instal\u00b7laci\u00f3, hi ha multitud de programes, entre els quals podem destacar WiX Toolset, Visual Studio Installer Project, Orca, IExpress, InstallShield o InnoSetup.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#empaquetat-tradicional-de-programari-a-linux","title":"Empaquetat \"tradicional\" de programari a Linux","text":"<p>Els paquets a Linux es creen per treballar amb una distribuci\u00f3 en particular, que a m\u00e9s utilitzar\u00e0 el vostre propi administrador de paquets. Aquest programa \u00e9s l'utilitzat pels administradors dels sistemes operatius per instal\u00b7lar programari. Tots funcionen de forma similar per\u00f2 tenen peculiaritats davant dels altres. Les distribucions principals linux han creat els seus propis administradors de paquets que utilitzen formats concrets.</p> <p>Hi ha aplicacions, per exemple l'aplicaci\u00f3 Alien de Debian, que ens permeten canviar entre formats de paquets.</p> <p>Veurem a continuaci\u00f3 els principals formats de paquets utilitzats a Linux:</p> <ul> <li>Paquetes Debian (.deb)': originalment desenvolupat per a la     distribuci\u00f3 de paquetsDebian'. \u00c9s l'est\u00e0ndard de facto tant     per a aquesta distribuci\u00f3 com per a les seves distribucions     derivades, comUbuntu'. Cada paquet d'aquest tipus cont\u00e9 dos     fitxers, un amb informaci\u00f3 de control i l'altre amb les dades de la     instal\u00b7laci\u00f3. Els fitxers estan en format .tar que veurem a     continuaci\u00f3.</li> </ul> <p>DPKG s'encarrega de la gesti\u00f3 d'aquests paquets, empaquetat, desempaquetat, instal\u00b7laci\u00f3, desinstal\u00b7laci\u00f3, ... Hi ha diverses utilitats en l\u00ednia d'ordres que fan \u00fas de dpkg per facilitar tot el proc\u00e9s de gesti\u00f3 de paquets, com araAPT'\u00a0(Eina de paquets avan\u00e7ats),APT-GET'OAptitud'. Tamb\u00e9 n'hi ha alguns amb interf\u00edcie gr\u00e0fica com elSin\u00e0ptic'\u00a0o elDescobreix'.</p> <ul> <li>Paquetes rpm (RPM Package Manager):'\u00a0Originalment Red Hat     Package Manager i desenvolupat per a la distribuci\u00f3Red Hat     Linux', avui dia s'utilitza en tots els seus derivats,     comOpenSUSE'\u00a0OFedora'. \u00c9s el format adoptat per a la     LSB (Linux Standard Base), un projecte de diverses distribucions     Linux per normalitzar l'estructura interna dels sistemes operatius     derivats de Linux.</li> </ul> <p>Normalment contenen executables en format binari (.rpm), per\u00f2 tamb\u00e9 es poden utilitzar per distribuir els fitxers de codi font sense compilar (src.rpm).</p> <ul> <li>Fitxers .tar (Tape Archive):'Arxius dissenyats originalment     per Bell Laboratories el 1979 per al sistema operatiu UNIX (sobre el     qual es va basar posteriorment Linux). Aquest format estava pensat     per arxivar, transferir i fer c\u00f2pies de seguretat i recuperaci\u00f3     sobre cintes magn\u00e8tiques. Permetia als administradors replicar una     estructura de fitxers i carpetes en diferents m\u00e0quines o en la     mateixa.</li> </ul> <p>Als arxius creats amb TAR se'ls denomina comunament tarballs i segueix sent un format utilitzat tant a Linux com a Windows. Les implementacions m\u00e9s recents de tar permeten crear fitxers tar comprimits, per estalviar espai i ample de banda en transmissions. Es comprimeixen i descomprimeixen utilitzant GZip o directament amb les opcions z o x de tar, donant lloc a fitxers .tar.gz, que solen contenir els tipus de lletra perqu\u00e8 l'usuari es construeixi el paquet o aplicaci\u00f3.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#noves-formes-de-distribucio","title":"Noves formes de distribuci\u00f3","text":"<p>Des del punt de vista de l'experi\u00e8ncia de l'usuari, hi ha grans difer\u00e8ncies quant a la facilitat d'obtenci\u00f3 i d'instal\u00b7laci\u00f3 d'aplicacions entre les plataformes d'escriptori i m\u00f2bils. Obtenir aplicacions per a dispositius m\u00f2bils \u00e9s molt m\u00e9s senzill que fer-ho amb ordinadors gr\u00e0cies a les diferentsbotigues', com elPlay Store'\u00a0d'Android o laTenda d'aplicacions'\u00a0d'Apple.</p> <p>En un dispositiu m\u00f2bil n'hi hauria prou amb tenir connexi\u00f3 a internet i utilitzar l'aplicaci\u00f3 de gesti\u00f3 d'aplicacions, mentre que en un ordinador es necessita (tret que sigui un usuariavan\u00e7at'i es controli la CLI) obrir un navegador, obrir un motor de cerca, cerca el nom de l'app, parar atenci\u00f3 a qu\u00e8 est\u00e0s baixant i d'on ho est\u00e0s baixant, verificar que no ha estat modificat, etc.</p> <p>Altres desavantatges que existeixen per al desenvolupador s\u00f3n tot all\u00f2 relacionat amb la gesti\u00f3 de la distribuci\u00f3, la gesti\u00f3 de llic\u00e8ncies, la seguretat, les actualitzacions autom\u00e0tiques en cas de voler assegurar-se que l'usuari utilitza l'\u00faltima versi\u00f3 de l'aplicaci\u00f3, l'obtenci\u00f3 de dades , ja siguin informes derror o dades per a la seva explotaci\u00f3. Tot aix\u00f2 ho ha de dur a terme lequip de desenvolupament.</p> <p>Per solucionar aquests problemes, els sistemes operatius moderns, han desenvolupat solucions tipusbotiga'\u00a0o similar per als usuaris.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#microsoft-store","title":"Microsoft Store","text":"<p>Va apar\u00e8ixer amb Windows XP, on el servei era conegut com a Windows Catalog. Posteriorment a les versions de Windows 8 se'l va rebatejar com a Windows Store per passar a ser Microsoft Store a les versions de Windows 10 i 11. La microsoft Store aglutina les anteriors Windows Marketplace, Windows Phone Store, Xbox Video i Xbox Music, sent possible ara obtenira m\u00e9s d'aplicacions, v\u00eddeos, \u00e0udios i llibres electr\u00f2nics. Les aplicacions que es vulguin distribuir a trav\u00e9s d'aquesta botiga han d'estar certificades quant a compatibilitat i contingut.</p> <p>Per als usuaris de Windows 11, teniu disponibles aplicacions Android, que es podran instal\u00b7lar des de l'Amazon Appstore.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#mac-app-store","title":"Mac App Store","text":"<p>La Mac App Store \u00e9s la plataforma de distribuci\u00f3 d'aplicacions d'Apple per al sistema operatiu macOS llan\u00e7ada el gener del 2011. Es tracta de l'adaptaci\u00f3 de l'App Store per a desenvolupada per a iPhone, i permet comprar, descarregar, instal\u00b7lar, reinstal\u00b7lar aplicacions comprades anteriorment i actualitzar-les. Abans d'estar disponibles, heu de passar un proc\u00e9s d'aprovaci\u00f3. Una cosa a destacar \u00e9s que han de complir les especificacions per a interf\u00edcies dApple i altres restriccions imposades per la mateixa Apple amb fins comercials.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#noves-formes-de-distribucio-a-linux","title":"Noves formes de distribuci\u00f3 a Linux","text":"<p>Per resoldre el problema de la fragmentaci\u00f3 a Linux, \u00e9s a dir, diferents configuracions del sistema operatiu quant a escriptori, organitzaci\u00f3 de directoris, empaquetat de distribucions (.deb, .rpm...), apareixen diferents iniciatives que intenten resoldre'l. Entre elles destaquen Appimage, Snap i Flatpack.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#imatge-de-laplicacio","title":"Imatge de l'aplicaci\u00f3","text":"<p>La idea d'Appimage \u00e9s distribuir aplicacions portables, \u00e9s a dir, aplicacions que no requereixen ser instal\u00b7lades, sin\u00f3 simplement executades i sense necessitat de ser administrador sempre que no sigui necessari per funcionar.</p> <p>No es disposa d'una botiga des d'on descarregar i instal\u00b7lar les aplicacions, per\u00f2 hi ha un repositori (AppImageHub) on trobar-ne infinitat, encara que n'hi pot haver algunes no publicades al lloc. Un cop localitzada l'aplicaci\u00f3, es baixa, se li donen permisos d'execuci\u00f3 i s'executa.</p> <p>La imatge de l'aplicaci\u00f3 ja inclou qualsevol depend\u00e8ncia que es necessiti per\u00f2 no quedar\u00e0 integrada a l'escriptori. Si es vol integrar, podem fer \u00fas del dimoniimatge de l'aplicaci\u00f3'\u00a0perqu\u00e8 s'integri a l'escriptori, afegint-les als men\u00fas, registrant les icones, etc. Es poden mantenir al dia les actualitzacions amb una altra eina anomenadaAppImageUpdate'.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#snap","title":"Snap","text":"<p>Aquest sistema de gesti\u00f3 de paquets universals va ser originalment creat per Canonical, l'empresa darrere del desenvolupament d'Ubuntu. Els seus paquets o snaps s\u00f3n gestionats per una eina anomenada snapd, disponible en moltes de les distribucions actuals com Ubuntu, Arch Linux, CentOS, Debian, Fedora, Manjar Linux, Linux Mint, OpenSUSE, etc. Per tant, qualsevol distribuci\u00f3 que disposi de l'eina snapd podr\u00e0 utilitzarencaix'.</p> <p>El sistema est\u00e0 preparat per funcionar amb dispositius IoT, al n\u00favol i en entorns descriptori. Els seus paquets no depenen de capbotiga', sin\u00f3 que es poden obtenir de diferents fonts, per\u00f2, la botiga d'aplicacions d'Ubuntu s'usa com a repositori predeterminat en aquesta distribuci\u00f3, encara que se'n poden utilitzar d'altres.</p> <p>Per empaquetar un snap s'utilitza l'eina snapcraft, que permet empaquetar aplicacions cli, gui i serveis. El fitxer resultant t\u00e9 extensi\u00f3 .snap.</p>"},{"location":"unitats/9-Testing-distribucio/teoria/5-empaquetat-distribucio/#paquet-pla","title":"Paquet pla","text":"<p>Aquesta eina permet desplegar, gestionar paquets universals i virtualitzar aplicacions en entorns d'escriptori. Proporciona un entorn d'a\u00efllament de proc\u00e9s, de manera que l'aplicaci\u00f3 s'executa de manera independent a la resta del sistema, aconseguint que l'execuci\u00f3 no depengui de la distribuci\u00f3 o la configuraci\u00f3 de l'entorn sobre el qual s'executa. Les aplicacions necessiten permisos dusuari per executar-se. Hi ha moltes aplicacions tant en versi\u00f3 oficial com desenvolupades per tercers. No depenen d'una botiga sin\u00f3 que es distribueixen normalment a trav\u00e9s del vostre repositori, disponible als links de la unitat.</p>"}]}